<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedGate.SQLCompare.Engine</name>
    </assembly>
    <members>
        <member name="T:RedGate.SQLCompare.Engine.ApiHelpers.DeploymentScriptStatementFactory">
            <summary>
            Used to create <see cref="T:RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentScriptStatement"/>s for use in a <see cref="T:RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentPlan"/>
            </summary>
            <remarks>Intended for use with Deployment Blocks</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ApiHelpers.DeploymentScriptStatementFactory.CreateStatements(System.Func{System.String})">
            <summary>
            Creates statements for a user-specified script
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ApiHelpers.StagedDeploymentSqlGenerator">
            <remarks>
            Intended for use with Deployment Blocks.
            For each deployment block, <see cref="M:RedGate.SQLCompare.Engine.ApiHelpers.StagedDeploymentSqlGenerator.GenerateDeploymentPlan(System.IO.DirectoryInfo,System.IO.DirectoryInfo,RedGate.Shared.ComparisonInterfaces.Deployment.IDifferenceFilterer)" /> will be called.
            The results will be merged, and <see cref="M:RedGate.SQLCompare.Engine.ApiHelpers.StagedDeploymentSqlGenerator.GenerateSql(RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentPlan)"/> will be used to create a final script.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ApiHelpers.StagedDeploymentSqlGenerator.GenerateDeploymentPlan(System.IO.DirectoryInfo,System.IO.DirectoryInfo,RedGate.Shared.ComparisonInterfaces.Deployment.IDifferenceFilterer)">
            <remarks>
            The statements generated must not contain any metadata about <paramref name="targetScriptsFolder"/> since the generated script is intended to run against the target database specified in the constructor.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ApiHelpers.DeploymentOptions">
            <remarks>
            Simple wrapper to help keep various customizable aspects of deployment together
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Attributes.DoNotDocumentAttribute">
            <summary>
            Classes marked with this attribute have been chosen not to be documented.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseComparison.CompareDatabases(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,RedGate.SQLCompare.Engine.SqlCompareTableMappings)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EqualityDifferenceConstants">
            <summary>
            Well-known strings for <see cref="T:RedGate.SQLCompare.Engine.EqualityDifference" /> types to avoid breakages when we rename them
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EqualityDifferenceFactory.Difference``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0,``0)">
            <summary>
            Shortcut that turns Difference(x => x.FooProperty.Length, objectIn1, objectIn2)
            into new EqualityDifference("FooProperty.Length", objectIn1.FooProperty.Length, objectIn2.FooProperty.Length).
            </summary>
            <remarks>Uses some LINQ expression tree magic - tests are in EqualityDifferenceFactoryTests</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EqualityDifferenceFactory.Difference``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},``0,``0)">
            <summary>
            Shortcut that turns Difference(x => x.FooProperty.Length, objectIn1, objectIn2)
            into new EqualityDifference("FooProperty.Length", objectIn1.FooProperty.Length, objectIn2.FooProperty.Length).
            </summary>
            <remarks>Uses some LINQ expression tree magic - tests are in EqualityDifferenceFactoryTests</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EqualityDifferenceFactory.AddContext``1(RedGate.SQLCompare.Engine.EqualityDifference,``0,``0)">
            <summary>
            Adds context (which is displayed in the parent nodes of the tree displayed in the UI)
            to an <see cref="T:RedGate.SQLCompare.Engine.EqualityDifference"/>
            </summary>
            <returns>The original <see cref="T:RedGate.SQLCompare.Engine.EqualityDifference"/></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EqualityDifferenceFactory.AddContext``1(RedGate.SQLCompare.Engine.EqualityDifference,System.String,``0,``0)">
            <summary>
            Adds context (which is displayed in the parent nodes of the tree displayed in the UI)
            to an <see cref="T:RedGate.SQLCompare.Engine.EqualityDifference"/>
            </summary>
            <returns>The original <see cref="T:RedGate.SQLCompare.Engine.EqualityDifference"/></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ListComparisonUtils">
            <summary>
            Static methods for comparing collections of SQL objects and getting
            the differences between them.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ListComparisonUtils.CompareLists``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.String,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Takes two collections of comparable SQL objects and compares them on a
            key property. If the source collection has an object that the
            target collection does not have, a "missing" difference is returned.
            If the target collection has an  object that the source collection
            does not have, an "extra" difference is returned. For objects that
            are in both collections, an appropriate equality difference is returned.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ListComparisonUtils.CompareLists``3(``2,``2,System.Func{``0,``1},System.Func{``0,System.String},System.Func{``2,``1,``0},System.String,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Takes two collections of comparable SQL objects and compares them on a
            key property. If the source collection has an object that the
            target collection does not have, a "missing" difference is returned.
            If the target collection has an  object that the source collection
            does not have, an "extra" difference is returned. For objects that
            are in both collections, an appropriate equality difference is returned.
            </summary>
            <typeparam name="TSqlObject">The element type in the lists being compared</typeparam>
            <typeparam name="TProperty">The type of the key to compare</typeparam>
            <typeparam name="TCollection">The collection type, which is exposed in <paramref name="getItemFromKey"/></typeparam>
            <param name="sourceList"></param>
            <param name="targetList"></param>
            <param name="getKeyFromItem">A comparison key to match elements in the collections.</param>
            <param name="getDisplayStringFromItem">A string that can be displayed to the user to identify element</param>
            <param name="getItemFromKey">A reverse lookup of <see paramref="getKeyFromItem"/> which returns null if not found</param>
            <param name="typeName">A display name for the type of object we're comparing (eg "column" or "index" instead of "Field" and
            "RelationalIndex</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ListComparisonUtils.CompareListsWithMappings``2(``1,``1,System.Func{``0,``0},System.Func{``0,``0},System.Func{``0,System.String},System.String,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Takes two collections of comparable SQL objects and compares them on a
            key property. If the source collection has an object that the
            target collection does not have, a "missing" difference is returned.
            If the target collection has an  object that the source collection
            does not have, an "extra" difference is returned. For objects that
            are in both collections, an appropriate equality difference is returned.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ListComparisonUtils.CompareLists``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{System.Collections.Generic.IEnumerable{``0},``0,System.Boolean},System.String)">
            <summary>
            Compare two flat lists (ie the items don't implement <see cref="T:RedGate.SQLCompare.Engine.Model.ISqlComparable"/>)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ListComparisonUtils.CompareListsInOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.String},System.String,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Compare two lists of ISqlComparable objects when the ordering matters (eg columns with Ignore Column Order
            turned off)
            </summary>
            <param name="sourceList"></param>
            <param name="targetList"></param>
            <param name="isSameObject">
            Return true if two objects should be matched together and compared / false if they should be treated as
            non-matching objects
            </param>
            <param name="getNameFromItem">Return a display name for the object</param>
            <param name="typeName">
            A display name for the type of object we're comparing (eg "column" or "index" instead of "Field" and
            "RelationalIndex"
            </param>
            <param name="context"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ComparisonSqlGenerator">
            <summary>
            Generates SQL for a (source/target) pair of tables. Rather than generating the SQL for each table in
            isolation, this class allows for generating SQL for each one in the context of the other. In
            practice, this means ordering the columns in each so that mapped columns are generated in the same
            order in both source and target.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ComparisonSqlGenerator.GetComparisonSql(RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Get the <see cref="T:RedGate.SQLCompare.Engine.ComparisonSql"/> for the source and target objects in the
            <paramref name="difference"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ComparisonSql">
            <summary>
            Encapsulates the source and target SQL for a pair of database objects.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DataCompareIndexDeploymentSql.AlterTableNocheckConstraint(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.ForeignKey)">
            <summary>
            Generate SQL to disable a constraint
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DataCompareIndexDeploymentSql.RestoreConstraintEnabledness(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.ForeignKey,System.Boolean)">
            <summary>
            Generate SQL to re-enable a constraint
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.ChangeCalculation.SecurityPolicyChangesCalculator">
            <summary>
            Calculate the creates, drops and alters required to synchronize security policies between
            source and target.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.ChangeCalculation.SecurityPolicyChangesCalculator.#ctor(RedGate.SQLCompare.Engine.Deployment.Changes.SecurityPolicyChanges,RedGate.SQLCompare.Engine.Messages,RedGate.SQLCompare.Engine.PermissionChangesCalculator,RedGate.SQLCompare.Engine.ExtendedPropertyChangesCalculator,RedGate.SQLCompare.Engine.AlterAuthorizationChangesCalculator)">
            <summary>
            Construct a class for calculating the creates, drops and alters required to synchronize
            security policy objects between source and target.
            </summary>
            <param name="securityPolicyChanges">The collection of security policies to be populated with the required creates, drops and alters.</param>
            <param name="warnings">A collection of warning messages</param>
            <param name="permissionChangesCalculator">A change calculator for the permissions associated with the security policy</param>
            <param name="extendedPropertyChangesCalculator">A change calculator for the extended properties associated with the security policy</param>
            <param name="alterAuthorizationChangesCalculator">A change calculator for the authorizations associated with the security policy</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.ChangeCalculation.SecurityPolicyChangesCalculator.CalculateWork(RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Calculate the work required to deploy the difference between two security policies.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.ChangeCalculation.FilestreamIndexCalculator">
            <summary>
            This class memoises the best filestream index for a pair of tables, given certain options. This was created
            as a potential performance optimisation for tables containing large numbers of indexes, although it is likely
            that it is not required for most databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.ChangeCalculation.FilestreamIndexCalculator.GetBestFilestreamIndexInTarget(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Caches the result of <see cref="M:RedGate.SQLCompare.Engine.Model.FilestreamUtils.BestFilestreamUniqueIndex(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ComparisonContext,RedGate.SQLCompare.Engine.Table)" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Changes.ObjectToAlter">
            <summary>
            non-generic version of <see cref="T:RedGate.SQLCompare.Engine.Deployment.Changes.ObjectToAlter`1" /> for static methods
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Changes.ObjectToAlter.Create``1(``0,``0,System.Collections.Generic.List{RedGate.SQLCompare.Engine.EqualityDifference})">
            <summary>
            helper method since constructors don't do generic type inference yet
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Changes.ObjectToAlter`1">
            <summary>Hold a pair of objects for use in PlannedChanges collections</summary>
            <remarks>
            This isn't used very much at the moment; we should probably use it more (especially in preference to *Targets
            collections) where current PlannedChanges collections aren't clear about whether they contain source or
            target objects. see also: https://github.com/red-gate/SQLCompareEngine/issues/79
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Changes.SecurityPolicyChanges">
            <summary>
            A collection of <see cref="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy"/> objects to create, drop or alter.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.DifferenceCalculatorFactory.CreateDifferenceCalculator(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.TypeRebuilderCollector,RedGate.SQLCompare.Engine.PlannedChanges,RedGate.SQLCompare.Engine.Messages,RedGate.SQLCompare.Engine.WorkFields)">
            <summary>
            Assembles all the different *ChangesCalculator classes into a big pile. Since these classes have all been
            extracted from a single class, there's still a lot of interdependencies that we'd like to clear up, given
            enough time
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.ExecutionBlockExtensions">
            <summary>
            Extension methods for <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.ExecutionBlockExtensions.GetNonBatchMarkerStatements(RedGate.SQLCompare.Engine.IExecutionBlock)">
            <summary>
            Gets an <see cref="T:RedGate.SQLCompare.Engine.IDeploymentScriptStatement"/> for each batch in <paramref name="executionBlock"/>, not including batch markers.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.FileGroupWarningGenerator.GetNonPrimaryFileGroupsFromTables(System.Boolean,RedGate.SQLCompare.Engine.Tables,RedGate.SQLCompare.Engine.Tables)">
            <summary>
            Returns a string that contains the non-primary filegroup names from the tables that are in the table queues
            (rebuild and create).
            </summary>
            <remarks>do we need to include other table queues?</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.FileGroupWarningGenerator.GetNonPrimaryFileGroupsFromSqlServer2005Objects(System.Boolean,RedGate.SQLCompare.Engine.Queues,RedGate.SQLCompare.Engine.Queues,RedGate.SQLCompare.Engine.PartitionSchemes,RedGate.SQLCompare.Engine.PartitionSchemes,RedGate.SQLCompare.Engine.Indexes,RedGate.SQLCompare.Engine.FullTextCatalogs)">
            <summary>
            Returns a string that contains the non-primary filegroup names from the queues and partition schemes.
            </summary>
            <remarks>Also from indexes and catalogs</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.MappingsConverter.GetFieldMappings(RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.SqlCompareTableMappings,System.Boolean)">
            <summary>
            This is a little more complicated than simply looking up difference.ObjectIn1.FullyQualifiedName in the
            tableMappings collection, since schema mappings might have been applied to the difference but not to the
            mappings, so a naive name lookup on the source object would fail. The target object shouldn't have been
            mapped, though, so we use that name for the lookup
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.QueueSanitizer.SanitizeQueues(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,System.Boolean,RedGate.SQLCompare.Engine.Message@,RedGate.SQLCompare.Engine.Message@)">
            <summary>
            Do various fixups to hack <see cref="T:RedGate.SQLCompare.Engine.PlannedChanges"/> into a state that seems sensible
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.QueueSanitizer.IndexCanBeReferencedByKey(RedGate.SQLCompare.Engine.RelationalIndex,RedGate.SQLCompare.Engine.ForeignKey)">
            <summary>
            Indicates whether a particular index can be referenced by foreign key. A foreign key
            can only reference a column (or set of columns) that have a primary key or unique
            constraint defined on them.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.DeploymentStatementGenerator">
            <summary>
            Creates a safe overestimate of the <see cref="T:RedGate.SQLCompare.Engine.IDeploymentScriptStatement"/>s needed to make the change requested.
            i.e. May return more statements than necessary, but these can be handled by an <see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.IDeploymentStatementFilter"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.DeploymentStatementGenerator.#ctor(RedGate.SQLCompare.Engine.Options)">
            <param name="deploymentOptions">Unioned with any options passed on a per statement basis</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.DeploymentStatementGenerator.GetPublicBatchStatements(RedGate.SQLCompare.Engine.IDeploymentScriptStatement)">
            <returns>the passed-in statement decorated with any SET options required to run that statement</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.DeploymentStatementGenerator.GetSetOptionStatements(RedGate.SQLCompare.Engine.SqlSetOption,System.Boolean,RedGate.SQLCompare.Engine.Options)">
            <returns>a statement for the given SET option if not ignored by the options</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.DeploymentStatementGenerator.GetBatchSetOptionsStatements(RedGate.SQLCompare.Engine.SqlSetOptions)">
            <returns>two statements (one for ON, one for OFF) for all <paramref name="sqlSetOptions"/></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.DeploymentStatementGenerator.GetTryCatchStatement(RedGate.SQLCompare.Engine.IDeploymentScriptStatement)">
            <returns>the given statement wrapped in a TRY/CATCH block with standard error handling (if error handling is enabled)</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.DeploymentStatementGenerator.GetErrorHandlingStatements(RedGate.SQLCompare.Engine.Options)">
            <returns>an error handling statement (if error handling is enabled)</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.DeploymentStatementGenerator.GetPrintStatements(System.String)">
            <returns>a single PrintStatement with the given message</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.IDeploymentStatementFilter">
            <summary>
            All statements must be passed through this filter so it can take into account previous statements
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.IDeploymentStatementFilter.GetFiltered(RedGate.SQLCompare.Engine.IDeploymentScriptStatement)">
            <returns>Statements that should be added according to this filter</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.IScriptHeaderStatementsGenerator">
            <summary>
            Exists to allow future flexibility in generating the script header comment for SOC and/or Migrations
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.IScriptHeaderStatementsGenerator.GetCommentHeaderStatements(System.String)">
            <summary>
            Create a <see cref="T:RedGate.SQLCompare.Engine.Deployment.SqlScriptStatements.CommentHeader"/> statement for the pretty comment that goes at the top of SQL Compare deployment scripts
            </summary>
            <param name="productInfo">Info about the product, e.g. "SQL Compare version 1.2.3"</param>
            <remarks>
            Prefer this over <see cref="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.GetCommentHeader(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.DateTime)"/>
            where possible - using the statement class carries more semantic meaning in a deployment script.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.OptimizingFilter">
            <summary>
            Used to remove duplicate error handling statements
            Takes into account the state of the <see cref="T:RedGate.SQLCompare.Engine.SqlSetOptions"/> during the script in order to remove unnecessary SETs
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.SchemaChangeSectionsGenerator">
            <summary>
            Allows the parameters common across the deployemnt to be passed into the constructor.
            This is currently all of them, but in future things like <see cref="T:System.Threading.CancellationToken"/> would be passed to <see cref="M:RedGate.SQLCompare.Engine.Deployment.Sections.SchemaChangeSectionsGenerator.GenerateSections"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SchemaChangeSectionsGenerator.GenerateSections">
            <summary>
            Generates the schema-change sections of the deployment script.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.ScriptHeaderStatementsGenerator">
            <summary>
            Creates a descriptive comment for live database to live database deployments only
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder">
            <summary>
            Removes redundant statements for <see cref="T:RedGate.SQLCompare.Engine.SqlSetOptions"/> and batch markers
            </summary>
            <remarks>
            Every public method should:
            1. Collect a superset of the statements to be run
            2. Call <see cref="M:RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder.AddFilteredBatches(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.IDeploymentScriptStatement})"/> on them
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder.ForceSetOptionsAsBatch(RedGate.SQLCompare.Engine.SqlSetOptions)">
            <summary>
            Writes all <paramref name="sqlSetOptions"/> in two batches (one for ON, one for OFF)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder.AddPrintStatement(RedGate.SQLCompare.Engine.Options,System.String)">
            <remarks>Based on the assumption that a print statement may precede a long running statement also calls <see cref="M:RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder.AddErrorHandling(RedGate.SQLCompare.Engine.Options)"/></remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlDeploymentPipelineFactory">
            <summary>
            Isolates construction logic and ensures the same parameters are passed to the many types involved in deployment
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SqlDeploymentPipelineFactory.CreateSyncToSectionsBuilder(RedGate.SQLCompare.Engine.WorkFields)">
            <summary>
            Only internal for test purposes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SqlDeploymentPipelineFactory.CreateSectionsToSqlBuilder(System.String,RedGate.SQLCompare.Engine.ApiHelpers.DeploymentOptions,System.Boolean)">
            <summary>
            Create a <see cref="T:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder"/> taking into account the current TransactionIsolationLevel/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SqlDeploymentPipelineFactory.CreateSchemaChangeSectionsGenerator(RedGate.SQLCompare.Engine.WorkFields,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.IDatabase)">
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSectionBuilderExtensions">
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSectionBuilderExtensions.AddBatches(RedGate.SQLCompare.Engine.ISqlSectionBuilder,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.IDeploymentScriptStatement})">
            <summary>
            Adds a batch for each item in <paramref name="objectStatementPairs"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSections">
            <summary>
            Contains all the information required to build the schema-change part of a deployment script
            </summary>
            <remarks>Ideally this would hold on to as little information as possible about the comparison</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSectionsTransformations">
            <summary>
            Methods to apply various rules to the deployment by transforms on <see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSections"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSectionsTransformations.FixSecurityPolicyDependencyWhenAlteringFunctions(RedGate.SQLCompare.Engine.Deployment.Sections.SqlSections,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options)">
            <summary>
            If we try to alter a function that is referenced by a security policy security predicate, we have to remove the
            predicate before SQL Server will allow us to alter the function. This fixup wraps ALTER FUNCTION
            statements in drop/creates of the appropriate security predicate, unless the security policy has already been
            dropped at that point in the deployment script.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSectionsTransformations.FixSecurityPolicyDependencyWhenAlteringFunctions(System.Collections.Generic.LinkedList{RedGate.SQLCompare.Engine.IDeploymentScriptStatement},RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options)">
            <remarks>
            There are basically two cases that this method handles:
            <para />
            1) For normal function alters, we'll just wrap the function alter statement directly with a drop and create
            for the predicate.
            <para />
            2) In <see cref="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.BuildSchemaBindingsUnbind(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects,RedGate.SQLCompare.Engine.IDatabase)" />, we remove schemabinding from
            functions so that we can alter other objects that the function might depend on, and then queue up another
            function alter that will put the schemabinding back. In this case we can't re-add the security predicate until
            the schemabinding is re-added to the function.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.Sections.ISqlSectionsExtensions">
            <summary>
            More abstraction is needed before we can expose <see cref="T:RedGate.SQLCompare.Engine.IDeploymentScriptStatement"/> to the world.
            This helps create the <see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSections"/> is for use within compare engine only.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.ISqlSectionsExtensions.ToImpl(RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentPlan)">
            <summary>
            Get the implementation that compare engine operates on
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.Sections.ISqlSectionsExtensions.ToImpl(System.Collections.Generic.IEnumerable{RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentScriptStatement})">
            <summary>
            Get the implementation that compare engine operates on
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.DefaultSqlGenerator.BuildDefaultsCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Note: set quoted identifiers off for the creation of defaults</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.FullTextCatalogSqlGenerator.BuildFullTextCatalogCreates(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Create full-text catalogs</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.FullTextCatalogSqlGenerator.BuildFullTextCatalogDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Drop fulltext catalogs Prerequisite: DropFulltextFromTablesAndColumns</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.FullTextCatalogSqlGenerator.BuildFullTextCatalogAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder)">
            <summary>
            Alters fulltext catalogs Prerequisite: create users, Note the this IS transactional!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.FullTextIndexSqlGenerator.BuildFullTextDropFromTablesAndColumns(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder)">
            <summary>Drop full text information from columns, fulltext from tables</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.FullTextIndexSqlGenerator.BuildFullTextIndexInitialization(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.IDatabase,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ViewTableSuperClass},System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.IField})">
            <summary>
            Fulltext: adding full text indexing to tables, columns, and activating it. Note that for
            SqlServer2005 this is still NOT transactional (as oposed to its documentation!)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.FullTextIndexSqlGenerator.BuildFullTextIndexAddColumns(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.IField})">
            <summary>
            Builds a list of <see cref="T:RedGate.SQLCompare.Engine.Deployment.SqlScriptStatements.FullText.AlterFullTextIndexAddColumnStatement"/>s
            to populate a Fulltext Index.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.FullTextStoplistSqlGenerator.BuildFullTextStoplistCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Create fulltext stoplists.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.IndexSqlGenerator.CreateClusteredIndexes(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.RelationalIndex},RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,System.String,System.String,System.Collections.Generic.IList{RedGate.SQLCompare.Engine.Index})">
            <summary>
            Adds CREATE statements for clustered primary keys, unique constraints, statistics and indexes
            </summary>
            <param name="clusteredIndexesToCreate">The clustered indexes to create. <see cref="P:RedGate.SQLCompare.Engine.Index.AlreadyDone"/> will be set to true on these indexes.</param>
            <param name="sqlBuilder">The deployment script to which the CREATE statements should be appended</param>
            <param name="options"></param>
            <param name="parentName">The name of the table on which to create the indexes.  If null, we guess it from the indexes' parents and hackily cache it</param>
            <param name="idxPrefix">The prefix for a temporary object used for a rebuild, e.g. "RG_Recovery_"</param>
            <param name="tempIndexes">This method outputs a list of indexes to rename at the end of a rebuild so we can remove the temp prefixes</param>
            <returns>The parentname parameter if one was specified, or the last index's parent's FQN otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.PermissionSqlGenerator.BuildPermissionsRestore(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Restores the permissions of objects that were rebuilt</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.BackupCommandGenerator.PathCombine(System.String,System.String)">
            <summary>
            A non-validating version of Path.Combine() - our "&lt;AUTO&gt;" tag for naming automatically breaks
            Path.Combine().
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.BackupCommandGenerator.BuildBackupStatement(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Write a backup statement into <paramref name="sqlBuilder" /> if backup-in-deployment-script is enabled
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.BackupCommandGenerator.BuildBackupStatement(RedGate.SQLCompare.Engine.ExecutionBlock)">
            <summary>
            Write a backup statement into <paramref name="tsqlScriptBuilder" />. This overload is used by the migrations
            v1 code and should probably be deprecated
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.BackupCommandGenerator.BuildRestoreComment(RedGate.SQLCompare.Engine.ISqlSectionBuilder)">
            <summary>
            Write a restore comment (indicating how to restore the database) into <paramref name="sqlBuilder" /> if
            backup-in-deployment-script is enabled
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.BackupCommandGenerator.BuildRestoreComment(RedGate.SQLCompare.Engine.ExecutionBlock)">
            <summary>
            Write a restore comment (indicating how to restore the database)  into <paramref name="tsqlScriptBuilder" />.
            This overload is used by the migrations v1 code and should probably be deprecated
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SearchPropertyListSqlGenerator.BuildSearchPropertyListsCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the search property lists. Prerequisites:</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SearchPropertyListSqlGenerator.BuildSearchPropertyListsDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Drops the sequences. Prerequisites:</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SecurityPolicySqlGenerator">
            <summary>
            Given a SQL script builder and a security policy, will add appropriate
            messages and SQL statements to the deployment script for security policy
            CREATEs, DROPs and ALTERs.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SecurityPolicySqlGenerator.BuildSecurityPolicyCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Given a SQL script builder and a security policy, will add an appropriate
            message and SQL statement to the deployment script for CREATE-ing the
            given security policy.
            </summary>
            <param name="sqlBuilder">SQL deployment script builder.</param>
            <param name="securityPolicy">Security policy to CREATE.</param>
            <param name="options">Deployment options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SecurityPolicySqlGenerator.BuildSecurityPolicyDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Given a SQL script builder and a security policy, will add an appropriate
            message and SQL statement to the deployment script for DROP-ing the
            given security policy.
            </summary>
            <param name="sqlBuilder">SQL deployment script builder.</param>
            <param name="securityPolicy">Security policy to DROP.</param>
            <param name="options">Deployment options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SecurityPolicySqlGenerator.BuildSecurityPolicyAlter(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Given a SQL script builder and a security policy, will add an appropriate
            message and SQL statement to the deployment script for ALTER-ing the
            given security policy.
            </summary>
            <param name="sqlBuilder">SQL deployment script builder.</param>
            <param name="securityPolicy">Security policy to ALTER.</param>
            <param name="options">Deployment options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TriggerSqlGenerator.BuildDisableDdlTriggers(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Disables ddl triggers. Prerequisites: version Note that it should be transactional
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TriggerSqlGenerator.BuildReenableDdlTriggers(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Reenables ddl triggers. Prerequisites: version Note that it should be transactional
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TriggerSqlGenerator.AlterTriggerSQL(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean@,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary></summary>
            <param name="sqlBuilder"></param>
            <param name="trigger"></param>
            <param name="options"></param>
            <param name="stage1">
            indicates whether we are doing blankin trigger order, or the second stage, i.e. setting first and lasts.
            </param>
            <param name="triggerOrderReset">
            If true, this trigger has been altered, so its order information has been lost and needs to be reset.
            </param>
            <param name="targetFeatures"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TriggerSqlGenerator.SetTriggerOrderScript(RedGate.SQLCompare.Engine.WorkFields,RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Add a new SetTriggerOrderStatement to the script with the associated deployment script boilerplate
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.EventNotificationSqlGenerator.BuildEventNotificationsCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Creates the event notifications. Prerequisites: create xmlSchemaCollections , assembly, service, contract,
            message type, xmlSchemaCollection
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.EventNotificationSqlGenerator.BuildEventNotificationsDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops the event notifications. This should be run before event notifications are added. Prerequisites: -
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ServiceSqlGenerator.BuildServicesCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the services. Prerequisites: BuildContractsCreate, BuildQueuesCreate</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ServiceSqlGenerator.BuildServicesDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Drops the Services. Prerequisites: RoutesDrop, EventNotificationsDrop</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ServiceSqlGenerator.BuildServicesAlter(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Alters the Services. Prerequisites: Contracts alter/create, queues alter/create
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.QueueSqlGenerator.BuildQueuesCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the queues. Prerequisites: ...</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.QueueSqlGenerator.BuildQueuesDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops the queues. Prerequisites: BuildServicesDrop, BuildEventNotificationsDrop
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.QueueSqlGenerator.BuildQueuesAlter(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Alter the queues. Queues created. Prerequisites: BuildServicesDrop</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SequenceSqlGenerator.BuildSequencesCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the sequences. Prerequisites: udts?</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SequenceSqlGenerator.BuildSequencesDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Drops the sequences. Prerequisites: udts ?</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ContractSqlGenerator.BuildContractsCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Creates the contracts. Prerequisites: create xmlSchemaCollections, BuildMessageTypesCreate
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ContractSqlGenerator.BuildContractsDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops the contracts. This should be run before contracts are added. Prerequisites: BuildContractsCreate,
            BuildServicesDrop
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ContractSqlGenerator.BuildContractsAlter(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Alters contracts. Note that this is only authorization change. Prerequisites: BuildServicesDrop
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.CertificateSqlGenerator.BuildCertificatesCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the certificates. Prerequisites: -</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.CertificateSqlGenerator.BuildCertificatesDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops the certificates. This should be run before certificates are added. Prerequisites: users drop
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.MessageTypeSqlGenerator.BuildMessageTypesCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the message types. Prerequisites: create xmlSchemaCollections</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.MessageTypeSqlGenerator.BuildMessageTypesDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops the message types. This should be run before message types are added. Prerequisites: BuildContractsDrop
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SchemaSqlGenerator.BuildSchemasCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates schemas. Prerequisites: users (needed for authorization)</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SchemaSqlGenerator.BuildSchemasAlter(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Alters schemas. Prerequisites: users (needed for authorization)</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SchemaSqlGenerator.BuildSchemasDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Drops schemas. Prerequisite: users</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.AsymmetricKeySqlGenerator.BuildAsymmetricKeysCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the asymmetric keys. Prerequisites: -</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.AsymmetricKeySqlGenerator.BuildAsymmetricKeysDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops the asymmetric keys. This should be run before asymmetric keys are added. Prerequisites: users drop
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ExtendedPropertiesSqlGenerator.BuildExtendedPropertiesAltersCreates(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            This clearly must be run after all the extended property supporting objects are created/alterer(rebuilt).
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ExtendedPropertiesSqlGenerator.BuildExtendedPropertiesDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Drops extended properties. Prerequisites: These must be dropped before tables, procedures, ... are dropped!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ServiceBindingSqlGenerator.BuildServiceBindingsCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the service bindings. Prerequisites:</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ServiceBindingSqlGenerator.BuildServiceBindingsDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Drops the ServiceBindings. Prerequisites:</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.ServiceBindingSqlGenerator.BuildServiceBindingsAlter(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Alters the ServiceBindings. Prerequisites: users should be created</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.UserSqlGenerator.BuildUsersDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Drops users. Prerequisite: ?</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.UserSqlGenerator.BuildUsersCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Creates users. Prerequisites: -</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.UserSqlGenerator.BuildUsersAlter(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Alters users' default schemata. Prerequisites: - Note that this is SqlServer2005 dependent!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.XmlSchemaSqlGenerator.BuildXmlSchemaCollectionsDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Drops xml schema collections. Prerequisites: drop message types, table unbind, procs, functions drop/rebuild
            initiated,
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.XmlSchemaSqlGenerator.BuildXmlSchemaCollectionsCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates xml schema collections. Prerequisites: users create/alter</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SymmetricKeySqlGenerator.BuildSymmetricKeysCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Creates the symmetric keys. Prerequisites: -</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.SymmetricKeySqlGenerator.BuildSymmetricKeysDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops the symmetric keys. This should be run before symmetric keys are added. Prerequisites: users drop
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.UdtSqlGenerator.BuildUdtsRebind(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            If we have modified user defined types then we need to make sure that table columns which we have unbound
            from them are correct again. Note that we also need to re-add the ROWGUIDCOL property if appropriate.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.UdtSqlGenerator.BuildUdtsUnbind(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Unbinding user defined data types. We might need to drop user defined types later on, for later modification.
            Before we can do this, we need to unbind them from any tables Note that columns cannot be altered if
            ROWGUIDCOLs are bound to them
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.RouteSqlGenerator.BuildCreates(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Creates routes. Prerequisites: advised? : create xmlSchemaCollections , assembly, service, contract, message
            type, xmlSchemaCollection
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.RouteSqlGenerator.BuildDrops(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops routes. This should be run before event routes are added. Prerequisites: -
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.RouteSqlGenerator.BuildAlters(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Alters routes. This should be run before event routes are added. Prerequisites: -
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.DdlTriggerSqlGenerator.BuildCreates(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Creates ddl triggers. Prerequisites: version, assemblies, UDTs, drop ddl triggers
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.DdlTriggerSqlGenerator.BuildDrops(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Drops the ddl triggers. Prerequisites: version</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.DdlTriggerSqlGenerator.BuildAlters(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Alters ddl triggers. Prerequisites: version, assemblies, UDTs, drop ddl triggers
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.AssemblySqlGenerator.BuildDrops(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>Drops clr assembly Prerequisites: clr types are unbound/dropped</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.AssemblySqlGenerator.BuildCreates(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>Creates clr assemblies. Prerequisites: assemblies drop.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.AssemblySqlGenerator.BuildAlters(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Creates clr assemblies. Prerequisites: Dependent tables, procs, functions, ddlTriggers, triggers, drop/unbind
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.PartitionSqlGenerator.BuildPartitionFunctionsCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Creates partition functions. Prerequisites: -</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.PartitionSqlGenerator.BuildPartitionFunctionsDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>Drops partition functions. Prerequisites: BuildPartitionSchemesDrop</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.PartitionSqlGenerator.BuildPartitionFunctionsAlter(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Alters partition functions. This should be run before partition functions are added. Prerequisites: partition
            schema drops, partition schema alters?
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.PartitionSqlGenerator.BuildPartitionSchemesCreate(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>Creates partition schemes. Prerequisites: PartitionFunctions</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.PartitionSqlGenerator.BuildPartitionSchemesDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>Drops partition schemes. Prerequisites: BuildPartitionSchemesDrop</summary>
            <param name="sqlBuilder"></param>
            <param name="options"></param>
            <param name="singleDiff">It is a single difference</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.CreateCheckConstraintsAndForeignKeys(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>Prereqisite: CreateIndexes</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.DisableCheckConstraintsAndForeignKeys(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Take constraints from ForeignKeysToCreate ForeignKeysToAlter and CheckConstraintsToCreate and script out
            ALTER TABLE NOCHECK CONSTRAINT statements as appropriate
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.EnableForeignKeys(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Take FKs from ForeignKeysToAlter and script out ALTER TABLE CHECK CONSTRAINT statements as appropriate
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.ForeignKeyBelongsToScriptedReferencedTable(RedGate.SQLCompare.Engine.Tables,RedGate.SQLCompare.Engine.ForeignKey)">
            <summary>
            need to see if the foreign key belongs to a table that is being scripted. note that sometimes rogue foreign
            keys are included for scripting so we need to exclude these. note also that we need to script foreign keys on
            REFERENCED tables since foreign keys may be dropped and then recreated
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.BuildCheckConstraintsAndKeysDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder)">
            <summary>Drops check constraints, primary keys and unique indexes</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.BuildForeignKeysDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder)">
            <summary>
            Drops foreign keys Prerequisites: Must be done before primary keys are dropped!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.BuildIndexesDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder)">
            <summary>Drops indexes. First clustered nonclustered indexes, then clustered ones.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.BuildIndexesXmlSpatialDrops(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder)">
            <summary>Drops xml indexes. These must be dropped before primary keys are dropped.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableFeatureSqlGenerator.BuildIndexesAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder)">
            <summary>
            Code for changing indexes in ways that doesn't require a drop/create
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableRebuilder.RebuildPrefix">
            <summary>
            A prefix attached to temporary tables to mark them as created by us.
            The previous one was tmp_rg_xx
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableRebuilder.BuildCoreObjectsRebuilds(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Creates and alters tables, views, stored procedures, synonyms and functions in the order of their
            dependencies. Prerequisites: BuildUdtsRebind
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableRebuilder.DoCoreObjectsCreateAlterRebuilds(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.WorkItem},RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{RedGate.SQLCompare.Engine.FieldBinding}},System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.Indexes},RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Does the core object creates/rebuilds.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableRebuilder.HistoryTableFor(RedGate.SQLCompare.Engine.Table)">
            <summary>
            Create a clone of the input table model with what we think the history table should look like.
            This is currently necessary since we don't actually register the history table at the moment : SC-9482
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableRebuilder.BuildCoreObjectsCreatesAndAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Creates and alters tables, views, stored procedures, synonyms and functions in the order of their
            dependencies. Prerequisites: BuildUdtsRebind
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableRebuilder.AlterViewSQL(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.View,RedGate.SQLCompare.Engine.Options)">
            <summary></summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SqlGenerators.TableRebuilder.RebuildSQLUnbindCLRTypesAndFileGroups(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            This unbinds CLR types from tables by using the ToString Method. This is only used when the # option is
            enabled.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.IServerFactory.CreateServerBackupCapabilities(RedGate.SQLCompare.Engine.IDataSource)">
            <summary>
            Creates an IServerBackupCapabilities from the DataSource
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SqlScriptStatements.LazyArbitrarySqlStatement">
            <summary>
            The most general implementation of <see cref="T:RedGate.SQLCompare.Engine.IDeploymentScriptStatement"/>.
            </summary>
            <remarks>A more specific statement type should be used wherever possible to increase testability.</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SqlScriptStatements.PlaceholderType">
            <summary>
            Any additions must be handled in <see cref="M:RedGate.SQLCompare.Engine.Deployment.SqlScriptStatements.StatementPlaceholder.UpdateIndexes(RedGate.SQLCompare.Engine.ExecutionBlockIndexes,System.Int64)" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SqlScriptStatements.StatementPlaceholder">
            <summary>
            Allows us to defer calculating the <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock"/> by marking the point we'll want to record later.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SyncToScript.BatchMetaData">
            <summary>
            Metadata for a batch in an <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SyncToScript.DbInfoExtensions">
            <summary>
            Extension methods for <see cref="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation"/>, which is basically always referred to as DbInfo
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SyncToScript.DbInfoExtensions.WithInfoFromSourceDatabase(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Database)">
            <returns>A new dbinfo incorporating owner, version and collation info from <paramref name="sourceDatabase"/></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SyncToScript.DbInfoExtensions.WriteDbInfoWithLogging(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,System.IO.DirectoryInfo)">
            <remarks>
            Just use <see cref="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.WriteDatabaseInformationFile(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,System.String)"/> directly unless you need to log when it starts and ends.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SyncToScript.IBatchBuilder">
            <summary>
            Defines what an <see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder"/> does with its sections
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SyncToScript.IBatchBuilder.AddStatement(RedGate.SQLCompare.Engine.IDeploymentScriptStatement,RedGate.SQLCompare.Engine.DeploymentScriptSqlGenerator)">
            <remarks>
            Should NOT add a batch marker
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SyncToScript.IBatchBuilder.AddBatchMarker">
            <remarks>
            At minimum, adds a batch marker if it's needed
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SyncToScript.SqlCompareDatabaseScripter">
            <summary>
            Deploys a database to a folder taking into account current contents.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SyncToScript.SqlCompareDatabaseScripter.#ctor(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation)">
            <param name="options">Used for registering the target scripts folder, comparing and deploying</param>
            <param name="generator">Used to chooses file names for created objects</param>
            <param name="dbInfo">Used for registering the target scripts folder and building differences</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SyncToScript.SqlCompareDatabaseScripter.DeployToFolder(RedGate.SQLCompare.Engine.Database,System.IO.DirectoryInfo)">
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Deployment.SyncToScript.ScriptSourceExtensions">
            <summary>
            Extension methods for <seealso cref="T:RedGate.SQLCompare.Engine.ScriptSource"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Deployment.SyncToScript.ScriptSourceExtensions.GetAllSubScriptSources(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ScriptSource})">
            <summary>
            A <seealso cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> is actually the root of a tree of <seealso cref="T:RedGate.SQLCompare.Engine.ScriptSource"/>s.
            This method flattens that tree into an <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExtendedPropertyTarget">
            <summary>
            A pair of <see cref="T:RedGate.SQLCompare.Engine.ExtendedProperty"/> and <see cref="T:RedGate.SQLCompare.Engine.ScriptableDatabaseObject"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExecutionBlockBatchBuilder">
            <summary>
            Creates an <see cref="P:RedGate.SQLCompare.Engine.ExecutionBlockBatchBuilder.ExecutionBlock"/> for the batches, and can provide error handling statements when combined with <see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlockBatchBuilder.BatchCount">
            <remarks><see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSections"/> are the new way to insert statements, prefer using that where possible</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlockBatchBuilder.Dispose">
            <summary>
            Cleans up temporary files
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExecutionBlockBatchBuilderExtensions">
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlockBatchBuilderExtensions.WrapInSectionBuilder(RedGate.SQLCompare.Engine.ExecutionBlockBatchBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Creates an optimizing <see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder"/> for <paramref name="batchBuilder"/>.
            </summary>
            <remarks>
            The responsibility to dispose of the <paramref name="batchBuilder"/> remains with the caller.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ISqlSectionBuilder">
            <summary>
            Builds a section of sql for either a scripts folder or a deployment script
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ISqlSectionBuilder.AddBatch(RedGate.SQLCompare.Engine.IDeploymentScriptStatement)">
            <summary>
            Adds the <paramref name="statement"/> followed by a batch marker statement for most <see cref="T:RedGate.SQLCompare.Engine.BatchType"/>s.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ISqlSectionBuilder.AddBatchInTryCatch(RedGate.SQLCompare.Engine.IDeploymentScriptStatement)">
            <summary>
            Add the <paramref name="statement"/> wrapped in a try...catch statement followed by a batch marker
            for most <see cref="T:RedGate.SQLCompare.Engine.BatchType"/>s.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ISqlSectionBuilder.SetOption(RedGate.SQLCompare.Engine.SqlSetOption,System.Boolean)">
            <summary>
            Regardless of <see cref="T:RedGate.SQLCompare.Engine.Options"/>, adds a batch setting <paramref name="sqlSetOption"/> to <paramref name="value"/>.
            No options are taken into account.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ISqlSectionBuilder.SetOption(RedGate.SQLCompare.Engine.SqlSetOption,System.Boolean,RedGate.SQLCompare.Engine.Options)">
            <summary>
            <paramref name="options"/> allowing, adds a batch setting <paramref name="sqlSetOption"/> to <paramref name="value"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ISqlSectionBuilder.AddErrorHandling(RedGate.SQLCompare.Engine.Options)">
            <summary>
            This should be used periodically in a deployment script, ideally before long-running operations to ensure the script doesn't spend too long executing after an error.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ISqlSectionBuilder.AddPrintStatement(RedGate.SQLCompare.Engine.Options,System.String)">
            <summary>Adds a PRINT statement</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraintChangesCalculator.ChangeOfInlining(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.CheckConstraint,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Call this on objects from a ScriptFolder to check whether the inlining of a check constraint has changed (and
            therefore the table body needs rewriting).
            </summary>
            <param name="targetTable">The parent table of inlinableObject</param>
            <param name="checkConstraint">The CheckConstraint to check the inlining of in targetTable</param>
            <param name="options">The options in use.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeyChangesCalculator.CalculateWorkTableForeignKeys(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary></summary>
            <param name="sourceTable"></param>
            <param name="targetTable"></param>
            <param name="targetDatabase"></param>
            <param name="options"></param>
            <param name="needToForceTableBodyAlter">
            Used when the target is a scripts folder. This forces many extra creates for the implicit fks.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IndexesChangeCalculator.AnyIndexesBeingCreatedForPrimaryKeys(RedGate.SQLCompare.Engine.Table)">
            <summary>
            Returns <code>true</code> iff there are any primary keys to be created on <paramref name="targetTable"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IndexesChangeCalculator.ChangeOfInlining(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Call this on objects from a ScriptFolder to check whether the inlining of an index has changed (and therefore
            the table body needs rewriting).
            </summary>
            <param name="targetTable">The parent table of inlinableObject</param>
            <param name="sourceTable">The associated table in the source</param>
            <param name="index">The Index to check the inlining of in targetTable</param>
            <param name="options">The options in use.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IndexesChangeCalculator.CalculateWorkTableIndexes(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Populate adds/drops/alters for indexes between sourceTable and targetTable
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IndexesChangeCalculator.DropIndexesIfNeeded(RedGate.SQLCompare.Engine.Indexes,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Drop listed indexes, except the index that we think is being used as the filestream unique index if that exists
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IndexesChangeCalculator.TryAddOrWarnAboutIndexes(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Indexes,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Add indexes in <paramref name="indexes"/> to the list of indexes to create if possible; otherwise add warnings saying why not
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IndexesChangeCalculator.TryAddOrWarnAboutIndex(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Add index <paramref name="index"/> to the list of indexes to create if possible; otherwise add warnings saying why not
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DefaultsChanges">
            <summary>
            TODO: I'm not sure if this grouping is sensible; currently it's just everything needed by
            DefaultChangesCalculator Need to do a proper investigation on what CompareEngine thinks the difference
            between defaults and DRI defaults is
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DRIDefaultsChanges">
            <summary>
            TODO: I'm not sure if this grouping is sensible. Currently it's defaults-related things that isn't in
            DefaultsChanges
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FulltextChanges">
            <summary>
            TODO: is there a sensible subdivision of this class? Alternatively, we might want to put fulltext changes
            queues alongside their normal versions (eg fulltext views/tables to drop goes alongside views (or tables?)
            and fulltext columns to drop goes alongside fields to drop
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DeploymentScriptFromSectionsBuilder">
            <summary>
            Plumbs <see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSections"/> together to form a deployment script
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptFromSectionsBuilder.GenerateSql(RedGate.SQLCompare.Engine.Deployment.Sections.SqlSections)">
            <summary>
            Creates a single script from sections by adding appropriate transaction and error handling statements
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExecutionBlockIndexes">
            <summary>
            Used to inspect, or insert into parts of a <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock"/>
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlockIndexes.StartOfTopNonTransactionalStatements">
            <summary>
            Before any schema changes
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlockIndexes.StartOfTransactionalStatements">
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlockIndexes.EndOfTransactionalStatements">
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlockIndexes.EndOfDeploymentBeforeErrorHandling">
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlockIndexes.StaticDataInsertPosition">
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DeploymentScriptSqlGenerator">
            <summary>
            Returns at most one T-SQL batch for the given statement. The string must not contain batch markers (i.e. GO statements).
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDeploymentScriptStatement.Accept(RedGate.SQLCompare.Engine.ISqlGenerator)">
            <summary>
            At most one T-SQL batch. Must not contain batch markers (i.e. GO statements).
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.RolesSqlGenerator.BuildRolesAlterMembership(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This adds and removes role members. Note that sp_addrolemember is not transactional, even in SQL Server 2005.
            This makes sense, of course ;)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.RolesSqlGenerator.BuildRolesAlterAuthorization(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            This alters the roles owner. This is transactional in 2005, and makes no sense in 2k. This also alters the
            default schema for application roles.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EqualityDifference.AddContext(System.String,System.String)">
            <summary>
            Add a context with a single value (which will be used for both sourceValue and targetValue)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EqualityDifference.AddContext(System.String,System.String,System.String)">
            <summary>
            Add a context with potentially-different source and target values (this could be useful eg if mapping between things with different names might be happening)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EqualityDifference.GetDifferenceAsTree(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.EqualityDifference})">
            <summary>
            Get a nicely-formatted description for <paramref name="differences"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EqualityDifference.OutputDifferenceAsTree(System.IO.TextWriter,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.EqualityDifference})">
            <summary>
            Print a nicely-formatted description of <paramref name="differences"/> to <paramref name="output"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AlterTableWorkItem">
            <summary>
            A <see cref="T:RedGate.SQLCompare.Engine.WorkItem" /> specifically for altering a table. Extra information about what we plan to do to
            the table is stored in <see cref="P:RedGate.SQLCompare.Engine.AlterTableWorkItem.TableChange" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EnumerableExtensions">
            <summary>
            Extension methods for <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <summary>
            Convert a list of IGroupings to a dictionary in the obvious way
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Convert a list of KeyValuePairs to a dictionary in the obvious way
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EnumerableExtensions.ToKeyedCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Convert an IEnumerable to an IKeyedCollection so indexing is available
            </summary>
            <remarks>
            This can be useful if you want to filter an unordered collection and then compare it with another one
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Facts.DatabaseFurFacts">
            <summary>
            Methods for getting interesting FUR data out of the engine without having to depend on the model directly
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Facts.DatabaseFurFacts.GetPropertiesForDatabase(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Get a set of interesting facts about a database to be used in a PFUR event
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.FilterableObjectIds">
            <summary>
            A pair of <see cref="T:RedGate.SQLCompare.Engine.Filter.FilterableObjectId"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.AND`1">
            <summary>A set of filter conditions ANDed together.</summary>
            <typeparam name="T">The type of object being filtered.</typeparam>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.AND`1.#ctor">
            <summary>Initializes a new AND.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.AND`1.#ctor(System.Int32)">
            <summary>Initializes a new AND with the specified capacity.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.AND`1.#ctor(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Filter.IFilterCondition{`0}})">
            <summary>Initializes a new AND with the contents of the specified IEnumerable.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.ANDWithTypeConditions">
            <summary>An AND clause that also has type conditions applied to it.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.Condition">
            <summary>A filter condition on a difference's name or schema.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.Condition.#ctor(System.Boolean,antlr.collections.AST)">
            <summary>Initializes a new Condition from the specified AST node.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.Condition.FilterOn">
            <summary>The difference property being filtered on.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.Condition.FilterType">
            <summary>The filter type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.Condition.FilterExpression">
            <summary>The filter expression.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.Condition.ConvertSQLToNetRegex(System.String)">
            <summary>Converts SQL regex to .NET regex</summary>
            <param name="regex">string representing SQL regex</param>
            <returns>.Net Regex object</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.Condition.Equals(RedGate.SQLCompare.Engine.Filter.Condition)">
            <summary>Indicates if the two conditions are equal.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1">
            <summary>A set of filter conditions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1.#ctor">
            <summary>Initializes a new FilterConditionCollection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1.#ctor(System.Int32)">
            <summary>Initializes a new FilterConditionCollection with the specified capacity.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1.#ctor(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Filter.IFilterCondition{`0}})">
            <summary>
            Initializes a new FilterConditionCollection with the contents of the specified IEnumerable.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.FilterConditionCollection`1.Operator">
            <summary>
            The operator to join filter conditions in the string representation of the collection (eg 'AND' or 'OR')
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.FilterOn">
            <summary>The difference property being filtered on.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterOn.Name">
            <summary>The difference's name is being filtered.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterOn.Schema">
            <summary>The difference's schema is being filtered, if it has one.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.FilterType">
            <summary>The filter condition to apply to filter objects.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterType.EQ">
            <summary>The object property should be equal to the condition value.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterType.NEQ">
            <summary>The object property should be not equals to the condition value.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterType.LIKE">
            <summary>
            The object property should match the LIKE regex specified in the condition value.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Filter.FilterType.NLIKE">
            <summary>
            The object property should not match the LIKE regex specified in the condition value.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.IFilterCondition`1">
            <summary>A filter condition with value equality.</summary>
            <typeparam name="T">The type of object being filtered.</typeparam>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.IFilterCondition`1.ObjectIncluded(`0,`0)">
            <summary>
            Returns true if the difference is included, false if it is filtered out, and null if this filter condition
            does not apply to this object.
            </summary>
            <param name="objectIn1">The object to filter on.</param>
            <param name="objectIn2">TODO:</param>
            <returns>
            True if this object is included, false if it is filtered out, and null if this condition does not apply to
            this object.
            </returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.IFilterValidator">
            <summary>Determines if a difference filter is valid for some particular use.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.IFilterValidator.IsValid(RedGate.SQLCompare.Engine.Filter.DifferenceFilter)">
            <summary>Returns true if the specified filter is valid.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.NOT`1">
            <summary>A NOT filter condition.</summary>
            <typeparam name="T">The type of object being filtered.</typeparam>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.OR`1">
            <summary>A set of filter conditions ORed together.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.OR`1.#ctor">
            <summary>Initializes a new OR.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.OR`1.#ctor(System.Int32)">
            <summary>Initializes a new OR with the specified capacity.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.OR`1.#ctor(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Filter.IFilterCondition{`0}})">
            <summary>Initializes a new OR with the contents of the specified IEnumerable.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.TypeCondition">
            <summary>
            A condition on an object's type. This does not implement IFilterCondition to ensure it is kept separate from
            the others.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter">
            <summary>
            Filters a collection of <see cref="T:RedGate.SQLCompare.Engine.Difference" />s based on various object properties.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter">
            <summary>A filter for a single object type. Can be set as include or exclude.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter.Include">
            <summary>
            True if <see cref="P:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter.Filter" /> specifies inclusion, false if it specifies exclusion.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter.Filter">
            <summary>The filter condition.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypes">
            <summary>A collection of the object types that can be filtered.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.CanBeFiltered(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>True if the specified object type can be filtered.</summary>
            <returns></returns>
        </member>
        <member name="E:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.FilterChanged">
            <summary>Event that occurs when a difference filter is changed.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter" /> class to include all objects and using
            case-insensitive matching.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(RedGate.SQLCompare.Engine.Filter.DifferenceFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter" /> class to use the same filter expression as
            the <paramref name="toCopy" /> filter.
            </summary>
            <param name="toCopy">The filter to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(RedGate.SQLCompare.Engine.Filter.DifferenceFilter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter" /> class to use the same filter expression as
            the <paramref name="toCopy" /> filter and the specified case-sensitivity.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter" /> class using case-insensitive matching.
            </summary>
            <param name="includeAllObjects">If true, all objects are included. If false, all objects are filtered out.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter" /> class.</summary>
            <param name="caseSensitive">True if matching should be done case-sensitively.</param>
            <param name="includeAllObjects">If true, all objects are included. If false, all objects are filtered out.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.#ctor(System.Boolean,System.Collections.Generic.Dictionary{RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilter})">
            <summary>Constructs a new filter to use the specified filter conditions dictionary.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilterStatus">
            <summary>
            The filtering status for a specific object type (see <see cref="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.GetFilterStatus(RedGate.SQLCompare.Engine.ObjectType)" />).
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.GetFilterStatus(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            Returns a value indicating the current filter status of the specified object type.
            </summary>
            <returns>
            An instance of the <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ObjectTypeFilterStatus" /> enum indicating the current filter status.
            </returns>
            <exception cref="T:System.ArgumentException">
            The specified <paramref name="type" /> is not a valid type for filtering, or <paramref name="type" /> is
            <see cref="F:RedGate.SQLCompare.Engine.ObjectType.None" />.
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.GetFilter(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>Gets the filter for the specified object type.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.SetObjectTypeExclude(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>Sets the specified object type to be unconditionally excluded.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.SetObjectTypeInclude(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>Sets the specified object type to be unconditionally included.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.SetObjectTypeFilter(RedGate.SQLCompare.Engine.ObjectType,System.Boolean,System.String)">
            <summary>Sets the specified object type to be filtered.</summary>
            <param name="type">The object type.</param>
            <param name="include">True if this is an inclusion filter, false if it is an exclusion filter.</param>
            <param name="filterExpression">The filter expression.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.SetObjectTypeFilter(RedGate.SQLCompare.Engine.ObjectType,System.Boolean,RedGate.SQLCompare.Engine.Filter.IFilterCondition{RedGate.SQLCompare.Engine.Filter.FilterableObjectId})">
            <summary>Sets the specified object type to be filtered.</summary>
            <param name="type">The object type.</param>
            <param name="include">True if this is an inclusion filter, false if it is an exclusion filter.</param>
            <param name="filterCondition">The filter condition.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.FilterDifferences(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Difference})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of all the differences that match the filter expression.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the differences remaining after filtering.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.DifferenceIncluded(RedGate.SQLCompare.Engine.Difference)">
            <summary>Returns true if the specified difference is included by the filter expression.</summary>
            <returns>True if the difference is included, false if it is excluded.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.DifferenceIncluded(RedGate.SQLCompare.Engine.Filter.FilterableObjectId,RedGate.SQLCompare.Engine.Filter.FilterableObjectId)">
            <summary>Returns true if the specified difference is included by the filter expression.</summary>
            <returns>True if the difference is included, false if it is excluded.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilter.ConstructFilterCondition(System.Boolean,antlr.collections.AST)">
            <summary>
            Constructs an IFilterCondition from the specified binary AST (without type conditions).
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.True`1">
            <summary>A condition that always evaluates to true.</summary>
            <remarks>
            This is used internally when parsing a filter expression, and as a placeholder for unconditional type
            conditions.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilterFactory">
            <summary>
            Class for creating a <see cref="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilter" /> from a global filter expression.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.DifferenceFilterFactory.DNFASTReducer">
            <summary>Performs a DNF reduction on the specified AST.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Filter.DifferenceFilterFactory.CreateFilter(System.Boolean,System.String)">
            <summary>Creates a filter from the specified filter expression.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Filter.UIFilterFormatValidator">
            <summary>
            <see cref="T:RedGate.SQLCompare.Engine.Filter.IFilterValidator" /> for the UI filter format.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.RepositoryLocations">
            <summary>
            Represents the locations for a given database as the result of <see cref="M:RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider.GetMatches(System.String)"/> and <see cref="M:RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider.GetMatches(System.String,System.String)"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.MigrationsV1FolderLocation">
            <summary>
            The deserialized form of a Source Controlled migrations v1 folder. We're not expected to understand the xml
            fragments here; we treat them as tokens that get passed to and from SOC. <seealso cref="T:RedGate.SQLCompare.Engine.Migrations.ScriptsFolderLocation" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.ScriptsFolderLocation">
            <summary>
            The deserialized form of a Source Controlled scripts folder. We're not expected to understand the xml
            fragments here; we treat them as tokens that get passed to and from SOC. <seealso cref="T:RedGate.SQLCompare.Engine.Migrations.MigrationsV1FolderLocation" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.SOCCompareLocationProviderExtensions">
            <summary>
            Provides extension methods for <see cref="T:RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.SOCCompareLocationProviderExtensions.TryGetScriptsFolderLocation(RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider,System.String,RedGate.SQLCompare.Engine.Migrations.ScriptsFolderLocation@)">
            <summary>
            Try and get the scripts folder information for a given XML fragment
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.SOCCompareLocationProviderExtensions.TryGetMigrationsV1FolderLocation(RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider,System.String,RedGate.SQLCompare.Engine.Migrations.MigrationsV1FolderLocation@)">
            <summary>
            Try and get the migrations v1 folder information for a given XML fragment
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider.GetScriptsFolderLocation(System.String)">
            <summary>
            Get the scripts folder information for a given XML fragment
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider.GetMigrationsV1FolderLocation(System.String)">
            <summary>
            Get the migrations v1 folder information for a given XML fragment
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider.GetMatches(System.String)">
            <summary>
            Get the locations that match the specified database name.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider.GetMatches(System.String,System.String)">
            <summary>
            Get the locations that match the specified database name and server name.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedDatabaseNameFormatter.GetName(RedGate.SQLCompare.Engine.IDataSource)">
            <summary>
            Make a nice display name from a datasource (possibly versioned) - used in the deployment script comment header
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.IScript">
            <summary>An abstract representation of a script.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.IScript.GetExecutionBlock">
            <summary>Return an execution block for the script.  This operation may be non-trivial.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.IScript.CopyFrom(RedGate.SQLCompare.Engine.Migrations.IScript)">
            <summary>Copies another script over this one.</summary>
            <param name="sourceScript">The script to copy from.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.IScript.CopyTo(System.String)">
            <summary>Copy this script to a file on disk.</summary>
            <param name="targetPath">The path of the file to copy to.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.IScript.ContentEquals(RedGate.SQLCompare.Engine.Migrations.IScript)">
            <summary>Returns whether the content of one script file is equal to that of another.</summary>
            <param name="other">The other script to compare against.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.MigrationsComparer">
            <summary>A comparer for migrations folders.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsComparer.#ctor(RedGate.SQLCompare.Engine.Migrations.IMigrationsFolder,RedGate.SQLCompare.Engine.Migrations.IMigrationsFolder)">
            <summary>Creates a migrations folder comparer.</summary>
            <param name="sourceFolder">The source migrations folder in the comparison.</param>
            <param name="targetFolder">The target migrations folder in the comparison.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsComparer.Execute">
            <summary>
            Execute the comparison.  Returns the comparison result, or null if cancelled.  Can only be called once.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsComparer.CancelOperation">
            <summary>Cancels the comparison operation.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationsComparer.Status">
            <summary>The StatusEventHandler used to update progress information.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.MigrationsComparisonResult">
            <summary>The result of comparing two migrations folders.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder">
            <summary>An object that represents a migration scripts folder on disk.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.FolderPath">
            <summary>The path of the migration scripts folder on disk.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.AddScript(System.String,System.String,System.String,System.String)">
            <exclude>Used in testing only</exclude>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.AddScript(RedGate.SQLCompare.Engine.Migrations.VersionInfo,RedGate.SQLCompare.Engine.Migrations.VersionInfo,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Migrations.ObjectIdentifier},System.String,System.String)">
            <summary>
            Add a script to a migration scripts folder.  The name of the script will be extrapolated from the provided
            sqlScriptPath.  Names must be unique.
            </summary>
            <param name="fromVersion">The version from which the migration script is used.</param>
            <param name="toVersion">The version to which the migration script is used.</param>
            <param name="objectIdentifiers"></param>
            <param name="sqlScriptPath">
            The path of the sql script file to use.  This file must end in .sql and reside within the migrations folder.
            </param>
            <param name="description"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.RemoveScript(RedGate.SQLCompare.Engine.Migrations.MigrationScript)">
            <summary>
            Remove a migration script from the folder, including all associated files on disk.
            </summary>
            <param name="script">The migration script to remove.  The script must be a member of this folder.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.GetScriptFilePaths(RedGate.SQLCompare.Engine.Migrations.MigrationScript)">
            <summary>
            Returns an array containing the paths of all files on disk, associated to a migration script.
            </summary>
            <param name="script">The migration script for which to return file paths.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.Scripts">
            <summary>A collection of migration scripts.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.GetMigrationScripts(RedGate.SQLCompare.Engine.Migrations.VersionInfo,RedGate.SQLCompare.Engine.Migrations.VersionInfo)">
            <summary>
            Return an enumerable collection of migration scripts where the migration script is entirely between
            fromVersion and toVersion, inclusive. Scripts should be in ascending or descending fromVersion order,
            depending on whether fromVersion &lt; toVersion or toVersion &lt; fromVersion respectively.  If the script
            folder location for fromVersion and toVersion is not equal, then an empty list is returned, as cross-branch
            migrations are currently not supported.  Migration scripts with locations other than found in fromVersion and
            toVersion are not returned, as they are not relevant.
            </summary>
            <param name="fromVersion">The version from which to get migration scripts.</param>
            <param name="toVersion">The version to which to get migration scripts.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.GetMigrationScript(System.String)">
            <summary>
            Returns a migration script matching the specified name, or null if there is no match.
            </summary>
            <param name="name">The name of the migration script to return.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.GetMigrationScript(RedGate.SQLCompare.Engine.Migrations.VersionInfo,RedGate.SQLCompare.Engine.Migrations.VersionInfo)">
            <summary>
            Returns a migration script matching exactly the fromVersion and toVersion, or null if there is no match.
            </summary>
            <param name="fromVersion">The version to match against fromVersion.</param>
            <param name="toVersion">The version to match against toVersion.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsFolder.GetSqlFilePath(System.String)">
            <summary>
            Returns the path of the SQL file within the folder.  The file doesn't need to exist.
            </summary>
            <param name="scriptName">The name of the migration script for which to return the sql file path.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.MigrationScriptComparisonResult">
            <summary>The result of comparing two migration scripts.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.MigrationsLoader">
            <summary>A loader for migrations folders.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsLoader.#ctor(System.String,RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider)">
            <summary>Creates a migrations folder loader.</summary>
            <param name="folderPath">The path of the migration scripts folder on disk.  This folder must exist.</param>
            <param name="locationProvider">The location provider used to get location objects.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsLoader.Execute">
            <summary>
            Execute the load.  Returns the loaded migration scripts folder.  Can only be called once.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsLoader.CancelOperation">
            <summary>Cancels the load operation.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationsLoader.Status">
            <summary>The StatusEventHandler used to update progress information.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlan">
            <summary>
            A versioned synchronization plan to be used as input to <see cref="T:RedGate.SQLCompare.Engine.Migrations.VersionedWork" />.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlan.FromVersion">
            <summary>The version from which the plan should be used.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlan.ToVersion">
            <summary>The version to which the plan should be used.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlan.PlanItems">
            <summary>A read-only collection of plan items.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlan.MigrationScripts">
            <summary>Returns a list of all migration scripts used within the plan.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.UnversionedMigrationsSynchronizer">
            <summary>
            UnversionedMigrationsSynchronizer can synchronize a MigrationsComparisonResult that contains a <b>single</b>
            unversioned migrations script. Any migration scripts that have version will be ignored. Note: This will also
            mutate the SourceFolder
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.VersionedMigrationsSynchronizer">
            <summary>A synchronizer for migrations folders.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedMigrationsSynchronizer.#ctor(RedGate.SQLCompare.Engine.Migrations.MigrationsComparisonResult,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Migrations.MigrationScriptComparisonResult})">
            <summary>Creates a migrations folder synchronizer.</summary>
            <param name="comparisonResult">The migrations folder comparison result.</param>
            <param name="scriptComparisonResultsToSynchronize">
            An enumerable collection of migration script comparison
            results to synchronize.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedMigrationsSynchronizer.Execute">
            <summary>Execute the synchronization.  Can only be called once.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedMigrationsSynchronizer.CancelOperation">
            <summary>Cancels the comparison operation.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedMigrationsSynchronizer.Status">
            <summary>The StatusEventHandler used to update progress information.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.IMigrationScriptProvider.GetMigrationScripts(RedGate.SQLCompare.Engine.Migrations.VersionInfo,RedGate.SQLCompare.Engine.Migrations.VersionInfo)">
            <summary>
            Return an enumerable collection of migration scripts where the migration script is entirely between
            fromVersion and toVersion, inclusive. Scripts should be in ascending or descending fromVersion order,
            depending on whether fromVersion &lt; toVersion or toVersion &lt; fromVersion respectively.
            </summary>
            <param name="fromVersion">The version from which to get migration scripts.</param>
            <param name="toVersion">The version to which to get migration scripts.</param>
            <returns>An enumerable collection of migration scripts.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.IVersionedDatabaseProvider.GetDatabase(System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Return a database for the specified version.  The Database.Version property should be set to the value passed
            in.
            </summary>
            <param name="version">The version to be provided.</param>
            <param name="options">The options to use when registering the database.</param>
            <returns>A database for the specified version.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.MigrationScript">
            <summary>A migration script that exists within a MigrationScriptFolder.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.AddTypes(RedGate.Legacy.Serialization.XMLSerializeFormatter)">
            <summary>
            Adds the used types to the formatter
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Migrations.ObjectIdentifier},RedGate.SQLCompare.Engine.Migrations.IScript,System.String)">
            <exclude>This is just for easy testing.</exclude>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.#ctor(System.String,System.String,System.String)">
            <exclude>This also is just for easy testing</exclude>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.ContentEquals(RedGate.SQLCompare.Engine.Migrations.MigrationScript)">
            <summary>
            Returns whether the content of one migration script is equal to that of another, including name, versions,
            object identifiers and sql script.
            </summary>
            <param name="other">The other migration script to compare with.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.StartsAndEndsInOneOf(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Migrations.ScriptsFolderLocation})">
            <summary>
            Test a migration script to check whether it either starts and ends in one of several script folder locations.
            </summary>
            <param name="socCompareLocations">A collection of script folder locations</param>
            <returns>
            true iff the migration script starts and ends in one of the script folder locations contained in
            <paramref name="socCompareLocations" />
            </returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationScript.Name">
            <summary>The name of the migration script.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationScript.VersionDefined">
            <summary>
            Returns
            <value>false</value>
            if it's an unversioned migration script, e.g. in SOC before it's committed for the first time.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationScript.FromVersion">
            <summary>The version from which the migration script is used.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationScript.ToVersion">
            <summary>The version to which the migration script is used.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.MigrationScript.ObjectIdentifiers">
            <summary>
            A readonly collection of object identifiers, representing all objects involved in the migration script.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.GetExecutionBlock">
            <summary>Returns the associated execution block.  This operation may be non-trivial.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.CopySqlTo(RedGate.SQLCompare.Engine.Migrations.MigrationScript)">
            <summary>Copies the sql to another migration script.</summary>
            <param name="targetScript">The target migration script to copy to.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.CopySqlTo(System.String)">
            <summary>Copies the sql to a file.</summary>
            <param name="targetPath">The path to copy to.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationScript.AddTypes(RedGate.Legacy.Serialization.ISerializeFormatter)">
            <summary>
            Adds the used types to the formatter
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.MigrationsHelper.GetExtendedPropertiesExecutionBlock(System.String,RedGate.SQLCompare.Engine.Migrations.ScriptsFolderLocation,RedGate.SQLCompare.Engine.Migrations.MigrationsV1FolderLocation)">
            <summary>
            Creates an execution block containing just the extended properties for Migrations V1
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.StringScript">
            <summary>Represents a SQL script created from a string</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlanItem">
            <summary>An item within a versioned synchronization plan.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlanItem.#ctor(RedGate.SQLCompare.Engine.Migrations.VersionInfo,RedGate.SQLCompare.Engine.Migrations.VersionInfo,RedGate.SQLCompare.Engine.Migrations.MigrationScript)">
            <summary>Returns a new VersionedSynchronizationPlanItem instance.</summary>
            <param name="fromVersion">
            The from version of this plan item.  This can be null, to represent using the target database.
            </param>
            <param name="toVersion">
            >The to version of this plan item. This can be null, to represent using the source database.
            </param>
            <param name="script">
            The migration script to use as part of this plan item.  This can be null, if a regular compare and script is
            to be performed.
            </param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlanItem.FromVersion">
            <summary>
            The version from which this plan item corresponds.  A null value represents the target database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlanItem.ToVersion">
            <summary>The version to which this plan item corresponds.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlanItem.Script">
            <summary>
            The migration script to use as part of this plan item.  This can be null, if a regular compare and script is
            to be performed.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlanner.GetPlan(System.String,System.String,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Migrations.MigrationScript},System.Boolean)">
            <exclude>Note: This is for test purposes only.  Consider moving into test code.</exclude>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationPlanner.GetPlan(RedGate.SQLCompare.Engine.Migrations.VersionInfo,RedGate.SQLCompare.Engine.Migrations.VersionInfo,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Migrations.MigrationScript},System.Boolean)">
            <summary>
            Returns the optimal versioned synchronization plan, for the specified set of migration scripts and versions.
            </summary>
            <param name="fromVersion">The version from which to generate a synchronization plan.  Can be null.</param>
            <param name="toVersion">The version to which to generate a synchronization plan.</param>
            <param name="migScripts">
            An enumerable collection of migration scripts between from and to versions. If fromVersion is null, then
            provide all migration scripts from revision 0.
            </param>
            <param name="toLiveDb"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScript.ExecutionBlock">
            <summary>Returns the execution block resulting from scripting.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScript.Messages">
            <summary>Returns the actions resulting from scripting.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScript.Warnings">
            <summary>Returns the warnings resulting from scripting.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScript.CanRollBackOnFailure">
            <summary>
            Returns whether the synchronization script can be be completely rolled back on failure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScript.Dependencies">
            <summary>Returns the dependencies resulting from scripting.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScript.ImplicitSelections">
            <summary>Returns the implicitly selected objects resulting from scripting.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScript.StaticDataInsertPosition">
            <summary>
            Returns the position in <see cref="P:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScript.ExecutionBlock" /> that static data statements can be inserted
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScripter.Execute">
            <summary>Execute the scripting process.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionedSynchronizationScripter.GenerateExtendedProperties(RedGate.SQLCompare.Engine.ExecutionBlock,System.String,RedGate.SQLCompare.Engine.Migrations.ScriptsFolderLocation,RedGate.SQLCompare.Engine.Migrations.MigrationsV1FolderLocation)">
            <summary>
            Adds Migrations V1 extended properties to the given execution block
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Migrations.VersionedWork.StaticDataInsertPosition">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Migrations.VersionInfo.FromVersionString(System.String,RedGate.SQLCompare.Engine.Migrations.ScriptsFolderLocation)">
            <summary>
            If version is <c>null</c> then returns <c>null</c>, otherwise returns a <see cref="T:RedGate.SQLCompare.Engine.Migrations.VersionInfo"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDatabaseObjects`1">
            <summary>A collection of database objects.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IKeyedCollection`1">
            <summary>
            Generic interface used by a lot of CompareEngine for an indexable collection
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IKeyedCollection`1.Count">
            <summary>
            Returns the number of elements stored in the <see cref="T:RedGate.SQLCompare.Engine.IKeyedCollection`1"/>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IKeyedCollection`1.Item(System.Int32)">
            <summary>
            Returns elements by index.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IKeyedCollection`1.Item(System.String)">
            <summary>
            Returns elements by key.
            </summary>
            <returns>The value, or default(<typeparamref name="T"/>) if not found.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IKeyedCollection`1.ContainsKey(System.String)">
            <summary>
            Returns true if this <see cref="T:RedGate.SQLCompare.Engine.IKeyedCollection`1"/> contains an element with key <paramref name="key"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ComparisonContext">
            <summary>
            Property bag of things that can affect a comparison between database objects
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ComparisonContext.Options">
            <summary>
            The options used for the comparison
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ComparisonContext.TableMapping">
            <summary>
            The table mapping information to use (if relevant to the comparison)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ComparisonContext.WithOptions(RedGate.SQLCompare.Engine.Options)">
            <summary>
            Return a different ComparisonContext with customized options
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Meta.ServerName">
            <summary>
            Metadata for <see cref="T:RedGate.SQLCompare.Engine.IMetadata"/>: A name for the server that the database was registered from. (<seealso cref="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Meta.DatabaseName" />)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Meta.DatabaseName">
            <summary>
            Metadata for <see cref="T:RedGate.SQLCompare.Engine.IMetadata"/>: A name for the database, based on where it was registered from. (<seealso cref="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Meta.ServerName" />)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Meta.SqlFeatureUsage">
            <summary>
            Metadata for <see cref="T:RedGate.SQLCompare.Engine.IMetadata"/>: Counts of object types that we don't already have FUR for (eg we count number of tables, but not specific types of tables)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Meta.RegistrationTime">
            <summary>
            Metadata for <see cref="T:RedGate.SQLCompare.Engine.IMetadata"/>: the amount of time taken to register taken to register the relevant object
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.DatabaseFromFolderPopulator.DatabaseFromFolderPopulator">
            <summary>
            Populates a database object from a folder of sql scripts.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.DatabaseObjects.DatabaseFromFolderPopulator.DatabaseFromFolderPopulator.Populate(System.String,System.Threading.CancellationToken)">
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:RedGate.SQLCompare.Engine.SqlCompareException"></exception>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.DatabaseFromFolderPopulator.IDatabaseFromFolderPopulator">
            <summary>
            Interface for an object that populates a Database from a scripts folder
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.DatabaseObjects.DatabaseFromFolderPopulator.IDatabaseFromFolderPopulator.Populate(System.String,System.Threading.CancellationToken)">
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:RedGate.SQLCompare.Engine.SqlCompareException"></exception>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Programmability.Assemblies.NullableBinaryReaderExtensions">
            <summary>
            Extension methods for <see cref="T:RedGate.SQLCompare.Engine.NullableBinaryReader"/>.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Programmability.Assemblies.NullableBinaryReaderExtensions.BackwardsCompatibilityVersionFlag">
            <summary>
            This is here because both <see cref="T:RedGate.SQLCompare.Engine.ClrFile"/> and <see cref="T:RedGate.SQLCompare.Engine.ClrAssembly"/>
            didn't have a version number on them. As we needed to change the serialization,
            we needed to insert a version number. In order to do so, we need to know when
            reading from a stream whether the next item is a string or a version number
            (in order to support backwards compatibility in reading in an old snapshot
            version). This is the value that is used to signify that the next value is
            not a string, but instead a version number.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Programmability.Assemblies.NullableBinaryReaderExtensions.IsNextItemAString(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Determines whether the next item to be read is a string or not.
            </summary>
            <param name="reader">The reader to check the next item of.</param>
            <returns><c>true</c> if the next item is a string, <c>false</c> otherwise.</returns>
            <remarks>
            This is based on the implementation used within the <see cref="T:RedGate.SQLCompare.Engine.NullableBinaryReader"/>
            to serialize strings.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.BlockDmlOperation">
            <summary>
            Type of DML operation prohibited by a block predicate within a security policy object
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.PredicateType">
            <summary>
            Type of security predicate within a security policy object
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPredicate">
            <summary>
            A sub-object on a security policy that restricts read or write operations on
            rows in a table. This restriction is defined within a table-valued function and
            applied to the table that the security predicate is declared on. If it is a
            filter predicate, this restriction affects SELECT, DELETE and UPDATE operations.
            Access to unfiltered rows is not affected. If it is a block predicate, the
            restriction can be applied to INSERT, UPDATE or DELETE operations. The write
            operation to be blocked by a block predicate is stated in its definition.
            This is part of the new Row-Level Security feature introduced in SQL
            Server 2016 CTP2. See https://msdn.microsoft.com/en-us/library/dn765131.aspx
            for more information.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPredicate.#ctor(System.String,System.String,System.String,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.PredicateType,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.BlockDmlOperation)">
            <summary>
            Create a security predicate, the part of a security policy that restricts
            read or write access to data in a table or view.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy">
            <summary>
            A Security Policy defines a number of security predicates that restrict access
            to rows in a table. This is part of the new Row-Level Security feature
            introduced in SQL Server 2016 CTP2. See
            https://msdn.microsoft.com/en-us/library/dn765131.aspx for more information.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.TablesViews.Enums.GeneratedAlwaysType">
            <summary>
            A field can be GENERATED ALWAYS AS ROW START, GENERATED ALWAYS AS ROW END or neither.
            This is part of the temporal tables feature of SQL Server 2016.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.TablesViews.Enums.TemporalType">
            <summary>
            As of SQL Server 2016, a table can be a temporal table, a history table for a temporal table or neither.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.SqlTypeInfo">
            <summary>
            Encapsulates all the data pertaining to a Sql type.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.SqlTypeInfo.#ctor(RedGate.SQLCompare.Engine.Model.SqlTypeInfo)">
            <summary>
            Copy constructor used by <see cref="M:RedGate.SQLCompare.Engine.Field.Clone"></see>/>
            </summary>
            <param name="sqlTypeInfo">The SqlTypeInfo to copy</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.SqlTypeInfo.Equals(RedGate.SQLCompare.Engine.Model.SqlTypeInfo,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Test two <see cref="T:RedGate.SQLCompare.Engine.Model.SqlTypeInfo"/> instances for equality.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.DatabaseObjectCollections.ConstraintsExtensions">
            <exclude/>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.DatabaseObjectCollections.ConstraintsExtensions.WillBeInlined(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.CheckConstraint},RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>An IEnumerable of all the constraints that will be inlined</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.ExtensionMethods.IndexExtensions">
            <summary>
            Extension methods for the <see cref="T:RedGate.SQLCompare.Engine.Index"/> class.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.IndexExtensions.IsPrimaryKeyOrUniqueConstraint(RedGate.SQLCompare.Engine.Index)">
            <summary>
            Returns true iff <paramref name="index"/> is a primary key or a unique constraint.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.IndexExtensions.ShouldBeIgnored(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Returns true iff <paramref name="index"/> should be ignored given the <paramref name="options"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.ConstantExtensions.GetConstantValue(RedGate.SQLCompare.ASTParser.Syntax.Expressions.Constant)">
            <summary>Gets the object value from a Constant</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.ConstantExtensions.HexLiteralToByteArray(RedGate.SQLCompare.ASTParser.Syntax.Expressions.Constant)">
            <summary>Convers strings in 0x... format (may contain \\n) to byte arrays.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.ExtensionMethods.SecurityPredicateExtensions">
            <summary>
            Helper methods for <see cref="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPredicate" />
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.SecurityPredicateExtensions.IsAlteredSecurityPredicate(RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPredicate,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPredicate)">
            <summary>
            Is this source security predicate an altered version of the target
            security predicate? The primary key property of security predicates
            is the table name, hence these need to be the same.
            </summary>
            <param name="sourceObject">Source filter predicate.</param>
            <param name="targetObject">Target filter predicate.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.SecurityPolicyExtensions.AddedSecurityPredicates(RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy)">
            <summary>
            Get the security predicates that the source security policy adds to the
            target security policy.
            </summary>
            <param name="sourceObject">Source security policy.</param>
            <param name="targetObject">Target security policy.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.SecurityPolicyExtensions.DroppedSecurityPredicates(RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy)">
            <summary>
            Get the security predicates that the source security policy drops from the
            target security policy.
            </summary>
            <param name="sourceObject">Source security policy.</param>
            <param name="targetObject">Target security policy.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.SecurityPolicyExtensions.AlteredSecurityPredicates(RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy)">
            <summary>
            Get the security predicates that the source security policy alters in the
            target security policy.
            </summary>
            <param name="sourceObject">Source security policy.</param>
            <param name="targetObject">Target security policy.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.ExtensionMethods.SqlTypeExtensions.GetSqlForType(RedGate.SQLCompare.Engine.SqlType,System.String,RedGate.SQLCompare.Engine.XmlSchemaCollection,System.Boolean,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the SQL for <paramref name="sqlType"/>, including its precision and scale etc.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.Interfaces.IHasLastModifiedDate">
            <summary>
            Represents objects that support having a last modification date.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.Dependencies.DependenciesPostProcessing.SanitizeDatabaseDependencyRelated(RedGate.SQLCompare.Engine.Database,System.Boolean)">
            <summary>
            This goes through the just populated database, and sanitizes it, and adds links if they were missed. This
            step first expands dependencies, and sanitizes the database. Prerequisite:
            SanitizeDatabaseCleanDanglingObjects
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.Dependencies.DependenciesPostProcessing.SanitizeDatabaseCleanDanglingObjects(RedGate.SQLCompare.Engine.Database)">
            <summary>
            This goes through the just populated database, and sanitizes it, and adds links if they were missed.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.Dependencies.DependenciesStacksHelper.XmlSchemaCollectionMagicString">
            <summary>
            this must match the constant used in tsql-ast.g when parsing XML Schema Collections
            (currently line 7760)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.Dependencies.DependenciesStacksHelper.AddDependencyStack(RedGate.SQLCompare.Engine.Database,System.Int32,RedGate.SQLCompare.Engine.ReadFromFolder.IObjectLookup,System.Collections.Generic.Stack{System.String[]})">
            <summary>For internal use only.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsServiceBroker">
            <summary>
            Service Broker is a whole bunch of features built around having message queues inside of SQL Server.
            Introduced in 2005: https://technet.microsoft.com/en-us/library/ms345108(v=sql.90).aspx
            Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsSequences">
            <summary>
            Sequences are objects which hand out a stream of unique values
            Introduced in 2012: https://msdn.microsoft.com/library/ff878058.aspx
            Supported on Azure v12
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsSearchPropertyLists">
            <summary>
            Adds searching of document metadata (ie properties) to fulltext indexes
            Introduced in 2012: https://msdn.microsoft.com/library/ee677637.aspx
            Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsClusteredColumnstoreIndexes">
            <summary>
            Supports <see cref="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsColumnstoreIndexes">columnstore indexes</see> as the clustered index
            Introduced in 2014: https://msdn.microsoft.com/library/dn589807.aspx
            Supported on Azure v12
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsColumnstoreIndexes">
            <summary>
            An index where data is stored column-by-column instead of row-by-row. Makes some operations more
            efficient - eg adding up every value in a particular column
            Introduced in 2012: https://msdn.microsoft.com/library/gg492088.aspx
            Supported on Azure v12
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsMemoryOptimizedFeatures">
            <summary>
            "In-Memory OLTP" (online transaction processing) is a set of features that allow large speedups
            when tables are hosted in RAM
            Introduced in 2014: https://msdn.microsoft.com/library/dn133186.aspx
            Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsChangeTracking">
             <summary>
             Change tracking lets you query which rows have changed recently for tables that it is enabled on 
             Introduced in 2008: https://msdn.microsoft.com/library/bb933875.aspx
             
             Note that this is NOT "change data capture": a related feature which we don't currently support
            
             Supported in Azure v12
             </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsFiletables">
            <summary>
            File tables let you read filesystem files out of a folder on disk as 
            <see cref="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsFilestreamColumns">FILESTREAM</see> data
            Introduced in 2012: https://msdn.microsoft.com/library/ff929144.aspx
            Not supported in Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsLockEscalation">
            <summary>
            Lets users customise the lock escalation policy for a table (whether row locks get escalated to
            table locks in some circumstances)
            Introduced in 2008: https://msdn.microsoft.com/library/ms184286.aspx
            Supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsColumnSetSparse">
            <summary>
            Supports SPARSE and COLUMN_SET columns on tables.
            Introduced in 2008: https://msdn.microsoft.com/library/cc280604.aspx
                            and https://msdn.microsoft.com/library/cc280521.aspx
            Supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsFilestreamColumns">
            <summary>
            Supports storing varbinary(max) data on the filesystem instead of inside tables
            Introduced in 2008: https://msdn.microsoft.com/library/bb933993.aspx
            Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsUserDefinedTableTypes">
            <summary>
            A user-defined table type is a user-defined type for the definition of a table structure.
            Introduced in 2008: https://msdn.microsoft.com/en-us/library/bb522526.aspx
            Supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsSystemDateAndTableTypes">
            <summary>
            Whether the database has date/time/datetime2/datetimeoffset types defined.
            This means that when we see types with those names, we assume they are system-defined 
            rather than user-defined types
            Supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsFulltextStoplists">
            <summary>
            Fulltext stoplists are lists of "stopwords" - words to ignore when doing a search, such as "the"
            Introduced in 2008: https://msdn.microsoft.com/en-US/library/ms142551(v=sql.100).aspx (2005 had noise words instead)
            Supported on Azure v12
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsDataCompression">
            <summary>
            Supports row and page compression for tables and indexes
            Introduced in 2008: https://msdn.microsoft.com/library/cc280449.aspx
            Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsPoisonMessageHandling">
            <summary>
            The POISON_MESSAGE_HANDLING option on CREATE/ALTER QUEUE. This allows 
            <see cref="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsServiceBroker"> Service Broker</see> applications
            to define their own poison message handling when disabled
            Introduced in 2008 **R2**: https://msdn.microsoft.com/library/ms189529.aspx
            Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsCatalogsOnFilegroups">
            <summary>
            In 2000, fulltext catalogs were stored separately to the database
            In 2005, fulltext catalogs were assigned to a particular filegroup which would determine storage
            After 2005, fulltext catalogs became virtual and fulltext filegroups are set per-index
            
            See https://technet.microsoft.com/library/aa214429(v=sql.80).aspx and 
                http://dba.stackexchange.com/q/3244 for more details
            Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsFilteredIndexes">
            <summary>
            Filtered indexes are like normal indexes that act against a subset of the rows
            Introduced in 2008: https://msdn.microsoft.com/library/cc280372.aspx
            Supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsMultipartNamesInSynonyms">
            <summary>
            Supports synonyms that reference another database or
            server. Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsNonSqlUsers">
            <summary>
            "Sql users" are users that log in directly to SQL Server using a username and password, as 
            opposed to Windows Auth users that log in using some external mechanism.
            Azure doesn't support Windows Auth (aka "integrated security")- users need to be created using
            the Azure portal: https://msdn.microsoft.com/library/azure/ff394108.aspx#authentication
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsFilegroups">
            <summary>
            Databases can be stored on multiple files in the filesystem. This means (for example) that the 
            database can be spread across multiple hard drives for increased performance, or some tables can
            be stored on an SSD vs a spinning disk.
            Filegroups are an abstraction over physical files - objects are assigned to filegroups, and then
            filegroups can be assigned files depending on what hardware is currently hosting the database.
            Since Azure hides away all the physical filesystem stuff, it doesn't support filegroups.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsCreateLogin">
            <summary>
            Supports the CREATE LOGIN syntax for creating logins. On Azure you need to create logins using
            the web portal instead. Azure v12 adds a CREATE LOGIN statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsIncrementalStatistics">
            <summary>
            When SQL Server uses an index, it stores "statistics" about the table that improve the generated
            query plans for future queries. "Incremental statistics" is a new feature in 2014 that lets
            statistics be updated over time rather than having to read the entire table in one go.
            See more: https://msdn.microsoft.com/library/ms190397.aspx
            Not supported in Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.RequiresWithAppendToBeRemovedFromTriggers">
            <summary>
            WITH APPEND is a deprecated (finally removed in 2012) trigger option that appends a new trigger 
            to the event rather than replacing any existing triggers. 
            This is now the default behaviour (as of 2000!). Compare still cares because we have code that 
            removes the WITH APPEND clause from trigger text to help with deploying old triggers
            See also https://msdn.microsoft.com/library/aa258254(v=sql.80).aspx
                 and https://msdn.microsoft.com/library/ms144262.aspx
            Not supported in Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsGeographyTesselation">
            <summary>
            Supports some more options on spatial indexes. Spatial indexes are used to efficiently store
            and lookup information like points on a plane or points on a sphere (so an example query might be
            "find the nearest pub to my location" on Google Maps or similar)
            New options (manual tessellation) were introduced in 2012: 
              https://msdn.microsoft.com/library/bb934196.aspx
            Supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsArbitraryIndexesOnUserDefinedTableTypes">
            <summary>
            Prior to 2014, user-defined table types could only have "schema" indexes on them (unique and 
            primary constraints). In 2014, you can now specify additional "performance" indexes as well (all
            other types of indexes)
            Probably not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsSelectiveXmlIndexes">
            <summary>
            Selective XML indexes apply to a defined subset of the xml document, instead of all the elements.
            This means potentially much better index speeds for the bits you actually care about.
            Introduced in 2012 SP1: https://msdn.microsoft.com/library/jj670108.aspx
            Supported on Azure v12
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsUseDatabaseStatement">
            <summary>
            USE [database] lets you switch which database a connection is pointing at
            Not supported on Azure
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsRowLevelSecurity">
            <summary>
            Supports row-level security, a feature introduced in 2016, that can restrict access to a subset of 
            the rows in a table. See https://msdn.microsoft.com/en-us/library/dn765131.aspx for more details.
            Supported on Azure V12.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsDynamicDataMasking">
            <summary>
            Supports dynamic data masking, a feature introduced in 2016, that masks sensitive data to 
            non-privileged users. See https://msdn.microsoft.com/en-gb/library/mt130841.aspx for more details.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsStretchDatabase">
            <summary>
            Supports stretch database, a feature introduced in 2016 that archives old data in a table to
            an Azure instance.
            Not supported on Azure, for obvious reasons.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker.SupportsTemporalTables">
            <summary>
            Supports temporal tables, a feature introduced in 2016 that adds built-in support for providing
            information about data stored in a table at any point in time rather than only the data at the
            current moment.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.ShuSqlVersionUtils">
            <summary>
            Methods to convert SHU <see cref="T:RedGate.Shared.SQL.Server.SQLVersion"/> objects to more granular bits of SQL Server version information
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.ShuSqlVersionUtils.GetCompatibilityLevelFromShuSqlVersion(RedGate.Shared.SQL.Server.SQLVersion)">
            <summary>
            Gets the equliavent Sql Server comapatibility level for a given SHU <see cref="T:RedGate.Shared.SQL.Server.SQLVersion"/>
            (https://msdn.microsoft.com/en-us/library/bb510680.aspx)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.SqlVersion.IsDataWarehouse">
            <summary>
            note: this is currently exclusive with IsAzure, although this being true probably indicates Azure Data
            Warehouse instead of the on-prem PDW version
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.SqlVersion.GetShuSqlVersion">
            <summary>
            This method returns a Shared Utils SQLVersion for e.g. comparing with other such SQLVersions
            </summary>
            <remarks>
            This always uses the server version and does not take the database's compatibility level into account
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.WellKnownSqlVersions.SqlServer2017">
            <summary>The version Microsoft calls SQL Server vNext</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.WellKnownSqlVersions.Earliest">
            <summary>
            The oldest SQL Server version supported by Compare
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.WellKnownSqlVersions.Latest">
            <summary>
            The newest SQL Server version supported by Compare
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.WellKnownSqlVersions.Unknown">
            <summary>
            This replicates what version information you would have got if no information had been provided
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.WellKnownSqlVersions.CreateFromBackup(RedGate.BackupReaderInterfaces.IBackupConnection)">
            <summary>
            Gets the version of the SQL Server from a BackupReader connection
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.Messaging.WarningId.NoTransactionsAndNoBackups">
            <summary>
            This deployment will run without transactions. This could leave your database in an inconsistent state if it fails.  We recommend backing up the database as part of the deployment, or enabling transactions.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.Messaging.WarningId.SelectiveXmlIndexesNotSupported">
            <summary>
            The selective XML index {0} on {1} is not supported in the target database version.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.Messaging.WarningId.ObjectsMayDependOnFullTextIndex">
            <summary>
            Full-text indexes can't be deployed in transactions, so SQL Compare will deploy changes to full-text indexes after transactions are complete. If other objects rely on changes to full-text indexes (using CONTAINS, FULLTEXT, CONTAINSTABLE or FREETEXTTABLE), the script may fail.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.Messaging.WarningId.IncludedColumnsOnIndexesNotSupported">
            <summary>
            The Included columns for index {0} will be ignored. The Included column option is not supported in the target database version.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.Messaging.WarningId.DynamicDataMaskingNotSupported">
            <summary>
            The masking function for column {0} will be ignored. The dynamic data masking option is not supported in the target database version.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.Messaging.WarningId.TargetUnsupportedTemporalTables">
            <summary>
            Temporal tables are not supported in the target database version. {0} can be deployed but will not be a temporal table in the target database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.XmlIndexes.XmlIndex.XmlPrimaryIndex">
            <summary>The primary XML index, if this index is a secondary XML index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Model.XmlIndexes.XmlIndex.XmlPrimarySelectivePath">
            <summary>The xml path used if this is a secondary selective XML index</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.XmlIndexes.XmlIndex.#ctor(RedGate.SQLCompare.Engine.Table,System.String,System.Boolean,System.Boolean,RedGate.SQLCompare.Engine.Model.XmlIndexes.XmlIndexType,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Model.XmlIndexes.Selective.ISelectiveXmlIndexPath},System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Model.XmlIndexes.Selective.SelectiveXmlIndexNamespace})">
            <summary>
            Create an xml index by specifying its properties directly
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.XmlIndexes.XmlIndex.#ctor(RedGate.SQLCompare.Engine.Index.OldDeserializationInfo)">
            <summary>
            Create an xml index from old-style snapshot serialization info
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.XmlIndexes.XmlIndex.#ctor(RedGate.SQLCompare.Engine.NullableBinaryReader,System.Single)">
            <summary>
            Create an xml index from newer-style snapshot serialization info
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Model.XmlIndexes.SecondaryType">
            <summary>The secondary type of the XML index</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.XmlIndexes.SecondaryType.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.XmlIndexes.SecondaryType.Value">
            <summary>Value.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.XmlIndexes.SecondaryType.Path">
            <summary>Path.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Model.XmlIndexes.SecondaryType.Property">
            <summary>Property.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.FilestreamUtils.BestFilestreamUniqueIndex(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ComparisonContext,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Finds the best filestream unique index to use in deployment for a table, optionally given another table in
            the source. This exists because there can be multiple indexes which meet SQL Server's criteria for a
            filestream unique index (on the NOT NULL ROWGUIDCOL field and a unique constraint or primary key) and the
            only requirement is that at least one is present at any time. Therefore if there is a candidate filestream
            unique index which exists in the target and is unchanged in the source, this is the preferred filestream
            unique index for Compare, as we can then avoid triggering rebuilds due to changes affecting other candidate
            filestream unique indexes (SC-5219). The index returned, if any, will be from the subject/target table. If
            there is no source table provided, or there is no matching index, the first candidate index is returned, if
            any.
            </summary>
            <param name="table">
            The subject table; this should be the table in the target if a source table is also provided
            </param>
            <param name="options">The options to use to compare the indexes</param>
            <param name="context"></param>
            <param name="sourceTable">Optionally, the table in the source</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.FilestreamUtils.GetFilestreamUniqueIndexInSource(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Given source and target tables, finds the best filestream unique index in the source table. If there is a
            filestream unique index in the target table, this will attempt to find the corresponding index in the source
            to the best filestream unique index in the target. Otherwise the first filestream unique index in the source
            table will be returned, if one exists.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.FilestreamUtils.IsNonNullRowGuidColField(RedGate.SQLCompare.Engine.IField)">
            <summary>
            Determines whether a field matches the criteria for a filestream ROWGUIDCOL field
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.FilestreamUtils.WithoutFilestreamIndexes(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Index},RedGate.SQLCompare.Engine.PlannedChanges,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Returns an enumeration of indexes from a source database without filestream unique indexes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Model.FilestreamUtils.IsFilestreamColumnDependency(RedGate.SQLCompare.Engine.IObjectSqlPair)">
            <summary>
            Is the given constraint a unique constraint on a ROWGUIDCOL column in a 
            table with a FILESTREAM column? If so, that FILESTREAM column depends
            on the constraint. In that case, we don't drop the constraint.
            We simply don't need to. If the constraint alone was being dropped, the
            source must be in an invalid state, so that case is impossible. If the 
            constraint was being dropped with the FILESTREAM column, the table
            gets rebuilt. This results in the desired target state. There is no
            need to drop this type of constraint. In fact, this applies to many
            kinds of constraints when dropping a table in Compare, but for now 
            we'll keep dropping them before dropping tables, just in case that 
            prevents some dependency bugs.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ModelFactory.Functions.SystemFunctionProvider2017">
            <summary>
            Contains details of all system named functions in sql server vNext
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.Functions.SystemFunctionProvider2017.IsSystemFunction(System.String)">
            <summary>
            Indicates if a function name is system defined
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ModelFactory.Functions.SystemFunctionProvider2016">
            <summary>
            Contains details of all system named functions in sql server 2016
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.Functions.SystemFunctionProvider2016.IsSystemFunction(System.String)">
            <summary>
            Indicates if a function name is system defined
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory">
            <summary></summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.ForLive(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider,RedGate.SQLCompare.Engine.IDmvModelFactory)">
            <summary>
            Create a DatabaseFactory for connecting to a live database 
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.ForBackup(System.String,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Migrations.ISOCCompareLocationProvider,RedGate.SQLCompare.Engine.IDmvModelFactory)">
            <summary>
            Create a DatabaseFactory for connecting to a backup
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.Populate(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            This method populates the entire database based on the information in a live database.
            </summary>
            <param name="popOptions">Population Options</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateObjectOwners">
            <summary>This method populates only the objectOwners. This is for the refactoring tool!</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.LightWeightPopulate(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            This method populates part of the database based on the information in a live database. Mainly used for sql
            data compare. Note that dependencies are set, but their transitive closure is not calculated.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateCounterInformation">
            <summary>
            Populates counter information for progress tracking Prerequisites: Version Modifies:
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateCaseInformation(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>Populates the case sensitivity. It is primarily used in SQL Refactorer!</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.RetrieveCaseInformation(System.Data.SqlClient.SqlConnection)">
            <summary>
            Retrieves case sensitivity information the case sensitivity. It is primarily used in SQL Refactorer!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateVersionInformation">
            <summary>
            Populates the version information. This is among the very first steps that need to be performed, as the
            version information that it retrieves is used to determine the scripts that are used subsequently. This
            method sets the m_MajorVersion and m_Database.Guid variables.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateFullTextCatalogs">
            <summary>
            Populates the full text catalogs. Prerequisites: Version information. Modifies: FullTextCatalogs
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateObjectNames">
            <summary>
            Populates local m_ObjectNames and m_ObjectIDs collections. Prerequisites: version information.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateAssemblies">
            <summary>Populates the assemblies. Prerequisite: Version Modifies: Assemblies</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateAssemblyDependencies">
            <summary>
            Populates the assembly dependencies. Prerequisite: Version, Assmeblies Modifies: Database assembly dependency
            collection
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulatePartitions">
            <summary>
            Populates Partition functions, Prerequisites: Version Modifies: PartitionFunctions,
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateTables(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            Populates the tables in the database. It does not retrieve field information, just the name of the tables,
            and some of their properties. Prerequisites: The database must have the FullTextCatalogs and the
            PartitionsSchemes populated. Also, version information must be known! Modifies: Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateFileTableSystemDefinedObjects">
            <summary>
            Populate <see cref="P:RedGate.SQLCompare.Engine.FileTable.SystemDefinedObjectIDs" />
            Prerequisite: Filetables (Tables)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateObjectText(RedGate.SQLCompare.Engine.DBPopulationOptions,System.Boolean)">
            <summary>
            Populates Comments. Prerequsite: m_ObjectIds, m_ObjectNames, functions, XML Schema Collections! Modifies:
            Comments.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateDefaults">
            <summary>Populates defaults Prerequisites: version, Modifies: Defaults</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateRules">
            <summary>Populates Rules Prerequisites: Version Modifies: Rules</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateUDTs">
            <summary>
            Populates user defined types Prerequisites: version, Assemblies, Defaults, Rules Modifies: UserDefinedTypes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateTableUDTs">
            <summary>
            Populates user defined table types Prerequisites: version, Assemblies, Defaults, Rules, UserDefinedTypes
            Modifies: UserDefinedTypes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateXmlSchemaCollections">
            <summary>
            Populates XML schemata Prerequisites: version Modifies: XMLSchemaData, XmlSchemaCollections
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateXmlSchemaCollectionDependencies">
            <summary>
            Populates XML schemata dependencies (e.g. for stored procedures) Prerequisites: version, xml schema
            collections, Modifies: XMLSchemaData, XmlSchemaCollections
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateFunctions">
            <summary>
            Populates functions Prerequisites: version, Assemblies, Users Modifies: Functions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateTableColumns">
            <summary>
            Populates columns for tables and functions! Prerequisites: Tables, Defaults, Rules, XMLCollections, Comments,
            object text! Modifies: DependencyStack
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateViews">
            <summary>Populates Views Prerequisites: version, Modifies: Views</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateViewColumns(System.Boolean)">
            <summary>
            Populates view columns. This is a much simpler thing than for tables, since the view script is available,
            thus udts, ... are not looked up :) Prerequisites: Version, Views Modifies: Views At the moment this is used
            only in SQL Prompt
            </summary>
            <param name="includeAllDetails">
            Indicates whether all details should be included like datatypes, etc. This is used for prompt and datacompare
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateStoredProcedures">
            <summary>
            Populates stored procedures Prerequisites: Assemblies, Users Modifies: StoredProcedures
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateSearchPropertyLists">
            <summary>Populates search property lists</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateIndexes">
            <summary>
            Populates index information. Prerequisites: Version, Tables, Views, SearchPropertyLists Modifies: Indexes
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateSqlServerPost2kStatistics">
            <summary>
            Populates statistics information. Prerequisites: Version, Tables, Views Modifies: Indexes Note that this used
            only for SqlServer2005/8 servers (includind 2k compatibility modes), for 2k servers this is populated with
            indexes.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateForeignKeys">
            <summary>
            Populates foreign keys Prerequisites: Version, Tables, Modifies: ForeignKeys, Dependencies
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateConstraints">
            <summary>
            Populates Constraints Prerequisites: Tables Modifies: Constraints, DependencyStack, Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateTriggers">
            <summary>
            Populates Triggers Prerequisites: Version, Tables, Views, Assemblies, Users Modifies: Triggers, Dependencies,
            Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateDdlTriggers">
            <summary>
            Populates ddl triggers Prerequisites: Version, Assemblies, Users Modifies: DdlTriggers
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateUdtDependencies">
            <summary>
            Populates udt dependencies Prerequisites: Version, UserDefinedTypes, Tables, StoredProcedures, Functions
            Modifies: Tables, StoredProcedures, Functions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateUsers">
            <summary>Populates Users Prerequisites: Version Modifies: Users</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateRoles">
            <summary>Populates roles Prerequisites: Version, Modifies: Roles</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateRoleMembership">
            <summary>Populates role membership Prerequisites: Roles, Users Modifies: Roles</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateExtendedProperties">
            <summary>
            Populates extended properties Prerequisites: UserDefinedTypes, Users, Tables, Views, Defaults, Rules,
            StoredProcedures, Functions, and most of the SqlServer2005 objects!!! Modifies: ExtendedProperties, Tables,
            Views, Defaults, Rules, StoredProcedures, Functions Note: This does not make sense on pre SS2K, for those we
            ignore this.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulatePermissions">
            <summary>
            Populates permissions Prerequisites: Tables, Views, Functions, StoredProcedures, Assemblies, Types,
            XMLSchemaCollections, MessageTypes, ServiceContracts, Services, RemoteServiceBindings, Routes, ... Modifies:
            Tables, Views, Functions, StoredProcedures, ...
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulatePermissionsPostSqlServer2005">
            <summary>
            Populates permissions Prerequisites: Tables, Views, Functions, StoredProcedures Modifies: Tables, Views,
            Functions, StoredProcedures
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateSchemas">
            <summary>Populates schemas Prerequisites: version Modifies: Schemas</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateAssemblyFiles">
            <summary>Populates assembly files Prerequisites: Assemblies Modifies: AssemblyData</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateSynonyms">
            <summary>Populates synonyms Prerequisites: Version, Users Modifies: Synonyms</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateMessageTypes">
            <summary>
            Populates message types Prerequisites: Version, XmlSchemaCollections Modifies:
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateContracts">
            <summary>Populates contracts Prerequisites: Version Modifies: Contracts</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateContractMessages">
            <summary>
            Populates contract messages Prerequisites: Version, Contracts Modifies: Contracts
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateQueues">
            <summary>Populates queues Prerequisites: Version Modifies:</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateCertificates">
            <summary>Populates Certificates Prerequisites: Version Modifies: Certificates</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateSymmetricKeys">
            <summary>Populates Symmetric Keys Prerequisites: Version Modifies: SymmetricKeys</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateAsymmetricKeys">
            <summary>Populates Asymmetric Keys Prerequisites: Version Modifies: AsymmetricKeys</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateServices">
            <summary>Populates services Prerequisites: Version, Queues Modifies: Services</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateServiceBindings">
            <summary>
            Populates remote service bindings Prerequisites: Version, Services Modifies: ServiceBindings
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateServiceContracts">
            <summary>
            Populates service contracts Prerequisites: Version, Services, Contracts Modifies: Contracts
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateRoutes">
            <summary>Populates routes Prerequisites: Version Modifies: Routes</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateParameters">
            <summary>
            Populates parameters Prerequisites: Version, StoredProcedures, Functions, XmlSchemaCollections Modifies:
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateEventNotifications">
            <summary>
            Populates event notifications Prerequisites: Version, EventNotifications, Tables, Views, Functions, ...
            Modifies:
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.PopulateDatabaseSettings">
            <summary>
            Populates some database settings (now only checks if fulltext is enabled). Prerequisites: Version Modifies:
            The database's fullTextEnabled flag, database encryption.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.RegisterFromLive(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory,System.Boolean)">
            <summary>
            Register a live database, allowing customization
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.RegisterFromBackup(RedGate.SQLCompare.Engine.Database,System.String,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory,System.Boolean)">
            <summary>
            Register a backup, allowing customization
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.RegisterFromBackupForDataCompare(RedGate.SQLCompare.Engine.Database,System.String,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory)">
            <summary>
            Register SDC-relevant bits of a backup schema
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory.RegisterFromLiveForDataCompare(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory)">
            <summary>
            Register SDC-relevant bits of a live database schema
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.IDatabaseFactory.Populate(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            This method populates the entire database based on the information in a live database.
            </summary>
            <param name="popOptions">Population Options</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.IDatabaseFactory.PopulateObjectOwners">
            <summary>This method populates only the objectOwners. This is for the refactoring tool!</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.IDatabaseFactory.LightWeightPopulate(RedGate.SQLCompare.Engine.DBPopulationOptions)">
            <summary>
            This method populates part of the database based on the information in a live database. Mainly used for sql
            data compare. Note that dependencies are set, but their transitive closure is not calculated.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ModelFactory.IDatabaseFactory.PopulateCaseInformationExternal(RedGate.SQLCompare.Engine.LiveConnectionInstructions)">
            <summary>Mutate the database to set the case sensitivity properties</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.DatabaseLevelPermissionsFromSnapshot">
            <summary>
            Helper methods for snapshot serialization of database-level permissions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.DatabaseLevelPermissionsFromSnapshot.DatabaseLevelPermissionsFromOldSnapshotBytes(System.Byte[])">
            <summary>
            Read database-level permissions from the old (pre-12.4) format
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.PermissionFromSnapshot">
            <summary>
            Helper methods for snapshot serialization of permissions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.PermissionFromSnapshot.FromOldPermissionLevelEnum(System.Int32)">
            <summary>
            Read permission levels from the old (pre 12.4) format
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldFromSnapshot">
            <summary>
            Handles reading a <see cref="T:RedGate.SQLCompare.Engine.Field"/> out of a snapshot file
            </summary>
            <remarks>
            Both this class and <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldToSnapshot"/> know about <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldFromSnapshot.FieldSerializationFlags"/>
            which used to be internal to Field and ended up getting baked into the current snapshot format.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Read a <see cref="T:RedGate.SQLCompare.Engine.Field"/> out of <paramref name="reader"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldsFromSnapshot">
            <summary>
            Handles reading a <see cref="T:RedGate.SQLCompare.Engine.Fields"/> collection out of a snapshot file
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldsFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Read a <see cref="T:RedGate.SQLCompare.Engine.Fields"/> collection out of <paramref name="reader"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldsToSnapshot">
            <summary>
            Handles writing a <see cref="T:RedGate.SQLCompare.Engine.Fields"/> collection to a snapshot file
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldsToSnapshot.Serialize(RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Write details for <paramref name="fields"/> into <paramref name="writer"/>. 
            See also <seealso cref="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldsFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldToSnapshot">
            <summary>
            Handles writing a <see cref="T:RedGate.SQLCompare.Engine.Field"/> to a snapshot file
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldToSnapshot.Serialize(RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Write details for <paramref name="field"/> into <paramref name="writer"/>. 
            See also <seealso cref="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FieldFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)"/>
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.DatabaseFromSnapshot.c_SnapshotVersion">
            <summary>
            The version of the currently-supported snapshot format
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.DatabaseFromSnapshot.GetConnectionPropertiesFromFile(System.String)">
            <summary>Reads database/server name from a snapshot without registering all of it.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.DatabaseFromSnapshot.SaveToStream(RedGate.SQLCompare.Engine.Database,System.IO.Stream,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Write a snapshot to a stream
            </summary>
            <param name="database">The database to take a snapshot of</param>
            <param name="stream">The stream to write to</param>
            <param name="outputStatus">Whether to write status events to the database progress handler</param>
            <param name="mappingsClone">Set to true when the snapshot is being serialised to use
            for creating a clone of the database during mapping operations. This stops some things being serialised
            that aren't actually needed for mappings, I assume for performance reasons.</param>
            <param name="snapshotVersion">Defaults to the const <see cref="F:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.DatabaseFromSnapshot.c_SnapshotVersion"/>, but can be overridden
            for testing purposes.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.DatabaseAndServerName">
            <summary>
            Just a pair of strings
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FileTableFromSnapshot">
            <summary>
            Class for deserializing a <see cref="T:RedGate.SQLCompare.Engine.FileTable"/> from a snapshot
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FileTableFromSnapshot.FTFromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Read all the standard <seealso cref="T:RedGate.SQLCompare.Engine.Table"/> properties, and then add filetable-specific stuff.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FileTableToSnapshot">
            <summary>
            <seealso cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FileTableFromSnapshot"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.FileTableToSnapshot.Serialize(RedGate.SQLCompare.Engine.FileTable,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            <seealso cref="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.UnsupportedSnapshotException">
            <summary>An exception thrown when a snapshot is unsupported.</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceFromSnapshot">
            <summary>
            A utility class to help with deserializing <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> instances from snapshots.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceFromSnapshot.Deserialize(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Deserializes A <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> from the supplied reader.
            </summary>
            <param name="reader">The reader to read the script source from.</param>
            <returns>A <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> instance, or <c>null</c> if a <c>null</c> script source was originally serialized.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceFromSnapshot.DeserializeScriptSources(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Deserializes a sequence of <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> instances from the supplied reader.
            </summary>
            <param name="reader">The reader to read the script sources from.</param>
            <returns>A sequence of script source instances that are contained in the reader.</returns>
            <remarks>
            The returned sequence can contain <c>null</c> instances.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceFromSnapshot.DeserializeDictionary(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Deserializes a dictionary from <see cref="T:System.String"/> to <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/>.
            </summary>
            <param name="reader">The reader to read the script sources from.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceToSnapshot">
            <summary>
            A utility class to help with serializing <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> instances to snapshots.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceToSnapshot.NullScriptSourceToken">
            <summary>
            An identifier used when a <c>null</c> <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> is written to a snapshot.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceToSnapshot.NonNullScriptSourceToken">
            <summary>
            An identifier used when a non-<c>null</c> <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> is written to a snapshot.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceToSnapshot.SerializeScriptSourceDictionary(RedGate.SQLCompare.Engine.NullableBinaryWriter,System.Collections.Generic.Dictionary{System.String,RedGate.SQLCompare.Engine.ScriptSource})">
            <summary>
            Serializes a dictionary of <see cref="T:System.String"/> to <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> to the supplied writer.
            </summary>
            <param name="writer">The writer to serialize the script sources to.</param>
            <param name="dictionary">The script sources to serialize.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceToSnapshot.SerializeScriptSources(RedGate.SQLCompare.Engine.NullableBinaryWriter,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ScriptSource})">
            <summary>
            Serializes a sequence of <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> instances to the supplied writer.
            </summary>
            <param name="writer">The writer to serialize the script sources to.</param>
            <param name="scriptSources">The script sources to serialize.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceToSnapshot.SerializeScriptSource(RedGate.SQLCompare.Engine.NullableBinaryWriter,RedGate.SQLCompare.Engine.ScriptSource)">
            <summary>
            Serializes the supplied <see cref="T:RedGate.SQLCompare.Engine.ScriptSource"/> to the specified writer, handling <c>null</c> instances correctly.
            </summary>
            <param name="writer">The writer to serialize the script source to.</param>
            <param name="scriptSource">The script source to serialize.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.ScriptSourceToSnapshot.Serialize(RedGate.SQLCompare.Engine.NullableBinaryWriter,RedGate.SQLCompare.Engine.ScriptSource)">
            <summary>
            Serializes the current instance to the supplied writer.
            </summary>
            <param name="writer">The writer to write the script source to.</param>
            <param name="scriptSource">The script source to serialize.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPoliciesFromSnapshot">
            <summary>
            Handles reading a collection of security policies out of a snapshot file
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPoliciesFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Read a collection of security policies out of <paramref name="reader"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPolicyCollectionExtensions">
            <summary>
            Handles writing collection of security policies to a snapshot file
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPolicyCollectionExtensions.Serialize(RedGate.SQLCompare.Engine.DatabaseObjectCollection{RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy},RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Write details for <paramref name="securityPolicies"/> into <paramref name="writer"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPolicyFromSnapshot">
            <summary>
            Handles reading a <see cref="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy"/> out of a snapshot file
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPolicyFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Read a <see cref="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy"/> out of <paramref name="reader"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPolicyFromSnapshot.PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Patch up the <paramref name="securityPolicy"/> object after serialization.
            </summary>
            <param name="securityPolicy">The <see cref="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy"/> to be patched up</param>
            <param name="database">The <see cref="T:RedGate.SQLCompare.Engine.Database"/> used for patching the <paramref name="securityPolicy"/></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPolicyToSnapshot">
            Handles writing a <see cref="T:RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy"/> to a snapshot file
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.SecurityPolicyToSnapshot.Serialize(RedGate.SQLCompare.Engine.Model.DatabaseObjects.Security.SecurityPolicies.SecurityPolicy,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Write details for <paramref name="securityPolicy"/> into <paramref name="writer"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot">
            <summary>
            Class for deserializing a table from a snapshot. Note that this is inteded to be a one-shot object - due to
            all the PatchUp logic required by deserialization you'll need to call the methods on this object in the right
            order.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.Table">
            <summary>
            The table (or filetable) deserialized from this instance
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Read a <see cref="F:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.Table"/> from <paramref name="reader"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.FromSnapshot``1(RedGate.SQLCompare.Engine.NullableBinaryReader,System.Func{System.String,System.String,System.Int32,System.Boolean,``0})">
            <summary>
            Read a <see cref="F:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.Table" /> or <see cref="F:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.Table" /> subclass from <paramref name="reader" />. Allows
            injection of the constructor function so that <see cref="T:RedGate.SQLCompare.Engine.FileTable" />s can also be created.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.SetPartitionSchemeFromName(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Table,System.String)">
            <summary>
            Try to retrieve the partition scheme named <paramref name="partitionSchemeName" /> from
            <paramref name="database" /> and attach it to <paramref name="table" /> or throw.
            </summary>
            <remarks>
            There seems to be a bug (SC-5730) where we don't always have the relevant partition scheme registered -
            possibly due to incomplete scripts folders?
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TablesFromSnapshot">
            <summary>
            Handles reading a <see cref="T:RedGate.SQLCompare.Engine.Tables"/> collection out of a snapshot file
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TablesFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Read a <see cref="T:RedGate.SQLCompare.Engine.Tables"/> collection out of <paramref name="reader"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TablesToSnapshot">
            <summary>
            Handles writing a <see cref="T:RedGate.SQLCompare.Engine.Tables"/> collection to a snapshot
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TablesToSnapshot.Serialize(RedGate.SQLCompare.Engine.Tables,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Write details for <paramref name="tables"/> into <paramref name="writer"/>. 
            See also <seealso cref="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TablesFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableToSnapshot">
            <summary>
            <seealso cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableToSnapshot.Serialize(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            <seealso cref="M:RedGate.SQLCompare.Engine.Registration.ReadFromSnapshot.TableFromSnapshot.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IncrementalDmvQueryCacheKey">
            <summary>
            Dictionary key class for for live connection properties, which returns equal if the two objects point 
            at the same database with the same user. So the username is take into account, but not the password.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IncrementalDmvQueryCacheKey.FilenameSafe">
            <summary>
            Generates a stable filename-safe hash
            </summary>
            <remarks>
            <see cref="M:System.Object.GetHashCode"/>
            is insufficient, because <see cref="M:System.String.GetHashCode"/> is not guaranteed to be
            stable accross .NET framework versions or app domains.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheResult`1">
            <summary>
            Container object for the cached result of a DMV query along with the time the result was last updated.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheResult`1.Empty">
            <summary>
            An empty cache result.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheSerializer`1">
            <summary>
            Serializes/deserializes a DMV cache to/from a stream.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheSerializer`1.Serialize(System.IO.Stream,System.DateTime,System.Collections.Generic.ICollection{`0})">
            <summary>Serialize to <paramref name="stream"/>.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheSerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserialize from <paramref name="stream"/>.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvResultMergeException">
            <summary>
            Thrown when the new DMV query results can't be merged with the cached results.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ExcludeAzureCacheResultInvalidator">
            <summary>
            This is a decorator for the ICacheResultInvalidator interface, it will invalidate
            the cache if connected to an Azure database, otherwise it will call the decorated
            ICacheResultValidator
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ExcludeAzureCacheResultInvalidator.#ctor(RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ICacheResultInvalidator,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.SqlVersion)">
            <summary>
            Create a new ExcludeAzureCacheResultsInvalidator
            </summary>
            <param name="wrappedCacheResultInvalidator">The ICacheResultInvaldator to wrap</param>
            <param name="version">Version information for the database</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ExcludeAzureCacheResultInvalidator.InvalidateCacheResultIfNecessary``1(RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheResult{``0},System.Data.IDbConnection)">
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ICacheResultInvalidator">
            <summary>
            This ensures that the CacheResult is discarded if the Live Database has been restored
            since the results were originally queried for.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ICacheResultInvalidator.InvalidateCacheResultIfNecessary``1(RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheResult{``0},System.Data.IDbConnection)">
            <summary>
            Will return either the cache result provided or an empty cache result if the database was restored more recently
            than the cache was taken
            </summary>
            <typeparam name="T">The type of the cached query result</typeparam>
            <param name="cacheResult">The initial CacheResult that was read from the cache</param>
            <param name="connection">The connection to the database that we are registering</param>
            <returns>Either the DmvCacheResult passed in or an empty DmvCacheResult</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCacheSerializer`1">
            <summary>
            Serializes/deserializes a DMV cache to/from a stream.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCacheSerializer`1.Serialize(System.IO.Stream,System.DateTime,System.Collections.Generic.ICollection{`0})">
            <summary>Serialize to <paramref name="stream"/>.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCacheSerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserialize from <paramref name="stream"/>.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ILastCacheInvalidationDateQuery">
            <summary>
            A query to determine the last time an activity happened that could invalidat cached knowledge of the database
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ILastCacheInvalidationDateQuery.GetLastCacheInvalidationDateFor(System.Data.IDbConnection)">
            <summary>
            Get the latest date on which the database was restored or created
            </summary>
            <param name="connection">The connection to the database to query</param>
            <returns>The date of the last restore, or the create date if that's more recent.
            Returns create date if the database has never been restored</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.LastCacheInvalidationDateQuery">
            <summary>
            Queries the database to get the latest date from: the last restore, the create date
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.LastCacheInvalidationDateQuery.GetLastCacheInvalidationDateFor(System.Data.IDbConnection)">
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.LiveDatabaseCacheResultInvalidator">
            <summary>
            This ensures that the CacheResult is discarded if the Live Database has been restored
            since the results were originally queried for.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.LiveDatabaseCacheResultInvalidator.#ctor(RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.ILastCacheInvalidationDateQuery)">
            <summary>
            Create a LiveDatabaseCacheResultInvalidator with a specific last restore date query
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.LiveDatabaseCacheResultInvalidator.InvalidateCacheResultIfNecessary``1(RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheResult{``0},System.Data.IDbConnection)">
            <summary>
            Will return either the cache result provided, or an empty cache result if the database was restored or recreated
            more recently than the cache was taken or there was an error in getting the last cached information.
            </summary>
            <typeparam name="T">The type of the cached query result</typeparam>
            <param name="cacheResult">The initial CacheResult that was read from the cache</param>
            <param name="connection">The connection to the database that we are registering</param>
            <returns>Either the DmvCacheResult passed in or an empty DmvCacheResult</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvMonotonicEnumerable">
            <summary>
            Extension methods that allow <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvResultMerger"/> to efficiently assert that enumerables are monotonically increasing.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvMonotonicEnumerable.AssertMonotonic``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the same data as <paramref name="enumerable"/>, and asserts that the CacheKey is monotonically increasing.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvMonotonicEnumerable.AssertMonotonic(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the same data as <paramref name="enumerable"/>, and asserts that the elements are monotonically increasing.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.PersistentDmvCaches">
            <summary>
            Implementation of <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCaches"/> that uses the persisted <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.PersistentDmvCache`1"/> for each cache.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvResultMerger">
            <summary>
            Helper class for merging DMV query results for incremental registration.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCache`1">
            <summary>
            In-memory implementation of <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCache`1"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCaches">
            <summary>
            Implementation of <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCaches"/> that uses the in-mamory <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCache`1"/> for each cache.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCache`1">
            <summary>
            Cache of the results of a DMV query, along with the date the query was run.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCache`1.UpdateResults(System.DateTime,System.Collections.Generic.ICollection{`0})">
            <summary>
            Updates the cache with new DMV query results.
            </summary>
            <param name="updateTime">DateTime the DMV query was run.</param>
            <param name="allResults">Results of the DMV query run at <paramref name="updateTime"/>.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCache`1.GetLastResults">
            <summary>
            Returns the cached DMV query results.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCaches">
            <summary>
            Container for a <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCache`1"/> for each query which has had incremental registration implemented.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvResultMerger.MergeQueryResults``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Merges new results into existing results, and returns the updated full result set.
            </summary>
            <param name="existingResults">All results at the last update, in the same order as <paramref name="allKeys"/>.</param>
            <param name="allKeys">Cache keys for all objects of type <typeparamref name="T"/>, in numerical order.</param>
            <param name="newResults">All results that have changed since the last update, in the same order as <paramref name="allKeys"/>.</param>
            <returns>Merged results, in the same order as <paramref name="allKeys"/>.</returns>
            <remarks>
            A cache key may have multiple results. For example, for indexes the cache key is the object ID
            of the parent table/view. In these cases, <paramref name="newResults"/> must contain all results
            for a given cache key, not just the ones that have changed.
            A cache key cannot have zero results. All keys in <paramref name="allKeys"/> must have corresponsing
            results in either <paramref name="existingResults"/> or <paramref name="newResults"/>.
            All data in <paramref name="newResults"/> must have a corresponding key in <paramref name="allKeys"/>.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IncrementalDmvModel">
            <summary>
            Implementation of <see cref="T:RedGate.SQLCompare.Engine.IDmvModel"/> which uses <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCaches"/> to implement 
            incremental registration, by only retrieving from the server data for objects which have 
            changed since the last registration.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IncrementalDmvModelFactory">
            <summary>
            Keeps track of the <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCaches"/> for each database, and creates <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IncrementalDmvModel"/> which use those caches.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.PersistentDmvCache`1">
            <summary>
            Disk-based implementation of <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCache`1"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.PersistentDmvCache`1.#ctor(System.String,RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.IQueryResultSerializer{`0})">
            <summary>
            Constructs a PersistentDmvCache using the specified file as a backing file,
            and serializing via the specified result serializer.
            </summary>
            <param name="cacheFile">Backing file for the cache.</param>
            <param name="resultSerializer">Serializer for <typeparamref name="T"/>.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.PersistentDmvCache`1.#ctor(System.String,RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCacheSerializer{`0})">
            <summary>
            Internal constructor - this would be private except that it's used by tests (PersistentDmvCacheTests).
            </summary>
            <param name="cacheFile">Backing file for the cache</param>
            <param name="dmvCacheSerializer">Specific <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCacheSerializer`1" /> implementation to use</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.SqlProcedureResultSerializer">
            <summary>
            Serializer/deserializer for <see cref="T:RedGate.SQLCompare.Engine.Registration.QueryResult.CommentQueryResult"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.FieldQueryResultSerializer">
            <summary>
            Serializer/deserializer for <see cref="T:RedGate.SQLCompare.Engine.Registration.QueryResult.CommentQueryResult"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.CommentQueryResultSerializer">
            <summary>
            Serializer/deserializer for <see cref="T:RedGate.SQLCompare.Engine.Registration.QueryResult.CommentQueryResult"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.ViewColumnWithDetailsQueryResultSerializer">
            <summary>
            Serializer/deserializer for <see cref="T:RedGate.SQLCompare.Engine.Registration.QueryResult.SqlViewColumnWithDetailsResult"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.IndexQueryResultSerializer">
            <summary>
            Serializer/deserializer for <see cref="T:RedGate.SQLCompare.Engine.Registration.QueryResult.IndexQueryResult"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.IQueryResultSerializer`1">
            <summary>
            Serializer and deserializer for <typeparamref name="T"/>, used by <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.DmvCacheSerializer`1"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.IQueryResultSerializer`1.Serialize(RedGate.SQLCompare.Engine.NullableBinaryWriter,`0)">
            <summary>
            Serializes <paramref name="queryResult"/> to <paramref name="writer"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.IQueryResultSerializer`1.Deserialize(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Deserializes from <paramref name="reader"/>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.QueryResultSerializers.IQueryResultSerializer`1.Version">
            <summary>
            Serialization version.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2005">
            <summary>
            Queries to run against Dynamic Management Views for Sql Server 2005
            </summary>
            <remarks>
            These don't inherit from the 2000 queries since 2005 pretty much rewrote how system views are used
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2005.GetSqlTableUdtScript">
            <summary>This retrieves the hidden table name for user defined table types.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2005.GetSqlParameterScript">
            <summary>The system stuff is basically always included if executed on master!!</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2008R2">
            <summary>
            Queries to run against Dynamic Management Views for Sql Server 2008R2
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2008">
            <summary>
            Queries to run against Dynamic Management Views for Sql Server 2008
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2012SP1">
            <summary>
            Queries to run against Dynamic Management Views for Sql Server 2012 SP1
            </summary>
            <remarks>
            These are the 2012 queries, plus support for selective xml indexes
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2012">
            <summary>
            Queries to run against Dynamic Management Views for Sql Server 2012
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2014">
            <summary>
            Queries to run against Dynamic Management Views for Sql Server 2014
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2014.GetSqlTableUdtScript">
            <summary>This retrieves the hidden table name for user defined table types.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProvider2016">
            <summary>
            Queries to run against Dynamic Management Views for Sql Server 2016
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.DMVQueryTextProviderAzureV12">
            <summary>
            Queries to run against Dynamic Management Views for SQL Azure v12
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.EngineEdition">
            <summary>
            based on https://msdn.microsoft.com/library/ms174396.aspx
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.FunctionDefinitionParser">
            <summary>
            Can parse a piece of text as a function call, obtaining the name of the
            function and the arguments passed to it.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.FunctionDefinitionParser.ParseFunctionDefinition(System.String)">
            <summary>
            Tries to set the object's function name and arguments by parsing them
            from a piece of text.
            </summary>
            <param name="text">Function definition to parse.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IDMVQueryTextProvider">
            <summary>
            Provides SQL queries that return all the information live database registration requires.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IDMVQueryTextProvider.GetSqlSettingScript">
            <summary> A query for various database-level settings </summary>
            <remarks> Currently only contains FullTextEnabled </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IIncrementalRegistrationQueryTextProvider">
            <summary>
            For each query in <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IDMVQueryTextProvider"/> for which incremental registration has been 
            implemented, a corresponding query that returns all cache keys. (see <see cref="T:RedGate.SQLCompare.Engine.Registration.QueryResult.ICacheableQueryResult"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IIncrementalRegistrationQueryTextProvider.GetSqlIndexParentObjectIdScript">
            <remarks>Cache key is the object ID of the parent table/view/table type/table-valued function.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IIncrementalRegistrationQueryTextProvider.GetSqlCommentObjectIdScript">
            <remarks>Cache key is the object ID of the stored procedure.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IIncrementalRegistrationQueryTextProvider.GetSqlViewColumnParentObjectIdScript">
            <remarks>Cache key is the object ID of the view.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IIncrementalRegistrationQueryTextProvider.GetSqlFieldParentObjectIdScript">
            <remarks>Cache key is the object ID of the parent table/table-valued function/table type.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.IIncrementalRegistrationQueryTextProvider.GetSqlProcedureObjectIdScript">
            <remarks>Cache key is the object ID.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.LiveDMVModel.PrepareConnection">
            <summary>Ensures <see cref="F:RedGate.SQLCompare.Engine.Registration.ReadFromSql.LiveDMVModel.m_Connection"/> is open.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.LiveDMVModel.DoQuery(System.String)">
            <summary>Executes <paramref name="strSql"/> and returns a <see cref="T:RedGate.SQLCompare.Engine.DatabaseHelperResultSet"/> with the results.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.LiveDMVModel.GetDatabaseEncryptionGuid(System.Data.SqlClient.SqlConnection,System.Guid@)">
            <summary>
            Get the "dbi_familyGUID" internal value from the database.
            This is an undocumented value used to init the state for WITH ENCRYPTION,
            so we need this value in order to decrypt objects.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.PageReaderFromLive.PageReaderLoader">
            <summary>
            Helper class for loading BackupReader against a live connection
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromSql.PageReaderFromLive.PageReaderLoader.LiveConnection(System.Data.IDbConnection,RedGate.Shared.SQL.Server.SQLVersion)">
            <summary>
            Try to load BackupReader and return a backup reader connection against the provided live database connection;
            throw otherwise
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.QueryResult.ICacheableQueryResult">
            <summary>
            Any DMV query result to be used in <see cref="T:RedGate.SQLCompare.Engine.Registration.ReadFromSql.Incremental.IDmvCache`1"/> needs to implement this interface.
            </summary>
            <remarks>
            The <see cref="P:RedGate.SQLCompare.Engine.Registration.QueryResult.ICacheableQueryResult.CacheKey"/> should be a unique identifier of an object which has a modification
            date. For example, indexes don't have a modification date, but the parent table/view does, so a
            suitable <see cref="P:RedGate.SQLCompare.Engine.Registration.QueryResult.ICacheableQueryResult.CacheKey"/> is the object ID of the parent table/view.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.QueryResult.InvalidDmvQueryResultException">
            <summary>
            Exception raised when an error occurs while reading from the DMV queries
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.InvalidDmvQueryResultException.#ctor">
            <summary>
            Default constructor for InvalidDmvQueryResultException
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.InvalidDmvQueryResultException.#ctor(System.String)">
            <summary>
            Constructs an InvalidDmvQueryResultException with a specific message
            </summary>
            <param name="message">The cause of the error</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.InvalidDmvQueryResultException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an InvalidDmvQueryResultException with a specific message and
            an underlying cause.
            </summary>
            <param name="message">The error message to display to the user</param>
            <param name="inner">The underlying exception</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.InvalidDmvQueryResultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructs an InvalidDmvQueryResultException during deserialization.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.QueryResult.QueryResult">
            <summary>
            Common method used when building ...QueryResult classes from DMV query result sets.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.QueryResult.CreateFrom``1(RedGate.SQLCompare.Engine.ICancellationStatus,RedGate.SQLCompare.Engine.DatabaseHelperResultSet,System.Func{RedGate.SQLCompare.Engine.DatabaseHelperResultSet,``0})">
            <summary>
            Iterates through every row in <paramref name="resultSet" /> and uses
            <paramref name="resultBuilder" /> to create a QueryResult element for each row.
            </summary>
            <typeparam name="T">The type of QueryResult to be returned for each row</typeparam>
            <param name="status">Use to cancel the loop iteration</param>
            <param name="resultSet">The result set to read rows from</param>
            <param name="resultBuilder">builder Func used to create QueryResult elements
            from an individual row in the result set</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.QueryResult.SqlFeatureUsageResult">
            <summary>
            DMV result for FUR counts
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.SqlFeatureUsageResult.CreateFrom(RedGate.SQLCompare.Engine.ICancellationStatus,RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>
            Create from a sql result set
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.CommentQueryResult.Decrypt(RedGate.SQLCompare.Engine.IEncryptedTextReader,RedGate.SQLCompare.Engine.IResultSet)">
            <summary>
            If the encrypted text is not already known, decrypts the object.
            </summary>
            <param name="encryptedTextReader">Used to read the encrypted text</param>
            <param name="resultSet">Passed to <paramref name="encryptedTextReader"/>.<see cref="M:RedGate.SQLCompare.Engine.IEncryptedTextReader.GetEncryptedText(RedGate.SQLCompare.Engine.IResultSet,System.Int32)"/></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.PartitionRangeValueSqlResult.TryGetSafeValue(RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>
            Yeah, so GetSafeValue isn't quite as safe as we need it to be here. When we have a SqlDecimal whose value is
            too large for any .NET primitive, the SqlDataReader will throw an OverflowException which we catch here. The
            only way to anticipate this would be to look at the result of the PartitionRangeType, which is a separate
            query that we're trying not to entangle with this one.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.QueryResult.RoleMemberQueryResult">
            <summary>
            Represents the results of role membership query, ie which roles contain which roles and users.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.QueryResult.RoleMemberQueryResult.CreateFrom(RedGate.SQLCompare.Engine.ICancellationStatus,RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>
            Populate an instance of this class from a result set.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromBackup.BackupUtils.MakeConnectionString(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},RedGate.BackupReaderInterfaces.IBackupSet,System.Boolean)">
            <summary>
            Creates a backupreader-specific connection string for the given files
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.AddRoleMemberScriptInfo">
            <summary>
            Information needed to register a new role member from a script. Extracted from
            sp_addrolemember or ALTER ROLE ADD MEMBER syntax and then used later on to register 
            the new members in post-processing.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.WillWriteNewDBInfoFileReplacingOld(System.String)">
            <summary>For internal use only</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.GetDatabaseInfoFileAtributes(System.String)">
            <summary>Throws an exception if the file to be written doesn't exist</summary>
            <returns>Attributes of the ScriptDatabaseInformation</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.GetDatabaseInformationFileNameToRead(System.String)">
            <returns>
            Returns the ScriptDatabaseInformation filename in the folderPath, or null if none exist.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.GetDatabaseInfoFileNameToWrite(System.String)">
            <returns>The path that the xml file should be written out with</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.TryGetInformationFromXmlFile(System.IO.TextReader,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation@,RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors@)">
            <summary>Given a TextReader for an XML file, returns a database information object.</summary>
            <param name="file">A TextReader for an XML file representing database metadata.</param>
            <param name="info"></param>
            <param name="errors">
            Changed on output to indicate any errors or warnings that might have occurred while the file was loaded.
            </param>
            <returns>True if errors does not contain an error (only warning or OK)</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.WriteDatabaseInformationFile(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,System.String)">
            <summary>
            Write a ScriptDatabaseInformation object to the folder specified. Will throw an  IO exception if it can't
            save the file
            </summary>
            <param name="sdi">ScriptDatabaseInformation to save</param>
            <param name="folderPath">Location to save to</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.TryLoadScriptDatabaseInfomation(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation@,RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors@)">
            <summary>Load a ScriptDatabaseInformation object</summary>
            <param name="folderPath">Path to load from</param>
            <param name="databaseInformation">If return value is true, this holds the ScriptDatabaseInformation</param>
            <param name="errors">Loading errors</param>
            <returns>True iff the a database information file exists.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FolderUtils.TryLoadDatabaseProject(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.IDatabaseProject@)">
            <summary>Load a ScriptDatabaseInformation object</summary>
            <param name="folderPath">Path to load from</param>
            <param name="databaseInformation">If return value is true, this holds the IDatabaseProject</param>
            <returns>True iff the a database information file exists.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.FullTextFromFolderFactory.ProcessFulltextTables">
            <summary>Postprocesses fulltext tables. Prerequisites: tables, fulltext catalogs</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.FullTextFromFolderFactory.ProcessFulltextColumns">
            <summary>
            Postprocesses fulltext columns 2k. Prerequisites: tables, fulltext catalogs, fulltext tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.PartitionFunctionFromFolderFactory.CreatePartitionFunction(RedGate.SQLCompare.ASTParser.Syntax.Statements.CreateOrAlter.PartitionFunction,RedGate.SQLCompare.Engine.ScriptSource)">
            <summary>
            Create a partition function object from <paramref name="partitionFunctionNode"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.TableFromFolderFactory.ProcessColumnDefinition(RedGate.SQLCompare.ASTParser.Syntax.Tables.ColumnDefinition,System.Int16,RedGate.SQLCompare.Engine.SchemaObject)">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.TableFromFolderFactory.CreateTableProcessUniqueIndex(RedGate.SQLCompare.ASTParser.Syntax.Tables.Constraint,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary></summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.TableFromFolderFactory.CreateTableProcessPrimaryKey(RedGate.SQLCompare.ASTParser.Syntax.Tables.Constraint,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Field,RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary></summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.TableFromFolderFactory.ProcessNodeAlterTable(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes alter table nodes.</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.TableFromFolderFactory.AddInlineIndexForColumn(RedGate.SQLCompare.ASTParser.Syntax.Tables.ColumnDefinition,RedGate.SQLCompare.Engine.Table)">
            <summary>If the column has an index inlined, add it here</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.TableFromFolderFactory.AddTableInlinedIndexes(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.ASTParser.Syntax.Statements.CreateOrAlter.Index},RedGate.SQLCompare.Engine.Table)">
            <summary>Add table-inlined indexes</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.Factories.UserFromFolderFactory.SetDefaultConnectPermission(RedGate.SQLCompare.Engine.User)">
            <remarks>
            Creating a user initializes their connect permission on Sql Server. But the default for SSDT is no Connect
            permission.
            </remarks>
            <param name="user">
            The user's DatabaseLevelPermissions will be modified as appropriate to the script folder version
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.IndexPropertyMutator.CreateTableProcessIndexHints(RedGate.SQLCompare.ASTParser.Syntax.Tables.Constraint,RedGate.SQLCompare.Engine.RelationalIndex)">
            <summary>
            Processes the index hints. Example: pad_index = ON, fillfactor = 20, ignore_dup_key = On,
            statistics_norecompute = on, allow_row_locks = off, allow_page_locks = off
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.ParameterMutator.ParameterProcessDefault(RedGate.SQLCompare.Engine.Parameter,RedGate.SQLCompare.ASTParser.Syntax.Statements.CreateOrAlter.ProcedureParameter)">
            <summary>Processes the default values for a parameter</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.ScriptFileReader.LengthOfWhitespaceAndCommentsFollowing(System.Int32)">
            <summary>
            Finds the number of whitespace/comment characters and semicolons following the specified position, which must
            not be within a comment.
            </summary>
            <remarks>
            If you find that you need the following whitespace very often, you may find that using the
            CommentsAndWhitespaceCache object from the rewriter will produce a useful performance boost.
            </remarks>
            <param name="startPosition">Where to start looking from</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.ScriptFileReader.LengthOfWhitespaceAndCommentsFollowing(System.Int32,RedGate.SQLCompare.Engine.ReadFromFolder.LazyFileContents)">
            <summary>
            Finds the number of whitespace/comment characters and semicolons following the specified position, which must
            not be within a comment.
            </summary>
            <remarks>
            If you find that you need the following whitespace very often, you may find that using the
            CommentsAndWhitespaceCache object from the rewriter will produce a useful performance boost. This is internal
            so it can be unit tested.
            </remarks>
            <param name="startPosition">Where to start looking from</param>
            <param name="fileContents">Where to look for text to lex</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.ScriptFileReader.ReadFromScriptFile(System.Int32,System.Int32)">
            <summary>reads the raw text in a buffered way.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.ScriptFileReader.ReadFromScriptFile(RedGate.SQLCompare.ASTParser.Syntax.Element,System.Int32,System.Boolean,System.Int32@)">
            <summary>reads the raw text in a buffered way.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.ScriptFileReader.ReadFromScriptFile(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>reads the raw text in a buffered way.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.TableExpressionParser.RewriteConstraintText(System.String,System.Boolean,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.CompatibilityChecker)">
            <summary>
            Rewrites constraint texts (defaults, computed columns, etc) to match the rewrite style of SQL Server (note
            that 2000 and 2005 have different rewrite rules)
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.TableExpressionParser.TraverseSSParsedExpression(System.Text.StringBuilder,antlr.collections.AST,System.Boolean,System.Boolean,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.CompatibilityChecker)">
            <summary>
            This traverses AST nodes, and write to the stringbuilder parameter the corresponding expression text. It also
            differentiates between SS2k and SS2k5
            </summary>
            <param name="sb"></param>
            <param name="ast"></param>
            <param name="processSiblings">Process siblings. Use no if e.g. processing individual parameters.</param>
            <param name="caseSensitive">Is the server this will eventually be run on case sensitve or not</param>
            <param name="compatibility">Which version of SQL server are we generating this for</param>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FileInfoExtensions">
            <summary>
            Extension methods for <see cref="T:System.IO.FileInfo" />
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FileInfoExtensions.WriteAllText(System.IO.FileInfo,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.ReadFromFolder.FileInfoExtensions.ReadAllText(System.IO.FileInfo)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Registration.SystemStoplistProvider.s_SystemStopwords">
            <summary>
            the majority of the time, this will only have two kvps in it, both pointing to the same object
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.SystemStoplistProvider.GetSystemStoplist(System.Version)">
            <summary>
            Gets the most valid system stoplist from the xml file. The serverVersion will be set to the version obtained
            from the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Registration.SystemStoplistProvider.PopulateSystemStoplist">
            <summary>
            Initializes the stoplist with the system stoplist from the specified server version.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.LiveConnectionInstructions">
            <summary>
            Injectable details about a live database registration
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveConnectionInstructions.DatabaseName">
            <summary>
            The name of the database that we want to register
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveConnectionInstructions.ServerName">
            <summary>
            The name of the server that we're connecting to. This is optional, and is only used for display purposes (eg
            in the comment header at the top of the deployment script)
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.LiveConnectionInstructions.ConnectToDatabase">
            <summary>
            An injectable sql connection to use for registration. We take the database name as a parameter since we'll
            want to run some queries against the master database as well
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveConnectionInstructions.FromConnectionString(System.String)">
            <summary>
            Create an LCI instance based on a connection string (but with variable database name)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2017NameResolver">
            <summary>
            Allows any SQL Server vNext-specific catalog view queries to be adapted to work with SQL Backup Reader
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCUnsupportedFeatureSimplePopulator">
            <summary>
            A database backup populator for features that are not supported in this version of Sql Server
            The properties TableDefinition and Sql should never be called on this class.
            The class exists to prevent <see cref="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCSimplePopulationsQueryer"/> constructor failing with an argument 
            exception when trying to run DoQuery() in <see cref="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDMVModel"/> for unsupported features.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSystemTableSql2005">
            <summary>
            The underlying system tables and lookup tables for SS2005. The underlying sytsem tables map directly to a
            table populated by the backup reader into SQLite - the lookup tables are populated in C# from other tables
            and generally contain information that is too complicated to be expressed directly as SQLite SQL Command.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupView">
            <summary>
            The BackupView class is a simple object that just maps the view (an integer representing the view to the
            internal system) to its rela name. Its main purpose is to automatically trigger the loading of dependent
            views, tables etc. such that when a statement is executed against it all pre-requisities are in place.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupView.#ctor(System.String,System.Int32)">
            <summary>Construct a new BackupView object</summary>
            <param name="viewName">The internal (SQL Lite) name of the view</param>
            <param name="viewType">
            The view's enum value (numbers correspond to different views if working with SQL 2000 or SQL2005
            </param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupView.ViewName">
            <summary>
            Get the View Name This name *should* always be used to refer to the view in any sql statement. The actual
            value of the name is not guaranteed constant.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViewTypesSql2005">
            <summary>
            An enumeration representing all the supported SqlServer 2005 System Views. The general naming convention is
            that sys.view_name in SS2005 becomes ViewName in this enumeration.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseCaseCheckQueryer.TableDefinition">
            <summary>Get the Table Definition of the CaseCheck</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDMVModel.GetDatabaseInformation(RedGate.SQLCompare.Engine.ConnectionProperties,System.String@,System.String@)">
            <summary>
            Read a backup given the specified connection properties and grab a server/database name
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupDMVModel.GetDatabaseInformation(System.String,System.String@,System.String@)">
            <summary>
            Read a backup given the specified connection string and grab a server/database name
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetQueryer">
            <summary>
            A class that wraps a SCCTBComponentQueryer to make it look like a bona fide ResultSet which is then passed to
            the world.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetQueryer.NewInstance(RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer)">
            <summary>Create a new ResultSet to wrap a queryer object</summary>
            <param name="queryer">The queryer object to wrap</param>
            <returns>A new result set</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe">
            <summary>
            The purpose of this queryer is to circumvent the loosly-typed nature of SQLite by forcably trying to convert
            the output types to those specified by the TableDefinition
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.NewInstance(System.Collections.Generic.IList{RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition.STableDefinitionComponents},RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>
            Create a new result set that handles the conversion of the results from SQLite into types compatiable with
            the TableDefinition's view.
            </summary>
            <param name="unsafeTabComp">Destination types</param>
            <param name="reader">A reader from which the raw representation will be read</param>
            <returns>The new reader</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleShortSafely(System.Object)">
            <summary>Convert the incoming object to a short</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleDoubleSafely(System.Object)">
            <summary>Convert the incoming object to a double</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleStringSafely(System.Object)">
            <summary>Convert the incoming object to a string</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleBoolSafely(System.Object)">
            <summary>Convert the incoming object to a bool</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleDateSafely(System.Object)">
            <summary>Convert the incoming object to a date</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleGuidSafely(System.Object)">
            <summary>Convert the incoming object to a guid</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleIntSafely(System.Object)">
            <summary>Convert the incoming object to an int</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperResultSetTypeSafe.HandleByteSafely(System.Object)">
            <summary>Convert the incoming object to a byte</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperTypeMapper">
            <summary>
            The purpose of this queryer is to handle variant data fields. Every variant has an associated intrinsic type
            that is stored in a parallel column created by the backup reader when it parses the system table. This
            parallel column is used to find out the true type of the variant for a particular cell so that variant's byte
            representation can be converted into a useful representation for presentation to the world.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseHelperTypeMapper.NewInstance(RedGate.SQLCompare.Engine.DatabaseHelperResultSet,System.String[],System.String[],RedGate.SQLCompare.Engine.ReadFromBackup.ITypeMapper)">
            <summary>Construct a new type mapping reader</summary>
            <param name="reader">The reader from which the raw values are to be extracted.</param>
            <param name="paramsColumns">The name of the columns that provide the data to convert</param>
            <param name="typeColumns">
            The name of the columns that provide the type of the columns specified in param columns
            </param>
            <param name="typeMapper">A type mapper that describes the destination types</param>
            <returns>A new reader</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DBTypes">
            <summary>
            Types that are supported by TableDefinitions - these types will be implicitly created if possible if SQLite
            returns a value that due to weak typing isn't what was expected - for example int will be converted to a byte
            if the world view requested a byte and an int was returned from SQLite.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.BackupConnection">
            <summary>
            After registering a database this will contain the active connection to the backup database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.IgnoreWrongPasswords">
            <summary>Tells the backup reader to ignore files with incorrect passwords</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.Dispose">
            <summary>Disposes of the object.</summary>
            <remarks>
            It is important to dispose of the object to delete any temporary files it uses.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.GetBackupSets(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Retreives a list of backup sets from the given backup files. This operation is ICancellable.
            </summary>
            <param name="filePaths">A list of the files to open.</param>
            <param name="passwords">
            A list of passwords for the files if this is an encrypted SQL Backup, String.Empty if password not needed for
            that file.
            </param>
            <returns>A list of the available backup sets in the given files.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.CancelOperation">
            <summary>Cancels the current operation.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.Close">
            <summary>Closes the connection to the backup database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.IsPasswordRequired(System.Collections.Generic.IList{System.String})">
            <summary>Returns true if the backup files need a password to be read, false otherwise.</summary>
            <param name="filePaths">A list of the files to open.</param>
            <returns>true if the backup files need a password to be read, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupSetDatabase.IsCaseSensitive(RedGate.SQLCompare.Engine.ConnectionProperties)">
            <summary>
            Run a quick check against a backup specified with a BackupReader connection string to see if it has a
            case-sensitive collation
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.IBindable">
            <summary>
            The Interface that represents individual objects - e.g. a Permission, Table, View etc.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.IBindable.Bind(RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Binds the object using the table definition into the dictionary - the values from this object can now be
            retrieved from the dictionary.
            </summary>
            <param name="tblDefn">The link between the world view and the internal view</param>
            <param name="dict">The output dictionary - each key is an output param, each value is the data</param>
            <returns>true if the object should be presenting to the world, false otherwise</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.IBindable.GetValue(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition,System.Boolean@)">
            <summary>Gets the value specified by the property name</summary>
            <param name="propertyName">Name of the property to retrieve</param>
            <param name="tblDefn">The link between the world view and the internal view</param>
            <param name="saveMe">
            true the object should be saved, false the object should be discarded before an external viewer can access it
            </param>
            <returns>the object associated with the propertyName</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.IGetValue">
            <summary>An inner GetValue interface that requires no knowledge of Table Definitions</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.IGetValue.GetTheValue(System.String,System.Boolean@)">
            <summary>Returns the object associated with the property name</summary>
            <param name="propertyName">Name of the property to retrieve</param>
            <param name="save">
            true the object should be saved, false the object should be discarded before an external viewer can access it
            </param>
            <returns>the object associated with the propertyName</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.ISCEnumerable">
            <summary>An interface that provides useful functions for IEnumerable</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.ISpecialReaderInterface">
            <summary> 
             The ISpecialReaderInterface is used for SQL variants
             to ensure that the variant is explicitly cast to its intrinsic type
             </summary>
             <remarks>
             SQLite is loosly typed so it is not possible to rely on the default 
             result from SQLite matching what is desired.
            
             When dealing with simple populations this
             interface can be used - you supply the SQL to execute and the
             TableDefinition that describes the "World View" and *it just works*!
            
             The class that provides the boiler plate for the ISCSimplePopulator
             interface. This actually provides the external SCCTBComponentQueryer
             interface EnumObjects that is used by DoQuery. The class executes the
             sql provided and returns an SCObject for each row read as a result
             of the SQLite query
            
             A simple TableComponentFunction resolver for Collations
             This will return a string representation of the Collation specified
             by the collation id. The collation id must be bound as the argument in
             position 0.
            
             A simple wrapper for SCSimplePopulationsQueryer that
             causes an exeption to be thrown if the populator ever requests
             a query of system objects which are not typically available in 
             a backup
             </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.ITypeMapper">
            <summary>
            This interface gets a C# type for each Xtype (SQL Server internal system type identifier)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.ITypeMapper.GetType(System.Int32)">
            <summary>Return the C# type for the SQL Server System Type</summary>
            <param name="xtype">SQL Server System Type</param>
            <returns>A C# Tytpe Object</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCBindableBase">
            <summary>
            For most purposes the class SCBindableBase provides enough flexibility and so classes that represent objects
            should derive from it rather than implement IBindable directly
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCBindableBase.RedGate#SQLCompare#Engine#ReadFromBackup#IBindable#Bind(RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Perform the Binding. This implementation supports dynamic binding through ITSCFunction.
            </summary>
            <param name="tblDefn">The link between the world view and the internal view</param>
            <param name="dict">The output dictionary - each key is an output param, each value is the data</param>
            <returns>true if the object should be presenting to the world, false otherwise</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBBindableComponent">
            <summary>
            Wraps the GetTheValue call in an exception handler - returns null as the object if the exception handler is
            hit.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBBindableComponent.GetTheValue(System.String,System.Boolean@)">
            <summary>Returns the object associated with the property name</summary>
            <param name="propertyName">Name of the property to retrieve</param>
            <param name="save">
            true the object should be saved, false the object should be discarded before an external viewer can access it
            </param>
            <returns>the object associated with the propertyName</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBBindableComponent.GetValue(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition,System.Boolean@)">
            <summary>Gets the value specified by the property name</summary>
            <param name="propertyName">Name of the property to retrieve</param>
            <param name="tblDefn">The link between the world view and the internal view</param>
            <param name="saveMe">
            true the object should be saved, false the object should be discarded before an external viewer can access it
            </param>
            <returns>the object associated with the propertyName</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer">
            <summary>
            The root class for Queryers - a queryer retrieves all the desired objects for a particular type. EG the
            Queryer for XMLSchemaCollection retrives all the XMLSchemaCollection objects within a particular database.
            Normally it will not be necessary to derive a class directly from SCCTBComponentQueryer but for maximum
            flexibility it is possible to.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer.EnumObjects">
            <summary>
            Get an enumeration that allows the caller to iterate through each object that is desired to be retrieved.
            </summary>
            <returns>An IEnumerable interface</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer.TableDefinition">
            <summary>
            Retrieve the TableDefinition for this Queryer - a TableDefinition describes the form of the World View (Data
            type etc) and how it maps to an Internal World View
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SCCTBComponentQueryer.GetSpecialReader(RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>
            A blank implementation of GetSpecialReader - if a derived class needs to deal with Variants this method
            should be overriden.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCEnumerator">
            <summary>
            An enumerator class - normally it is possible to use this class without resorting to implementing the methods
            on IEnumerator&lt;IBindable&gt; It provides a method to access ISCEnumerable.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCSingleObjectQueryer">
            <summary>
            A special implementation of the queryer interface for cases where there is only a single object going to be
            returned from the Query. (e.g. CaseCheck) In this case, this abstract class implements the Queryer's
            functions, the Enumerator's functions and the Enumerables functions. A deriving class need only provide an
            object of SCCTBBindableComponent and a TableDefinition to complete the implementation.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SQLBackupReaderLoadException">
            <summary>
            Exception indicating that trying to load the BackupReader library has gone wrong somehow
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver">
            <summary>
            This class provides a common structure to communicate with the Backup via SQLLite irrespective of the
            underlying backup data structure (2005,2008,2012 etc) The specific derivations of this class should *never*
            be instantiated directly - rather retrieved through the static function SqlNameResolver.GetNameResolver which
            will return an appropriate resolve for the desired BackupVersion being used.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetTableName(System.Int32)">
            <summary>
            *ABSTRACT* Maps an integer representing the table to a TableName structure for loading. This function is not
            normally called by user code and is used internally to get real system table names as a precursor to loading
            them.
            </summary>
            <param name="table">An integer representing the table</param>
            <returns>A TableName structure (See BackupReader for full details)</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetSqlCmd(System.Int32)">
            <summary>
            *ABSTRACT* Get a string representing the CREATE VIEW script for the desired view. This function is not
            normally called by user code and is used internally to prepare views for first use after a user has requested
            access to a particular system view.
            </summary>
            <param name="view">The view requested</param>
            <throws>NotSupportedException if the integer does not represent a known view</throws>
            <returns>The SQLite compatiable CREATE View Script</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetDependentTables(System.String)">
            <summary>
            *ABSTRACT* Get a list of all the system tables that a script depends upon This function is not normally
            called by user code and is used internally to load dependent tables for a script when a user has requested a
            view.
            </summary>
            <param name="sql">The SQL script to analyse</param>
            <returns>
            An integer list containing all the raw system tables that this script depends upon
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetViewName(System.Int32)">
            <summary>
            *ABSTRACT* Get the string that represents the internal name of the view within the SQLite database. The name
            is chosen to ensure it doesn't clash with internal SQLite views nor system tables already loaded. This
            function is not normally called by user code.
            </summary>
            <param name="view">The view desired</param>
            <throws>NotSupportedException is the integer does not represent a known view</throws>
            <returns>The View's internal name</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.USER_NAME(System.Int32)">
            <summary>*ABSTRACT* Get the user name for a user ID.</summary>
            <param name="uid">User ID</param>
            <returns>A string representing the user name or null if no user has that user id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.SCHEMA_NAME(System.Int32)">
            <summary>*ABSTRACT* Get the schema name for a schema id</summary>
            <param name="schemaid">Schema ID</param>
            <returns>A string representing the schema name or null if no schema has that id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.DB_NAME">
            <summary>*ABSTRACT* Gets the name of the Database that the backup represents</summary>
            <returns>The name of the database</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.SCHEMA_ID(System.String)">
            <summary>*ABSTRACT* Gets the schema id for a schema name</summary>
            <param name="schema">Schema Name</param>
            <returns>An integer representing the schema id or -1 if the schema id is not recognised.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.OBJECT_ID(System.String,System.Int32)">
            <summary>*ABSTRACT* Gets the object id for an object scoped in a schema</summary>
            <param name="objectName">The name of the object</param>
            <param name="schemaid">Schema ID </param>
            <returns>The object id or null if the object isn't recognised</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetCollationForId(System.Int32)">
            <summary>
            Translates a CollationID into a string representation of the Collation The collationID has 32 bits: (Each of
            the characters below represent 1 Bit) SQL2000 HHHHHHHH-------PPPPPP----LLLLLL SQL2005
            HHHHHHHH-------PPPPPPP--LLLLLLL where H are the High Bits - for special and compatiability collations P are
            the Property Bits - sets case sensitivity etc L are the Language Bits - sets the language of the collation. -
            Are uninteresting bits if High bits not set Then resulting collation ID is Language_[prop_bits] Prop Bits AND
            1 = _BIN2 (SQL Server 2005) - other bits values don't matter Prop Bits AND 32 = _BIN - other bits values
            don't matter The remaining prop bits read from right to left P   P   P   P Set             _AI _CI Unset
            _WS _KS _AS _CS If High Bits set Return the collation string if special collation Otherwise if High Bits has
            specific values 30-34 etc (See below) Compatiability_[high_bits]_[lang_code]_[prop_code] - the steps to
            produce these values is show above
            </summary>
            <param name="id">The collationID</param>
            <returns>A string representation of the Collation or null if there is no representation.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.#ctor(RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews)">
            <summary>Construct a new SqlNameResolver</summary>
            <param name="backupViews">The backupViews that the SQLLite statements will be executed against</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.GetNameResolver(RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews,RedGate.Shared.SQL.Server.SQLVersion)">
            <summary>Get the SQLNameResolver the desired version of SQL Server</summary>
            <param name="backupViews">The backupViews that the SQLLite statements will be executed against</param>
            <param name="version">The version of the SQL Server that is being requested</param>
            <returns>
            A SQLNameResolver or IndexOutOfBoundsException if the version doesn't correspond to a Name resolver.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.Clear">
            <summary>Clear the name resolver cache to allow recomparison</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.StartTransaction">
            <summary>
            Start a trnsaction against SQLite. SQLite does not support multiple/nested transactions If this function is
            executed multiple times against the same backup view the Transaction will only be started once.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.SqlNameResolver.Commit">
            <summary>
            Commit a SQLite transaction Multiple SQLite transactions cannot exist and they cannot be nested - executing
            this function multiple times will cause the active transaction to be commited and then do no further work.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition">
            <summary>
            Represents a set of TableDefinitionComponents that comprise an entire World View object
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition.PopulateColumnNames(System.String[])">
            <summary>Populate column names from an Array</summary>
            <param name="rgstr">Array of column names</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinition.PopulateColumnNames(RedGate.SQLCompare.Engine.DatabaseHelperResultSet)">
            <summary>Populate column names from a reader</summary>
            <param name="reader">The reader</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents">
            <summary>
            The TableDefinitionComponents object represents a single world view field and how it relates to the internal
            data A TableDefinitionComponents object may map directly to a SQLite field or it may map to a number of
            SQLite fields that are processed to form a new value, either by a user defined function that implements
            ITCFunction or by FuncCoalesce
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.ITCFunction">
            <summary>
            This interface provides a method to associate custom mapping behaviour to a TableDefinitionComponents
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.ITCFunction.GetValue(RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents,System.Object[],System.Boolean@)">
            <summary>A re-entrant function that is called once per row in the SQLite database</summary>
            <param name="tdc">
            The table definition components object that provides information about the field this function is linked to.
            </param>
            <param name="args">
            Supporting information required for the mapping - e.g. if getting an object name this would be the object id.
            </param>
            <param name="saveMe">
            An out parameter indicating whether the object should be presented to the world or discarded.
            </param>
            <returns>The object representing the value of this cell to the World</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.#ctor(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.DBTypes,System.Int32,System.String)">
            <summary>
            Construct a direct mapping TableDefinitionComponent that maps 1 world view entry to one internal name which
            will be the method GetTheValue in the object this is being called upon - this ususally corresponds to a
            single property of a class or a single field in a SQLite result set
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.#ctor(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.DBTypes,System.Int32,System.String[],RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.TDCFuncs)">
            <summary>
            Construct a one to many mapping TableDefintionComponents object that maps a set of internal names (multiple
            field from a SQLite result set or multiple property from an object) to a single world view field using the
            inbuilt function indicated.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.#ctor(System.String,RedGate.SQLCompare.Engine.ReadFromBackup.DBTypes,System.Int32,System.String[],RedGate.SQLCompare.Engine.ReadFromBackup.TableDefinitionComponents.ITCFunction)">
            <summary>
            Construct a one to many mapping TableDefintionComponents object that maps a set of internal names (multiple
            field from a SQLite result set or multiple property from an object) to a single world view field using the
            user definied function provided (The user defined function is implemented using the interface ITCSFunction).
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews">
            <summary>
            A class that provides access to a single Backup by allowing access to all the system tables and views. The
            class performs delay loading for all non essential system tables and ensures that when a view/table is
            requested all depedent objects are loaded in advance.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.TransactionInProgress">
            <summary>Gets/Sets whether a SQLite connection is in progress.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.Connection">
            <summary>Gets the BackupConnection</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.#ctor(RedGate.Shared.SQL.Server.SQLVersion,RedGate.Shared.SQL.Server.SQLVersion,RedGate.BackupReaderInterfaces.IBackupConnection)">
            <summary>Create a new BackupViews object for a particular BackupConnection.</summary>
            <param name="majorVersion">The SQL Server version of the backup</param>
            <param name="compatVersion">SQL Server Compatibility Version</param>
            <param name="conn">The connection to the backup</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.USER_NAME(System.Int32)">
            <summary>Get the user name for a user ID.</summary>
            <param name="uid">User ID</param>
            <returns>A string representing the user name or null if no user has that user id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.SCHEMA_NAME(System.Int32)">
            <summary>*ABSTRACT* Get the schema name for a schema id</summary>
            <param name="schemaid">Schema ID</param>
            <returns>A string representing the schema name or null if no schema has that id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.OBJECT_ID(System.String,System.Int32)">
            <summary>*ABSTRACT* Gets the object id for an object scoped in a schema</summary>
            <param name="objectName">The name of the object</param>
            <param name="schemaid">Schema ID </param>
            <returns>The object id or null if the object isn't recognised</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.State">
            <summary>Returns the underlying ConnectionState of the BackupConnection object</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.MajorVersion">
            <summary>
            Gets the MajorVersion (Equivalent to the version of the database upon which the backup has been done upon)
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.CompatibilityVersion">
            <summary>
            Gets the MajorVersion (Equivalent to the version of the database upon which the backup was originally done
            upon)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.GetCollationForId(System.Int32)">
            <summary>Get a string representation of the CollationID</summary>
            <param name="id">The collationID</param>
            <returns>A string representation of the collation or null if no representation exists</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.GetCommand">
            <summary>
            Get a command object against the underlying SQLite database - this can be used to execute arbitary statements
            against the System Table and View stores. Any views or tables referenced should be referenced through the
            functions of BackupViews to ensure all prequsite work has been carried out.
            </summary>
            <returns>The commmand</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.SetTableLoaded(System.Int32,System.Boolean)">
            <summary>
            Forces a system table to be flagged as loaded - this should only be used in exceptional cases as it will
            prevent the delay loading system from loading any dependendencies when this table is referenced.
            </summary>
            <param name="systemTable">An integer representing the system table</param>
            <param name="loaded">true - table loaded, false - table needs loaded</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.CreateIndexOnTable(System.Int32,System.String[])">
            <summary>
            Create an index on the table specified for the columns supplied. If this index already exists or the table is
            not loaded the function will fail silently.
            </summary>
            <param name="tab">The table on  which to create the index</param>
            <param name="columns">The array of columns on which to base the index</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.EnsureTableLoaded(System.Int32)">
            <summary>
            Loads a system table from the BackupReader into the SQLite Database If the table is already loaded the
            function will fail silently.
            </summary>
            <param name="systemTable">An integer representing the system table to be loaded.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.GetView(System.Int32)">
            <summary>
            Get an object representing the desired view. This function should always be called to access any view on the
            SQLite Table as it will cause the loading of any dependent views/system tables before it returns thus
            ensuring the underlying database is in a good state.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews.DatabaseGuid">
            <summary>Gets the Database GUID for decryption in SQL Server 2K</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.DatabaseCaseCheckObject">
            <summary>
            Retrieve the global collation for the Database. The global collation is read by the Backup Reader into a
            "special" SQL Compare only table which is retrieved here. This "special" table is also used by Full Text
            Enabled and has the potential to be used for any database properties that are stored in the underlying table
            of sys.databases
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCKeyInfo">
            <summary>
            Equivalent to SQL Server CKeyInfo struct. Not all fields are populated at the moment - if they aren't
            required, I've omitted them to speed things up a bit.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SCUserPopulator">
            <summary>
            All of the Simple Population Functions implement ISCSimplePopulator which only requires a string form of the
            SQL to be executed and a TableDefinition object that defines the mapping between external name (that which be
            accessed from the Population Engine of SQL Compare) and the internal name that is used to represent the data
            being retrieved from the SQL Statement being returned from the implementation of the "Sql" property. In most
            cases the internal and external names will be identical but when there is a translation that has to be done
            (for example coalescing two results into a single result) the TableDefinition will be furnised with
            information on how to perform such work. A user defined function pointer can be supplied to do any work more
            complicated than this. The TableDefinition object also specifies the type of data that will be returned and
            its datasize (although SQLite doesn't enforce data width constraints) The Sql Property will, by reference to
            the backupViews .GetView function cause the loading of all views/system tables that it depends on. All of the
            implementation's sql is as near as possible identical to the SQL used by the live DB - the only modifications
            that have been made are to remove syntax that isn't supported by SQL Lite (e.g. system functions) and
            re-express it. In the examples where there is an undocumented system function I have tried to observe its
            behaviour to work out what data it is dependent upon.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.s_SystemTableNamesSQL2005">
            <summary>
            A mapping from the BackupSystemTableSql2005 to the system table's real name or the name of the calculated
            lookup table.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.#ctor(RedGate.SQLCompare.Engine.ReadFromBackup.BackupViews)">
            <summary>Construct a new Sql2005NameResolver This is not used by user code.</summary>
            <param name="backupViews">The backupView to execute the SQLite commands against</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateFTILookupTable">
            <summary>
            Populate the FullTextIndexLookupTable Constructs a lookup table containing the rows 1,0 2,M 3,x 4,A
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateAssemblyTypeMetaData">
            <summary>
            Populate the AssemblyTypeMetaData LookupTable This concatenates with a comma the class_name and
            assembly_meta_data retrieved from the system tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateAssemblyMetaData">
            <summary>
            Populate the Assembly Meta Data Table. The binary representation of a clr assembly is loaded directly into
            the database and consists of a direct copy of the PE file. The live DB allows the retrieval of the full name
            of the assembly but this cannot be achieved without passing it through C# and calling the method FullName
            after loading the assembly. This lookup table allows the retrieval of the assemblies full name through
            SQLite.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateIDColsLookup">
            <summary>
            Populate the ID Cols Lookup Table The identity, seed and last_value fields of syscolpars are stored as a
            binary value called idtval. To break this value requires c# Although the idtval can be a variable length of
            bytes (so far 13,25,61 bytes) have been observed the general pattern is that the low byte is a status code
            (value unknown) and the remaining n bytes divide into 3 equal portions with the first third (from left) the
            last_value, second third the increment and the third third the seed.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateSysPalValues">
            <summary>Populate the SysPalValues table This is populated from the data in SysPals.cs</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateSysPalNames">
            <summary>Populate the SysPalNames table This is populated from the data in SysPals.cs</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.GetTableName(System.Int32)">
            <summary>Get the Table Name of a System Table</summary>
            <param name="tableSql2005">A value from BackupSystemTablesSql2005</param>
            <returns>A TableName object encapsulating the name of the table</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.SCHEMA_NAME(System.Int32)">
            <summary>Get the schema name for a schema id</summary>
            <param name="schemaid">Schema ID</param>
            <returns>A string representing the schema name or null if no schema has that id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.DB_NAME">
            <summary>Gets the name of the Database that the backup represents</summary>
            <returns>The name of the database</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.SCHEMA_ID(System.String)">
            <summary>Gets the schema id for a schema name</summary>
            <param name="schema">Schema Name</param>
            <returns>An integer representing the schema id or -1 if the schema id is not recognised.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.OBJECT_ID(System.String,System.Int32)">
            <summary>Gets the object id for an object scoped in a schema</summary>
            <param name="objectName">The name of the object</param>
            <param name="schemaid">Schema ID </param>
            <returns>The object id or null if the object isn't recognised</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.USER_NAME(System.Int32)">
            <summary>Get the user name for a user ID.</summary>
            <param name="uid">User ID</param>
            <returns>A string representing the user name or null if no user has that user id</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.GetViewName(System.Int32)">
            <summary>
            Gets the real name of the view in the SQLite Database The actual value of this name is not guaranteed and
            this function should not be used to retrieve the name for external callers - instead the view should be
            retrieved through GetView which not only provides the name it also ensure dependent tables are loaded as
            well.
            </summary>
            <param name="view">A value from the BackupViewTypesSql2005 enumeration</param>
            <returns>
            The viewnname of will throw NotSupportedException if the argument doesn't represent a reocognised view.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateSynonymsTable">
            <summary>
            Populate the Synonyms Lookup Table The table needs to be populated with the object id of the object being
            referenced not just the name of the object. The name of the object is in the form of
            [db].[schema].[object_name] If the object being referenced is in a different database the new row in the
            Synonyms table is set to null (the backups don't span multiple DB), otherwise the objects_id is looked up
            using the schema name and the object name.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.PopulateUsersTable">
            <summary>
            Populate the Users Lookup Table. This table was too complicated to be expressed directly in SQLite logic It
            is a C# implementation of the results of sp_helptext 'sys.users'
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromBackup.Sql2005NameResolver.GetSqlCmd(System.Int32)">
            <summary>
            This function returns the SQLite SQL representation of a SS2005 View. All the views depends on system tables
            - either as a requirement or optionally to provide further textual information - this is denoted by the table
            name being in curly brackets ({}) Where a mask is used the numeric values are converted to decimal since it
            doesn't appear that SQLite supports hex values in form 0x Furthermore all convert or sysconv function calls
            in the SS2005 text can be removed as SQLite is loosely typed and doesn't discriminate between the different
            integer / text types. The source SS2005 SQL is included with an explanation of how the conversion to SQLite
            SQL was performed.
            </summary>
            <param name="view">The view to retrive</param>
            <throws>NotSupportedException if the view wasn't recognised.</throws>
            <returns>SQLite SQL</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromBackup.SQLLiteAssemblyLoad">
            <summary>
            SOC-1079: SQLite can only be loaded once :'( This means that if other SSMS add ins or SDK users use SQLite we
            have to use their version!
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Utilities.DiffHelper">
            <summary>
            A collection of string diff helper methods and classes.
            Providing string comparison functionality.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utilities.DiffHelper.CompareStrings(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Returns a representation of the side-by-side differences between two strings.</summary>
            <param name="string1">The first string to compare.</param>
            <param name="string2">The second string to compare.</param>
            <param name="ignoreWhiteSpace">True to ignore Leading/Trailing spaces, tabs etc.</param>
            <param name="caseSensitive">True if the comparison is case sensitive.</param>
            <param name="preserveNewLineCharacters">
            True if the new line characters should be preserved, false to remove
            them.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of the differences.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utilities.DiffHelper.CompareStrings(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean)">
            <summary>
            Returns a representation of the side-by-side differences between two lists of lines. Each string in the list
            must only contain a single line of text, optionally ending with a newline.
            </summary>
            <param name="lines1">The first list of lines to compare.</param>
            <param name="lines2">The second list of lines to compare.</param>
            <param name="ignoreWhiteSpace">True to ignore spaces, tabs etc.</param>
            <param name="caseSensitive">True if the comparison is case sensitive.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of the differences.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utilities.DiffHelper.BreakOnCRLF(System.String,System.Boolean)">
            <summary>Break on CRLF!</summary>
            <param name="text">string to be split.</param>
            <param name="preserveNewLineCharacters">
            True if the newline characters at the end of each line are to be preserved, false for them to be removed.
            </param>
            <returns>array of strings one for each line of text.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Utilities.DiffHelper.ComparisonString">
            <summary>A class representing a comparison between two single-line strings.</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utilities.DiffHelper.ComparisonString.#ctor(System.String,System.String)">
            <summary>Constructor.</summary>
            <param name="leftString">The string to appear on the left.</param>
            <param name="rightString">The string to appear on the right.</param>
            <remarks>This is not normally called externally.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utilities.DiffHelper.ComparisonString.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="leftString">The string to appear on the left.</param>
            <param name="rightString">The string to appear on the right.</param>
            <param name="ignoreWhiteSpace">True to ignore spaces, tabs etc.</param>
            <param name="caseSensitive">True if the comparison is case sensitive.</param>
            <remarks>This is not normally called externally</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Utilities.DiffHelper.ComparisonString.LeftString">
            <summary>The string that appears on the left.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Utilities.DiffHelper.ComparisonString.RightString">
            <summary>The string that appears on the right.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Utilities.DiffHelper.ComparisonString.Different">
            <summary>True if the two strings are different.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Utilities.DiffHelper.ComparisonString.LeftStringPresent">
            <summary>True if there is a string on the left.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Utilities.DiffHelper.ComparisonString.RightStringPresent">
            <summary>True if there is a string on the right.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Batch">
            <summary>A class representing a batch of SQL statements.</summary>
            <remarks>
            A batch is a set of SQL statements that can be executed on a SQL Server. The batch can contain more than one
            SQL statement, but this is not usually the case. A batch can contain more than one line (for example, the SQL
            to create a stored procedure might contain 100 lines).
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Batch.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="contents">The SQL statement that the batch contains.</param>
            <param name="repeating">The SQL statement that the batch contains.</param>
            <param name="marker">
            True if the SQL statement should not be executed but is merely a marker (eg a GO statement).
            </param>
            <param name="extraCRLF">True if an extra CRLF has been appended to the SQL statement.</param>
            <param name="cancelAllRepeating">True if want to cancel all repeat blocks.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Batch.ExtraCRLF">
            <summary><em>True</em> if an extra CRLF has been appended to the batch.</summary>
            <remarks>
            Sometimes the definitions of stored procedures, views, and so on, do not end in a CRLF. If executed in SQL
            Query Analyzer, an extra CRLF will be appended. If this flag is set, the extra CRLF will be stripped when the
            script is run using
            <see cref="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)" />.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Batch.Marker">
            <summary><em>True</em> if this batch is a separator (for example, a GO statement).</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Batch.Repeating">
            <summary>
            <em>True</em> if the contents of the batch must be executed every time a command is executed.
            </summary>
            <remarks>
            This is set to <em>true</em> if a variable declaration is made, because the variable must be declared at the
            beginning of every statement that is executed.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Batch.CancelAllRepeating">
            <summary>
            Removes all currently set <see cref="P:RedGate.SQLCompare.Engine.Batch.Repeating" /> properties if set to <em>true</em>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Batch.Contents">
            <summary>The contents of the batch.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.BlockExecutor">
            <summary>
            Runs the SQL code in an <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock" /> on the SQL Server. This action can be cancelled.
            </summary>
            <remarks>
            Use of this requires the exclude of the System.Data.Common and System.Data.SqlClient namespaces from capture
            if using Smart Assembly
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BlockExecutor.LastCommandText">
            <summary>
            The last SQL command to be executed from the
            <see cref="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)" /> method.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.CancelOperation">
            <summary>Cancels the current operation.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BlockExecutor.SkipRetryCancel">
            <summary>The event handler for status events.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.String,System.String)">
            <summary>
            <see cref="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.Data.IDbConnection)"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.GetLast500Errors">
            <summary>
            Returns the last 500 errors from the
            <see cref="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)" /> method.
            </summary>
            <returns>An array containing the last 500 errors.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.UpdateStatus(System.String,System.Int32)">
            <summary>
            Override this method to handle status updates when executing SQL blocks
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,RedGate.Shared.SQL.DBConnectionInformation)">
            <summary>
            <see cref="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.Data.IDbConnection)"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.Data.IDbConnection)">
            <summary>
            Runs a block of SQL code contained in an ExecutionBlock against the provided connection
            </summary>
            <remarks>
            Progress feedback is provided via <see cref="M:RedGate.SQLCompare.Engine.BlockExecutor.UpdateStatus(System.String,System.Int32)"/>
            <para>
            See <see cref="M:RedGate.SQLDataCompare.Engine.SqlProvider.GetMigrationSQL" /> and
            <see cref="M:RedGate.SQLCompare.Engine.BuildFromDifferences" /> for code samples.
            </para>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            <see cref="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.Data.IDbConnection)"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.Data.SqlClient.SqlConnection)">
            <summary>
            <see cref="M:RedGate.SQLCompare.Engine.BlockExecutor.ExecuteBlock(RedGate.SQLCompare.Engine.IExecutionBlock,System.Data.IDbConnection)" />
            </summary>
            <remarks>
            agnostic IDbConnection doesn't have the InfoMessage event for us to see the output of PRINT statements and
            suchlike, but SqlConnection does
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockExecutor.OnIgnoreRetryCancel(RedGate.SQLCompare.Engine.SkipRetryCancelEventArgs)">
            <summary>Queries if the execution should continue in the event of a failure</summary>
            <param name="e">The args which contain the last block to have failed</param>
            <returns>The result defaults to Cancel if no IgnoreRetryCancelHandler has been given</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.BlockLoader">
            <summary>Loads execution blocks from script files on disk.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockLoader.#ctor(System.String)">
            <summary>Creates a block loader.</summary>
            <param name="path">The path of the script file to load.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BlockLoader.Path">
            <summary>The path of the script file to load.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockLoader.Load">
            <summary>Perform the load.  Returns the execution block.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockLoader.UpdateStatus(System.String,System.Int32)">
            <summary>
            Override this method to handle status updates
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockLoader.LoadFromString(System.String)">
            <summary>
            Loads an execution block from the specified script.  Returns the execution block.
            </summary>
            <param name="script">The script to load - may contain multiple batches.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockLoader.CancelOperation">
            <summary>Cancels the load operation.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.BlockSaver">
            <summary>
            Saves BlockExecutors. This class writes the contents of an Execution block to disk. The caller can specify
            the file name and the type of encoding. Subtypes can override OnStatus to implement progress tracking.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockSaver.#ctor">
            <summary>
            Default constructor. You must set the FileName, EncodingType, and ExecutionBlock before the BlockSaver can be
            run.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockSaver.#ctor(System.String,RedGate.SQLCompare.Engine.IExecutionBlock)">
            <summary>Constructs a BlockSaver with all the parameters specified.</summary>
            <param name="fileName">The file name to use.</param>
            <param name="block">The block of SQL code to use.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockSaver.#ctor(System.String,RedGate.SQLCompare.Engine.IExecutionBlock,System.Boolean)">
            <summary>Constructs a BlockSaver with all the parameters specified.</summary>
            <param name="fileName">The file name to use.</param>
            <param name="block">The block of SQL code to use.</param>
            <param name="appendToFile">
            Whether the append the block to the file (if it exists) or whether to create a new file (and overwrite
            existing file)
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockSaver.#ctor(System.String,System.Text.Encoding,RedGate.SQLCompare.Engine.IExecutionBlock,System.Boolean)">
            <summary>Constructs a BlockSaver with all the parameters specified.</summary>
            <param name="fileName">The file name to use.</param>
            <param name="encoding">The Encoding object to be used</param>
            <param name="block">The block of SQL code to use.</param>
            <param name="appendToFile">
            Whether the append the block to the file (if it exists) or whether to create a new file (and overwrite
            existing file)
            </param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BlockSaver.ExecutionBlock">
            <summary>Sets the ExecutionBlock. You should call this only once.</summary>
            <exception cref="T:System.ArgumentException">
            If <em>set</em>, and ExecutionBlock has already been set, or <em>get</em>, and ExecutionBlock has not been
            set.
            </exception>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BlockSaver.AppendToFile">
            <summary>
            Whether the block is appended to the exisitng file (if it exists) or whether a new file is always written.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BlockSaver.FileName">
            <summary>Sets the FileName. You should call this only once.</summary>
            <exception cref="T:System.ArgumentException">
            If <em>set</em>, and FileName has already been set, or <em>get</em>, and FileName has not been set.
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockSaver.SaveToFile">
            <summary>
            Saves a copy of the ExecutionBlock to a text file with the given encoding. If the file exists, it will be
            overwritten. This function is not thread safe.
            </summary>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:RedGate.SQLCompare.Engine.BlockSaver.FileName" /> has not been set.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occured.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory location specified by <see cref="P:RedGate.SQLCompare.Engine.BlockSaver.FileName" /> is
            invalid.
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockSaver.CancelOperation">
            <summary>Cancels the operation</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BlockSaver.OnStatus(System.String,System.Int32)">
            <summary>
            Subclasses should override this and provide appropriate StatusEventHandler implementations
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExecutionBlock">
            <summary>A series of SQL batches to be executed.</summary>
            <remarks>
                <para>
                An ExecutionBlock contains a series of SQL batches that can be executed against a SQL database. It is
                essentially a wrapper over a text file with extra information about batch markers (GO statements) and
                statements that need to be repeated before a batch is run (such as variable declarations).
                </para>
                <para>
                An ExecutionBlock contains <see cref="T:RedGate.SQLCompare.Engine.Line" /> objects which in turn contain <see cref="M:RedGate.SQLCompare.Engine.ExecutionBlock.GetStream" />
                objects.
                </para>
                <para>
                The underlying stream can be accessed from
                <see cref="M:RedGate.SQLCompare.Engine.ExecutionBlock.GetStream"></see>
                </para>
                <para>
                ExecutionBlock objects are created by CompareEngine/DataCompareEngine There should be no need to create
                an ExecutionBlock manually.
                </para>
                <para>
                It is essential to call the <see cref="M:RedGate.SQLCompare.Engine.ExecutionBlock.Dispose" /> method of ExecutionBlock objects to ensure temporary
                files are deleted.
                </para>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.CheckDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException" /> if this instance has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.#ctor">
            <summary>Initializes a new instance of the ExecutionBlock class without compression</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initialises a new instance of the <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock" /> class with the specified name, compression
            and encoding
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.Name">
            <summary>Gets or sets the name of the block</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.Encoding">
            <summary>The encoding the execution block was written in</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.CharCount">
            <summary>The number of characters in the <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock" /></summary>
            <remarks>
            Note that this is not always the same as the number of bytes because of Unicode issues
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.ByteCount">
            <summary>Gets the underlying bytes position</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.BatchWritten">
            <summary>For internal use only.</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.MaxLineLength">
            <summary>The maximum length of a line.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.BatchCount">
            <summary>The number of batches.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.LineCount">
            <summary>The number of lines.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.IsDisposed">
            <summary>Returns a value indicating if this instance has been disposed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExecutionBlock.ObjectName">
            <summary>
            Gets and sets the object name to use for any thrown <see cref="T:System.ObjectDisposedException" />s. The default is
            the Name property of <see cref="M:System.Object.GetType" />.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.AddBatch(System.String)">
            <summary>Adds a batch of SQL code.</summary>
            <param name="batch">The SQL statement to add.</param>
            <exception cref="T:System.InvalidOperationException">This execution block is in read mode</exception>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.AddBatch(System.String,System.Boolean)">
            <summary>Adds a batch of SQL code to be repeated on every execution.</summary>
            <param name="batch">The SQL statement that the batch contains.</param>
            <param name="repeating">
            <em>True</em> if the batch is to be repeated every time it is executed (for example, for a variable
            declaration).
            </param>
            <exception cref="T:System.InvalidOperationException">This execution block is in read mode</exception>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.AddBatchMarker">
            <summary>Adds a default BatchMarker.</summary>
            <exception cref="T:System.InvalidOperationException">This execution block is in read mode</exception>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.AddBatchMarker(System.Boolean)">
            <summary>Adds a GO statement as a batch marker.</summary>
            <exception cref="T:System.InvalidOperationException">This execution block is in read mode</exception>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.GetLine(System.Int64)">
            <summary>Gets a line of SQL.</summary>
            <param name="index">The index of the line to get.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.GetBatch(System.Int32)">
            <summary>
            Marks the block as finished writing and efficiently retrieves the <see cref="T:RedGate.SQLCompare.Engine.Batch" /> at
            <paramref name="index" />
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is not valid</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.GetStream">
            <summary>Returns a stream to the underlying SQL text file.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.MustReturnNullForLegacyCompatibility">
            <summary>
            True when the execution block is still being written, so
            <see cref="M:RedGate.SQLCompare.Engine.ExecutionBlockExtensions.GetString(RedGate.SQLCompare.Engine.IExecutionBlock)" /> shouldn't return anything yet
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlock.StopWriting">
            <summary>Indicates that writing has finished.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExecutionBlockExtensions">
            <summary>
            Extension methods on <see cref="T:RedGate.SQLCompare.Engine.IExecutionBlock" /> to provide some of the API that <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock" /> has
            
            We probably just need to rethink the IExecutionBlock interface at some point to make it actually useful to consumers
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlockExtensions.ElementAt(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Batch},System.Int32)">
            <summary>
            Marks the block as finished writing and efficiently (for <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock" />) retrieves the
            <see cref="T:RedGate.SQLCompare.Engine.Batch" /> at <paramref name="index" />
            </summary>
            <remarks>
            In theory, more efficient than ElementAt which would iterate over each previous position.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is not valid</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlockExtensions.Count(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Batch})">
            <summary>
            Saves the (theoretical) rubbish performance of seeking through the stream to count for
            <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock" />
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExecutionBlockExtensions.GetString(RedGate.SQLCompare.Engine.IExecutionBlock)">
            <summary>
            Returns the contents of the ExecutionBlock. Do not call before the execution block has finished being written
            - behaviour is undefined and may change in future!
            </summary>
            <remarks>
            If the ExecutionBlock contains a lot of SQL code, this method can cause virtual memory problems; you are
            recommended to use <see cref="M:RedGate.SQLCompare.Engine.ExecutionBlock.GetStream" /> instead.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IBlockWriter">
            <summary>Represents a class that can store blocks of text strings.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IBlockWriter.AddBatch(System.String)">
            <summary>For internal use.</summary>
            <param name="batch"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IBlockWriter.AddBatchMarker">
            <summary>For internal use.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IBlockWriter.BatchWritten">
            <summary>For internal use.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IExecutionBlock">
            <summary>
            Allows reading an execution block. <seealso cref="T:RedGate.SQLCompare.Engine.BlockSaver" /> and <seealso cref="T:RedGate.SQLCompare.Engine.BlockExecutor" />.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExecutionBlock.Encoding">
            <summary>The encoding the execution block was written in</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IExecutionBlock.GetStream">
            <summary>
            Returns a stream to the underlying SQL text file and marks the block as finished writing.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IExtendedBlockWriter">
            <summary>
            Represents a class that can store blocks of text strings and provide access to arbitary lines within the
            resulting file stream.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExtendedBlockWriter.MaxLineLength">
            <summary>The maximum length of a line.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExtendedBlockWriter.LineCount">
            <summary>The number of lines.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExtendedBlockWriter.CharCount">
            <summary>The number of characters in the ExecutionBlock.</summary>
            <remarks>
            Note that this isn't necessarily the same as the number of bytes because of Unicode issues.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IExtendedBlockWriter.GetLine(System.Int64)">
            <summary>Get a line of SQL.</summary>
            <param name="lineIndex">The index of the line to get.</param>
            <returns>A line of SQL.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IExtendedBlockWriter.GetFileStream">
            <summary>Returns a stream to the underlying SQL text file.</summary>
            <returns>A stream.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Line">
            <summary>Represents a single line of SQL.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Line.#ctor(System.String,System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.Line" /> class.</summary>
            <param name="contents">The contents of the line.</param>
            <param name="startIndex"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Line.Contents">
            <summary>The contents of the line.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Line.StartIndex">
            <summary>For internal use.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.LineSplitting">
            <summary>
            Util methods for fast line splitting
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LineSplitting.FastNewlineSplit(System.String)">
             <remarks>
             Requirements: (see LineSplittingTests for more details)
             \n \r\n and \r should all be treated as one newline; \n\r should be treated as two
             The returned strings should keep the newline characters at the end rather than stripping them out
            
             input.Split('\n', '\r') is nice and fast but doesn't do the right thing for \r\n and loses the newline characters
            
             regex split on <![CDATA[[ (?<=(\n|\r|\r\n)) ]]> does the right thing but is an order of magnitude slower
            
             See StringSplitLinesBenchmarks for benchmark results and alternatives
             </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ScriptBatchSplitter">
            <summary>
            Provides an IEnumerable view of the batches in a (potentially) multi-batch script delimited by "GO"
            statements.
            </summary>
            <remarks>
            The returned strings do not contain batch delimiter statements such as "GO". Whitespace at the start or end
            of a block is removed (whitespace only blocks become empty). Empty blocks are not returned. The returned
            strings are not necessarily executable as a normal SQL Command as they may still start with comments which I
            believe is disallowed.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptBatchSplitter.#ctor(System.String)">
            <summary>Constructs a new batch splitter with the specified script</summary>
            <param name="script">Text of the script to split</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ParseException">
            <summary>
            Exception thrown in some cases when trying to parse SQL text into an <see cref="T:RedGate.SQLCompare.Engine.ExecutionBlock" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SkipRetryCancelEventHandler">
            <summary>
            Method that determines the behaviour of the BlockExecutor when an execute block fails
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SkipRetryCancelResult">
            <summary>
            Enumeration that specifies the behaviour when an execution block fails to execute
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SkipRetryCancelResult.Skip">
            <summary>Skips the current batch that caused the error and carries on</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SkipRetryCancelResult.Retry">
            <summary>Attempts to run the block as-is again</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SkipRetryCancelResult.Cancel">
            <summary>Fails the execution block (the default behaviour)</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SkipRetryCancelEventArgs">
            <summary>Event arguments for when an execution block fails to execute</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SkipRetryCancelEventArgs.#ctor(System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.SkipRetryCancelEventArgs" /> class with the specified exception
            and last command to have executed.
            </summary>
            <param name="innerException">The exception that caused all this.</param>
            <param name="lastCommandText">The last command that is currently executing operation.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SkipRetryCancelEventArgs.InnerException">
            <summary>The exception that caused all this.</summary>
            <remarks>This can be null.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SkipRetryCancelEventArgs.LastCommandText">
            <summary>The last command that is currently executing operation.</summary>
            <remarks>
            This should always contain the sql of the last batch of blocks that was attempted to be executed.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlBlockParser">
            <summary>
            Provides a view of a (potentially) multi-batch SQL Script as an IEnumerable of Blocks
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlBlockParser.StartsWithToken(System.Int32,System.String)">
            <returns>
            True iff m_Script.Substring(m_Position) = needle + x : where x is empty, whitespace, or the start of a
            comment
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlBlockParser.TryReadFreeText(RedGate.SQLCompare.Engine.SqlBlockParser.Block@)">
            <summary>Read all text up to the start of the next known block type</summary>
            <returns>True iff block has a non-zero length</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TooManyFailedAttemptsException">
            <summary>
            Exception thrown from <see cref="T:RedGate.SQLCompare.Engine.BlockExecutor" /> when the number of retries has exceed a preset limit
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.InvalidStateException">
            <summary>
            Exception thrown from Guard statements and Aver when eg Arguments are invalid
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.InvalidStateException.#ctor(System.String)">
            <summary>
            Message constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.InvalidStateException.#ctor(System.String,System.Object[])">
            <summary>
            Format String constructor
            </summary>
            <param name="formatString"></param>
            <param name="args"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.DirectoryUtils">
            <summary>
            Util methods for working with directories
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.DirectoryUtils.ForceDelete(System.String)">
            <summary>
            Delete a directory and its contents, if there are any readonly files or directories these are set to normal
            and removed
            </summary>
            <param name="directoryPath">the full path to the directory to be recursively removed</param>
            <returns>true if the directory was deleted, false if an exception was thrown</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.FileNameSanitizer">
            <summary>
            Sanitize a filename by removing invalid characters, and avoiding windows' reserved filenames.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.FileNameSanitizer.Sanitize(System.String)">
            <summary>
            Sanitize a file name by replacing invalid path chars and preserved device names
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.FileNameSanitizer.IsReservedDeviceName(System.String)">
            <summary>
            Returns whether a device name conflicts with a reserved windows directory name.
            </summary>
            <param name="name">The device name to validate.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.ITemporaryFileManager">
            <summary>
            A class to manange a set of temporary files. The temporary files are deleted when Dispose or the finalizer is
            called.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.ITemporaryFileManager.GetNewTempFile">
            <summary>
            Creates a new temporary file in <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" /> that will
            be deleted on disposal of the current instance.
            </summary>
            <returns>The full path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have permissions to create a file on
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.ITemporaryFileManager.GetNewTempFile(System.String)">
            <summary>
            Creates a new temporary file with the specified extension in
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />
            that will be deleted on disposal of the current instance.
            </summary>
            <param name="extension">The extension to apply to the file.</param>
            <returns>The full path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have permissions to create a file on
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.ITemporaryFileManager.GetNewTempFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the path to a new temporary file with the specified extension in the specified subdirectory of
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </summary>
            <param name="subDir">The subdirectory to create the temporary file under.</param>
            <param name="extension">The extension to apply to the file.</param>
            <param name="createFile">If <em>true</em>, the file is also created.</param>
            <param name="deleteOnDispose">
            If <em>true</em>, the file will be deleted on disposal of this instance if it exists.
            </param>
            <returns>The path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have permissions to create a file on
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified subdirectory <paramref name="subDir" /> does not
            exist.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.ITemporaryFileManager.GetNewTempDirectory">
            <summary>
            Creates a new temporary directory in <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" /> that
            will be deleted on disposal of the current instance.
            </summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the new directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have the necessary permissions to create a temporary
            directory.
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.ITemporaryFileManager.GetNewTempDirectory(System.Boolean)">
            <summary>
            Creates a new temporary directory in <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </summary>
            <param name="deleteOnDispose">
            If <em>true</em>, the directory and its contents will be recursively deleted on disposal of this instance, if
            it exists.
            </param>
            <returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the new directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have the necessary permissions to create a temporary
            directory.
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.ITemporaryFileManager.RegisterFileOrDirectory(System.String)">
            <summary>
            Add a file or directory to be managed by this <see cref="T:RedGate.SQLCompare.Engine.IO.TemporaryFileManager" /> instance.
            It will be deleted on disposal of this instance.
            </summary>
            <param name="path">The absolute path to be managed by this instance</param>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> does not exist as a file or directory</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.ITemporaryFileManager.DeleteFile(System.String)">
            <summary>Deletes the specified temporary file.</summary>
            <param name="filename">
            The path of the temporary file to delete. This must have been returned by a previous call to
            <em>GetNewTempFile</em>.
            </param>
            <returns>
            <em>True</em> if the file was successfully deleted. <em>False</em> if the file is currently in use.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="filename" /> is not registered as a temporary file.</exception>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.MirrorFile">
            <summary>Provides a revocable write interface to a file.</summary>
            <remarks>
            This class simply keeps a backup of the previous state of the file, and copies the backup over the existing
            file when garbage collected unless the Close method is called with <em>undo</em> set to <em>false</em>. The
            backup is then deleted from the filesystem.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.MirrorFile.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.IO.MirrorFile" /> class for the specified file using the specified
            encoding.
            </summary>
            <param name="filename">The file to open.</param>
            <param name="encoding">Text encoding used in the file.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IO.MirrorFile.StreamWriter">
            <summary>Gets the current open <see cref="P:RedGate.SQLCompare.Engine.IO.MirrorFile.StreamWriter" /> for the file.</summary>
            <exception cref="T:System.InvalidOperationException">
            The file has not been opened for writing (see
            <see cref="M:RedGate.SQLCompare.Engine.IO.MirrorFile.Open" />).
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.MirrorFile.Open">
            <summary>Opens the file specified, making a backup if the file exists already.</summary>
            <returns>
            A <see cref="P:RedGate.SQLCompare.Engine.IO.MirrorFile.StreamWriter" /> that writes to the file, set at the start of the file.
            </returns>
            <exception cref="T:System.ApplicationException">The file is read-only.</exception>
            <exception cref="T:System.IO.IOException">The backup file already exists and is in use, or another I/O error occured.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You do not have the necessary read/write permissions required.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.MirrorFile.Close(System.Boolean)">
            <summary>Closes the StreamWriter and commits or undoes any changes made as needed.</summary>
            <param name="undo">
            If <em>true</em>, the previous file contents will be copied over the current file. If <em>false</em>, the
            backup file will be deleted.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The file has not been opened for writing (see
            <see cref="M:RedGate.SQLCompare.Engine.IO.MirrorFile.Open" />).
            </exception>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.PathRelativizer">
            <summary>Apologies future person, couldn't think of a better name </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.PathRelativizer.GetRelativePath(System.String,RedGate.SQLCompare.Engine.IO.PathRelativizer.ItemType,System.String,RedGate.SQLCompare.Engine.IO.PathRelativizer.ItemType)">
            <summary>
            A nicer wrapper around PathRelativePathTo
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.PathValidator">
            <summary>
            Path Validation methods from SHU
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.PathValidator.IsPathWellFormed(System.String)">
            <summary>
            Returns whether the specified file or directory path is well formed.
            </summary>
            <param name="path">The file or directory path to validate.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.PathValidator.GetPathInvalidCharacters(System.String)">
            <summary>
            Returns the characters within the specified file or directory path that are invalid.
            </summary>
            <param name="path">The file or directory path to validate.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.DisposableBase">
            <summary>
            Base class for classes that previously relied on inheriting from SHU DisposableBase
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IO.DisposableBase.IsDisposed">
            <summary>Returns a value indicating if this instance has been disposed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IO.DisposableBase.ObjectName">
            <summary>
            Gets and sets the object name to use for any thrown <see cref="T:System.ObjectDisposedException" />s. The default is
            the Name property of <see cref="M:System.Object.GetType" />.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.DisposableBase.Dispose(System.Boolean)">
            <summary>Method called when disposing or finalizing.</summary>
            <param name="disposing">
            If <em>true</em>, this was called by the <see cref="M:RedGate.SQLCompare.Engine.IO.DisposableBase.Dispose" /> method, and so managed and unmanaged
            resources should be cleaned up. If <em>false</em>, this was called by the finalizer, so only unmanaged
            resources should be cleaned up.
            </param>
            <remarks>
            As a guide, all methods of a class inheriting <see cref="T:System.IDisposable" /> should check if it is disposed when
            every non-private method is called using the provided method <see cref="M:RedGate.SQLCompare.Engine.IO.DisposableBase.CheckDisposed" />.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.DisposableBase.CheckDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException" /> if this instance has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.TempDir">
            <summary>
            A temporary directory that will get cleaned up when disposed or GC'd
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TempDir.#ctor">
            <summary>
            Creates a new folder on disk
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TempDir.#ctor(System.String)">
            <summary>
            References an already-existing directory
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IO.TemporaryFileManager">
            <summary>
            A class to manange a set of temporary files. The temporary files are deleted when Dispose or the finalizer is
            called.
            </summary>
            <remarks>
            Each TemporaryFileManager can have a pre- and postfix applied to each file/directory.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath">
            <summary>Returns the default temporary directory used for all temporary files.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.RegisterFileOrDirectory(System.String)">
            <summary>
            Add a file or directory to be managed by this <see cref="T:RedGate.SQLCompare.Engine.IO.TemporaryFileManager" /> instance. It will be
            deleted on disposal of this instance.
            </summary>
            <param name="path">The absolute path to be managed by this instance</param>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> does not exist as a file or directory</exception>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DEFAULT_EXTENSION">
            <summary>
            Temporary files will be created with this extension unless specified otherwise
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GenerateName">
            <summary>
            Generates a new file or directory name with the default extension. This will be unmanaged by any
            <see cref="T:RedGate.SQLCompare.Engine.IO.TemporaryFileManager" /> instance.
            </summary>
            <returns>A new temporary file or directory name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GenerateName(System.String,System.String)">
            <summary>
            Generates a new file or directory name with the specified prefix and extension. This will be unmanaged by any
            <see cref="T:RedGate.SQLCompare.Engine.IO.TemporaryFileManager" /> instance.
            </summary>
            <param name="prefix">The prefix to apply to the name.</param>
            <param name="extension">
            The extension to apply to the name, without the dot. Can be null or empty for no extension.
            </param>
            <returns>A new temporary file or directory name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.IO.TemporaryFileManager" /> class with an empty prefix.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.IO.TemporaryFileManager" /> class with the specified prefix.
            </summary>
            <param name="prefix">The prefix to apply to all temporary file and directory names.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.SQLCompare.Engine.IO.TemporaryFileManager" /> class with the specified prefix and
            default extension.
            </summary>
            <param name="prefix">The prefix to apply to all temporary file and directory names.</param>
            <param name="defaultExtension">
            The default extension for all new temporary files (can be overridden
            per-file).
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GenerateUniqueFilePath(System.String,System.String)">
            <summary>
            Generates a unique filename within the specified subdirectory of <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </summary>
            <param name="parentDir">
            The subdirectory under which to create the file, relative to the <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </param>
            <param name="extension">The extension to apply to the filename, without the dot.</param>
            <returns>The full path to the temporary file.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GenerateUniqueDirectoryPath">
            <summary>
            Generates a unique directory name within the specified subdirectory of <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />
            </summary>
            <returns>The full path to the directory.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GetNewTempFile">
            <summary>
            Creates a new temporary file in <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" /> that will be deleted on disposal of the
            current instance.
            </summary>
            <returns>The full path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have permissions to create a file on
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GetNewTempFile(System.String)">
            <summary>
            Creates a new temporary file with the specified extension in <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />
            that will be deleted on disposal of the current instance.
            </summary>
            <param name="extension">The extension to apply to the file.</param>
            <returns>The full path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have permissions to create a file on
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GetNewTempFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the path to a new temporary file with the specified extension in the specified subdirectory of
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </summary>
            <param name="subDir">The subdirectory to create the temporary file under.</param>
            <param name="extension">The extension to apply to the file.</param>
            <param name="createFile">If <em>true</em>, the file is also created.</param>
            <param name="deleteOnDispose">
            If <em>true</em>, the file will be deleted on disposal of this instance if it exists.
            </param>
            <returns>The path of the temporary file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have permissions to create a file on
            <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified subdirectory <paramref name="subDir" /> does not
            exist.
            </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GetNewTempDirectory">
            <summary>
            Creates a new temporary directory in <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" /> that will be deleted on disposal of the
            current instance.
            </summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the new directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have the necessary permissions to create a temporary
            directory.
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.GetNewTempDirectory(System.Boolean)">
            <summary>Creates a new temporary directory in <see cref="P:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DefaultTempPath" />.</summary>
            <param name="deleteOnDispose">
            If <em>true</em>, the directory and its contents will be recursively deleted on disposal of this instance, if
            it exists.
            </param>
            <returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the new directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            You do not have the necessary permissions to create a temporary
            directory.
            </exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IO.TemporaryFileManager.DeleteFile(System.String)">
            <summary>
            Deletes the specified temporary file. If the file is readonly this is set to normal and the file is deleted
            </summary>
            <param name="filename">
            The path of the temporary file to delete. This must have been returned by a previous call to
            <em>GetNewTempFile</em>.
            </param>
            <returns>
            <em>True</em> if the file was successfully deleted. <em>False</em> if the file is currently in use.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="filename" /> is not registered as a temporary file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">You do not have write permission to the temporary file.</exception>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Mappings.SqlCompareUserMappings">
            <summary>
            Maps users between databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.SqlCompareUserMappings.Join(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.User)">
            <summary>
            Creates a mapping between two users and adds it to the collection.
            At least one user must not be null.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings.SqlCompareUserMappings.CreateMappings(RedGate.SQLCompare.Engine.Users,RedGate.SQLCompare.Engine.Users)">
            <summary>
            Applies default mappings based on the users in two databases.
            </summary>
            <remarks>
            (1) A user will be mapped to a user with the same full name, if one exists.
            (2) A user will be mapped to a user with the same name without the domain, if neither was matched in step 1.
            (3) Remaining users are unmapped.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MigrationBlocks.ConjunctionDifferenceFilterer">
            <summary>
            Performs a boolean AND of two <see cref="T:RedGate.Shared.ComparisonInterfaces.Deployment.IDifferenceFilterer"/>s
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MigrationBlocks.ExcludeUnselectedDifferenceFilterer">
            <summary>
            Includes all differences which have not been unselected
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MigrationBlocks.ExcludeUnselectedDifferenceFilterer.ShouldIncludeInDeployment(RedGate.Shared.ComparisonInterfaces.IDatabaseObjectDifference{RedGate.Shared.ComparisonInterfaces.TSql.ITSqlObject})">
            <remarks>
            It's not enough to say that an object is explicitly included, because there may not be a difference.
            For example, I might have created a proc, created a migration which depends on that proc and then dropped that proc.
            The proc still needs be deployed, but there wouldn't be a difference to include.
            ExcludeUnselectedDifferenceFiltererTests.ADifferenceNotInTheListShouldBeDeployed covers this.
            As such, we're saying deploy everything except the things the user has specifically excluded.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDataSource">
            <summary>
            Represents a thing that can be registered by Compare to make a <see cref="T:RedGate.SQLCompare.Engine.Database"/>
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDataSource.ServerName">
            <summary>
            Gets or sets the data source server name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDataSource.DatabaseName">
            <summary>
            Gets or sets the data source database name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDataSource.IsWriteable">
            <summary>
            Gets a value indicating if this data source can be written to.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDataSource.IsDifferentSource(RedGate.SQLCompare.Engine.IDataSource)">
            <summary>Compares this instance with the specified <see cref="T:RedGate.SQLCompare.Engine.IDataSource"/>.</summary>
            <param name="newDataSource">The data source to compare with.</param>
            <returns><em>True</em> if the <see cref="T:RedGate.SQLCompare.Engine.IDataSource"/>s are different.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDataSource.Clone">
            <summary>
            Creates a clone of this <see cref="T:RedGate.SQLCompare.Engine.IDataSource"/>.
            </summary>
            <returns>A clone of this <see cref="T:RedGate.SQLCompare.Engine.IDataSource"/>.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseObjectCollection`1">
            <summary>
            A collection of database objects that doesn't know how to serialize itself to a SQL Compare snapshot.
            Compare with <seealso cref="T:RedGate.SQLCompare.Engine.SerializableDatabaseObjectCollection`1"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollection`1.#ctor(System.Boolean)">
            <summary>
            Create collection with specific case-sensitivity for key lookup
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollection`1.#ctor(System.Boolean,System.Int32)">
            <summary>
            Create collection with specific case-sensitivity for key lookup and with space allocated for <paramref name="count"/> values
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollection`1.GetObjectNameForException(`0)">
            <summary>
            Get a nicely-formatted object name to display to the user if the <see cref="M:RedGate.SQLCompare.Engine.DatabaseObjectCollection`1.Add(`0)"/> method throws an argument exception
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectCollection`1.Item(System.String,System.String)">
            <summary>Returns a database object given its owner and name.</summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollection`1.GetKey(`0)">
            <summary>For internal use.</summary>
            <param name="value">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ScriptRegistrationInformation">
            <summary>
            Holds the information needed in order to perform a registration of a scripts folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptRegistrationInformation.#ctor(RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new instance.
            </summary>
            <param name="database">The database to be populated.</param>
            <param name="dbInfo">The ScriptDatabaseInformation to be used during the register.</param>
            <param name="options">The options to use for the register.</param>
            <param name="filesToUse">A sequence of files to populate from, or <c>null</c> to default to everything in the scripts folder.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ScriptRegistrationInformationExtensions">
            <summary>
            Extension methods for <see cref="T:RedGate.SQLCompare.Engine.ScriptRegistrationInformation"/>.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptRegistrationInformationExtensions.GetOriginalDatabase(RedGate.SQLCompare.Engine.ScriptRegistrationInformation)">
            <summary>
            This is here purely to contain this horrible hack to this class.
            Some code doesn't use the <see cref="T:RedGate.SQLCompare.Engine.IDatabase"/>, but instead uses <see cref="T:RedGate.SQLCompare.Engine.Database"/> directly.
            As a result, that code would need to cast the value returned by <see cref="T:RedGate.SQLCompare.Engine.Database"/> to the actual type
            in order to use certain methods on it. By having this method, that horrible logic is contained in this class.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.RemoteDataArchiveState">
            <summary>
            The Stretch Database state of a table
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.RemoteDataArchiveState.Disabled">
            <summary>
            REMOTE_DATA_ARCHIVE is disabled
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.RemoteDataArchiveState.Enabled">
            <summary>
            REMOTE_DATA_ARCHIVE is enabled with MIGRATION_STATE = PAUSED (so stretch data can be queried but is not being actively archived)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.RemoteDataArchiveState.EnabledWithMigration">
            <summary>
            REMOTE_DATA_ARCHIVE is enabled with MIGRATION_STATE = OUTBOUND (so stretch data is being actively archived)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IndexWarningsCalculator.TryAddOrWarnAboutIndex(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Add index <paramref name="index"/> to the list of indexes to create if possible; otherwise add warnings saying why not
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaBindingsToUnbindCalculator.DropSchemaBindings(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.Options)">
            <summary>
            for a specific table it adds the dependent schema bound functions and views to the SchemaBindingsToUnbind
            queue
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaBindingsToUnbindCalculator.DropSchemaBindings(RedGate.SQLCompare.Engine.Function,RedGate.SQLCompare.Engine.Options)">
            <summary>
            For a specific function it adds the dependent schema bound functions to the SchemaBindingsToUnbind queue
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblyChangesCalculator.PrepareAssemblyForDropOrRebuild(RedGate.SQLCompare.Engine.ClrAssembly,RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Adds an assembly to the drop queue, and if needed it adds all its dependants as well.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesCollector.AddDependency(RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Difference,System.Boolean)">
            <summary>
            Adds dependencies to the dependency collection.
            If setDependency is true it sets the dependecy difference (B where A depends on B) to be selected as a dependency.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesCollector.AddDependency``1(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{RedGate.SQLCompare.Engine.Difference}},``0,RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Add the specified dependency to the <paramref name="dependencies" /> collection for later processing.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DependenciesResultCalculator">
            <summary>
            Various methods for calculating dependencies between different objects. It appears that these results are
            never used internally; instead they are intended for CompareUI/SOC/etc to look at
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForDBSysObjects(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Sets the dependency for objects whose dependency is stored in the main dependency matrix. These are mainly
            objects that are sysobjects identifyables.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetTypeDependencyForTablesAndFunctions(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Make sure that all the user defined types that tables, functions, sprocs reference are included. This must be
            done after functions and tables are selected as dependencies.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyToUDTs(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>Make sure that tables are marked as depending on CLR UDTs</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForUDTs(RedGate.SQLCompare.Engine.Differences,System.Boolean,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Make sure that all user defined types of assemblies that are selected as dependencies are also selected as
            dependencies.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForMessageTypes(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all xml schemacollections are marked as dependents for message types! Note, that this must be
            called after the message types are selected for dependencies!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForPartitionSchemes(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all Partition Functions are marked as dependents for partition schemes, and then all partition
            schemes are marked as dependents for partitions
            </summary>
            <remarks>
            This depends on the ordering of differences in that tables/views come before partition functions (which come
            before partition schemes and should know what schemes depend on them) so that all the dependencies can be set
            in one pass
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForPartitionFunctions(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Make sure that all tables are marked as dependents for partition functions (through the schemes)! This must
            be run after all the partition functions are selected as dependencies.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForToAssemblies(RedGate.SQLCompare.Engine.Differences,System.Boolean,System.Boolean)">
            <summary>
            Make sure that all assemblies are marked as dependents for CLR UDTs, storedProcedures, ....! Note, that this
            must be called after UDTs are selected for dependencies!
            </summary>
            <returns>True, if an assembly has been added as a new dependency.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForContracts(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all message types are marked as dependents for contracts! Note, that this must be called after
            the contracts are selected for dependencies!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForQueues(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all stored procedures are marked as dependents for queues! Note, that this must be called
            after queues are selected for dependencies! :(
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForServices(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that all contracts and queues are marked as dependents for services! Note, that this must be called
            after services are selected for dependencies!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForEventNotifications(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Make sure that the relevant service and queue are marked as dependents for event notifications. Note, that
            this must be called after event notifications are selected for dependencies!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.AddDependentViewsAndStoredProcedures(System.Collections.Generic.IEnumerable{System.Int32},RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.DifferencesByID)">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency. This considers views and
            stored procedures only!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.AddDependentViewsAndSynonyms(System.Collections.Generic.IEnumerable{System.Int32},RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.DifferencesByID)">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency. This considers views and
            synonyms only!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.AddDependentsForTableRename(System.Collections.Generic.IEnumerable{System.Int32},RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.DifferencesByID)">
            <summary>Adds all the dependents that will be affected by a table rename</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.CalculateWorkSetDependencyForUsers(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder)">
            <summary>
            Sets user dependencies. This should be at the end, after other dependencies have been selected.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesResultCalculator.AddDependencies(System.Collections.Generic.IEnumerable{System.Int32},RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.DifferencesByID)">
            <summary>
            Marks differences in lookup identified by the idsToAdd list as selectedAsDependency.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserChangesCalculator.CalculateWork(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Calculate work required for changes between these two users
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemeChangesCalculator.CalculateWork(RedGate.SQLCompare.Engine.PartitionScheme,RedGate.SQLCompare.Engine.PartitionScheme,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            This should only be used if dependencies are not followed! If dependencies are included, then the only way we
            modify partitions schemes is through the partition functions.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypeChangesCalculator.PrepareMessageTypeForDropOrRebuild(RedGate.SQLCompare.Engine.MessageType,RedGate.SQLCompare.Engine.MessageType,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Adds a message type to the drop queue, and if needed it adds all its dependants as well.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctionChangesCalculator.CalculateWork(RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>This is used only when nodependencies are selected!</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.CalculateWork(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareFieldMappings,System.Boolean,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Try to figure out all the work required to deploy table to targetTable
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.AlterRemoteDataArchiveStateOrWarn(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.RemoteDataArchiveState,RedGate.SQLCompare.Engine.RemoteDataArchiveState,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <returns>true iff the table's REMOTE_DATA_ARCHIVE state should be altered</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.CalculateWorkCheckMustRebuildForRemoteDataArchiveRemoval(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            When removing REMOTE_DATA_ARCHIVE from a table, we need to do a table rebuild to pull all the data from the
            remote server: https://msdn.microsoft.com/en-US/library/dn935010.aspx
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.CalculateWorkTableCheckComputedRebuilds(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Fields,System.Boolean)">
            <summary>
            Rebuild fields that are computed and reference a field that needs to be dropped/rebuilt.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.CalculateWorkTableCheckMustRebuildForDefaultsAndNulls(RedGate.SQLCompare.Engine.Table,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.IField})">
            <summary>
            If it can't take nulls and doesn't have a default constraint on it then we need to rebuild the table and warn
            the user Need to rebuild even if a default (sp_bindefault) is bound to it
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.PrepareTableForDrop(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Table is marked for drop, DropSchemaBindings, FullTextDrops, FiledsForDrop</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.AddConstraintsAndIndexes(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Adds triggers and indexes to the queues in case of a table create or a table rebuild.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.IsProbablyFilestreamUniqueIndex(RedGate.SQLCompare.Engine.Deployment.ChangeCalculation.FilestreamIndexCalculator,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Return true if <paramref name="index" /> is the most likely candidate for a unique index that a filestream index in the source table could depend on
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TableChangesCalculator.CalculateNecessaryWorkForRebuild(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>for table rebuilds</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ViewChangesCalculator.CalculateWork(RedGate.SQLCompare.Engine.View,RedGate.SQLCompare.Engine.View,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Try to figure out all the work required to deploy view to targetView
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ViewChangesCalculator.ForceDropCreate(System.Object,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Options)">
            <summary>Checks if a DROP and CREATE should be generated instead of an ALTER</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DesignTimeToolkitLicenceProvider">
            <summary>
            Gets licenses for the toolkit (SDK).
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DesignTimeToolkitLicenceProvider.GetDesignTimeLicence(System.Type,System.Object,System.Boolean)">
            <summary>
            Get an SDK license.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedConcurrentCollection`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <param name="orderedKeys">The value added for each key will be returned in the order of these keys</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedConcurrentCollection`2.Add(`0,`1)">
            <summary>
            Overwrites any existing value and notifies any threads waiting
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedConcurrentCollection`2.GetConsumingEnumerable">
            <summary>
            Only one consumer thread should call this method, it is not thread safe.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedConcurrentCollection`2.WaitToRemove(`0)">
            <summary>
            Removes the key when it's added and sets the out parameter to the corresponding value
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedScriptFileParser">
            <summary>
            Provides a consistent parsing order to prevent nondeterminism in Compare.
            Computes a bounded number of ParseResults ahead of what has been consumed to avoid wasting memory (and causing GCs, which slow things down).
            The implementation of this class including the values of BoundedCapacity and DegreeOfParallelism are driven by results of Tests.Performance.RegistrationTest.RegisterScriptsFolderWithoutCache
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedScriptFileParser.BoundedCapacity">
            <summary>
            Maximum number of unconsumed results.
            Be sure to look at the average AND standard deviation of performance RegistrationTests when changing this. Setting it too high will cause more GCs so worse performance.
            </summary>
            <remarks>
            On a 4 logical core machine, 19 runs were
            4: avg=4975ms, sd=162ms
            5: avg=4536ms, sd=111ms
            6: avg=4628ms, sd=81ms
            7: avg=4751ms, sd=140ms
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedScriptFileParser.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.ConcurrentScriptFileParser,System.Int32,System.Threading.CancellationToken)">
            <param name="scriptFileParser"></param>
            <param name="degreeOfParallelism">Increasing this will speed up parsing but also increase the effect of GCs hence increasing variation in parse time</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedScriptFileParser.Parse(System.Collections.Generic.List{System.IO.FileInfo})">
            <summary>
            This is what we wanted to write, but it was 10-20% slower according to RegistrationTests
            <code>
             return sortedFiles.AsParallel().AsOrdered()
                .WithCancellation(m_CancellationToken)
                .WithMergeOptions(ParallelMergeOptions.NotBuffered)
                .Select(f => m_ScriptFileParser.Parse(f));
            </code>
            I believe the  partitioning by ParallelQuery results in lots of large ParseResults hanging around in memory,
            and thus lots of GCs. This implementation throttles the input to avoid that effect.
            We should review this solution when adding to the database model is thread safe and has no ordering constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.OrderedScriptFileParser.StartParsing">
            <summary>
            Parse on multiple threads since it's slow and CPU intensive
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromScriptFilesPopulator.Populate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Populates a model from files within a script folder.
            </summary>
            <remarks>
            <para>
            If <paramref name="filesToUse"/> is <c>null</c>, all of the files
            contained in the script folder used when creating this instance will be used.
            </para>
            <para>
            If <paramref name="filesToUse"/> is not <c>null</c>, the files supplied
            via <paramref name="filesToUse"/> will be used.
            </para>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromScriptFilesPopulator.Freeze">
            <summary>
            Prevents any further modifications to the model.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.LazyFileContents">
            <summary>
            Provides an abstraction over a file's contents so that it is not unnecessarily loaded.
            This is useful in:
            IO bound tasks (such as registering a scripts folder) since it reduces disk reads.
            Memory bound tasks (such as registering a scripts folder in a 32-bit process) since it reduces unnecessarily allocations.
            CPU bound tasks (such as registering a scripts folder with an SSD) since reduced memory pressure means fewer garbage collections.
            </summary>
            <remarks>
            By forcing access to the string through these methods it should be more obvious in a profiler whether it's worth optimizing this further.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.IObjectLookup">
            <summary>
            Interface for looking up object names by their ID and vice versa We have two implementations of this
            interface: <see cref="T:RedGate.SQLCompare.Engine.ReadFromFolder.ObjectInformationFromDatabase" />
            and <see cref="T:RedGate.SQLCompare.Engine.ReadFromFolder.ObjectInformationFromDictionary" />. These two implementations provide slightly different
            tradeoffs, which work well for script and live registration respectively.
            <see cref="T:RedGate.SQLCompare.Engine.ReadFromFolder.ObjectInformationFromDatabase" /> uses the database as the one true source of information. This
            works better for script folders since objects in the database probably have well-qualified names and are in a
            consistent state
            <see cref="T:RedGate.SQLCompare.Engine.ReadFromFolder.ObjectInformationFromDictionary" /> stores information in a dictionary. This works well for
            live/backup registration since one of the first things we do is run a DMV query to fetch a big list of object
            names and IDs. This ends up meaning that live registration is built on the assumption that we can always know
            the ID of any object name, while script registration processes one file at a time, and so has more
            post-processing steps to fix up the model after all files have been read.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.PermissionActionFieldsPair.#ctor(RedGate.SQLCompare.Engine.PermissionLevel)">
            <summary>
            Construct with permission level, eg. SELECT, UPDATE, REFERENCE
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.PermissionActionFieldsPair.#ctor(RedGate.SQLCompare.Engine.PermissionLevel,RedGate.SQLCompare.Engine.Fields)">
            <summary>
            Construct both permission level and fields
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.PermissionActionFieldsPair.Level">
            <summary>
            Level property getter 
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.PermissionActionFieldsPair.Fields">
            <summary>
            Fields property getter
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.IWriteOnlyPostProcessing">
            <summary>
            Saves various details (that we can't use until we've seen all the objects in a scripts folder)
            to fix up at the end
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.IWriteOnlyPostProcessing.AddRoleMembersToPostprocess(RedGate.SQLCompare.Engine.Registration.ReadFromFolder.AddRoleMemberScriptInfo)">
            <summary>
            Add information about roles that are having members added to a post-processing collection.
            These members will be added after the rest of the objects in the script have been registered.
            This allows members to be added even if the member-adding statement is encountered before
            the statement creating the member.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.IWriteOnlyPostProcessing.AddXmlCollectionNameForField(RedGate.SQLCompare.Engine.Field,System.String)">
            <summary>
            Save the name of the XML Schema Collection attached to this field
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.IWriteOnlyPostProcessing.AddPrimaryKeyWithUnspecifiedClustering(RedGate.SQLCompare.Engine.RelationalIndex)">
            <summary>
            Save this primary key because neither CLUSTERED nor NONCLUSTERED was
            specified in the script.  The default clusteredness depends on other
            indexes in the table, so has to be fixed up later.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.IWriteOnlyPostProcessing.AddTablePartitionSchemeToPostProcess(RedGate.SQLCompare.Engine.Table,System.String)">
            <summary>
            Record <paramref name="partitionSchemeName"/> as the partition scheme for <paramref name="table"/>
            so that we can link them up once both have been parsed.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformationExtensions">
            <summary>
            Extension methods for the ScriptDatabaseInformation class Add things here that should be added to the
            ScriptDatabaseInformation class but should not be serialised
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformationExtensions.GetSqlVersionDetails(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation)">
            <summary>
            Gets <see cref="T:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.SqlVersion"/> details based on a database information xml file's contents
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ConcurrentScriptFileParser">
            <summary>
            Thread safe when parsing files in parallel.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ThrottledWorkQueue`1">
            <summary>
            Like a blocking collection but has an explicit <see cref="M:RedGate.SQLCompare.Engine.ReadFromFolder.ThrottledWorkQueue`1.WorkItemComplete"/> method which must be called for each object removed.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ThrottledWorkQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Threading.CancellationToken)">
            <param name="values"></param>
            <param name="boundedCapacity">{Number of values ever returned} minus {number of times <see cref="M:RedGate.SQLCompare.Engine.ReadFromFolder.ThrottledWorkQueue`1.WorkItemComplete"/> called} less than or equal to <paramref name="boundedCapacity"/>  </param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.CacheResult.FromSnapshot">
            <summary>
            Creates a cache result identifying that the scripts folder was incrementally registered
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseObjectProperty.FromXml(System.Xml.XmlNode)">
            <remarks>Handles nulls, never returns null.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.IAssemblyMetadata.PermissionSet">
            <summary>The code access permission for the CLR assembly.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.IAssemblyMetadata.CLRName">
            <summary>The CLR name of the assembly.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.IAssemblyMetadata.Owner">
            <summary>The owner of the assembly.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.DatabaseProjectFile">
            <summary>Represents a SQL Server Data Tools project file</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.DataBaseProjectItem.#ctor(System.String,System.String,RedGate.SQLCompare.Engine.IO.PathRelativizer.ItemType)">
            <summary>
            Construct from a root folder and relative path
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.DataBaseProjectItem.#ctor(System.String,System.IO.FileSystemInfo,RedGate.SQLCompare.Engine.IO.PathRelativizer.ItemType)">
            <summary>
            Construct from a root folder and absolute path
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.DataBaseProjectItem.Equals(RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.DataBaseProjectItem)">
            <remarks>["c:\folder", "file.sql"] != ["c:\", "folder\file.sql"]</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.FileBasedProject.GetLegacyMsBuildCompatibleFile(System.IO.FileInfo)">
            <summary>
            This method totally breaks OO as this class currently is supposed to deal with more than SSDT. This file
            originally came from SQL Connect where there was two subclasses of FileBasedProject. As SQL Connect is dying,
            we should soon be able to remove the FileBasedSsdtProject and just have a single class. Then this won't be
            breaking OO.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.FileBasedProject.GetItemGroupForType(System.String)">
            <returns>
            The first item group containing an object of groupType, or a new item group if no such group exists.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.DataToolsProject.ParseOrDefault``1(System.String)">
            <returns>The parsed value for the enum, or the default if it can't be parsed.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.DataToolsProject.TryGetSqlFilesFromSqlProj(System.String,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.IDatabaseProjectFile}@)">
            <summary>Reads the sqlproj in the given folder</summary>
            <returns>A list of sql files marked as build</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.DataToolsProject.TryGetFoldersFromSqlProj(System.String,System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.IDatabaseProjectFolder}@)">
            <summary>Reads the sqlproj in the given folder</summary>
            <returns>A list of folders marked as Folder Include</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.DataPreservingXmlStringBuilder">
            <summary>Takes an existing document and adds merges in data written to it.</summary>
            <remarks>
            Works similarly to a normal XmlWriter, except in the case of writing lists (i.e. any two same typed nodes in
            the same scope). See WriteListStartElement for more details.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DataPreservingXmlStringBuilder.#ctor(System.Xml.XmlDocument)">
            <param name="persistedXml">Will be mutated to match the new document.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DataPreservingXmlStringBuilder.WriteStartElement(System.String)">
            <summary>
            Ensure a start element called nodeName exists as a child of the current node. Replaces a node of existing
            name if it is not within a list (see WriteListStartElement).
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DataPreservingXmlStringBuilder.WriteStartElementInner(System.String,System.Boolean,System.Boolean)">
            <summary>
            Ensure a start element called nodeName exists as a child of the current node. Replaces a node of existing
            name if it is not within a list (see WriteListStartElement)
            </summary>
            <param name="nodeName">The name of the element.</param>
            <param name="replaceExistingData">
            If true, the first existing child called nodeName will become the current element. If there is no such
            element, a new one will be created.
            </param>
            <param name="removeExistingData">If true, any existing child elements called nodeName will be removed.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DataPreservingXmlStringBuilder.WriteListStartElement(System.String)">
            <summary>
            Removes any existing nodes of the given name. All elements within the list will be set not to replace each
            other even if they have the same element name.
            </summary>
            <remarks>Lists cannot be nested in this implementation.</remarks>
            <param name="nodeName">Name of the started element</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DataPreservingXmlStringBuilder.ToString">
            <summary>Returns unformatted Xml string built.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DataPreservingXmlStringBuilder.SaveTo(System.Xml.XmlWriter)">
            <summary>Save the Xml string built.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors">
            <summary>
            A set of flags indicating warnings and errors that can occur while setting up a read from folder data source
            </summary>
            <remarks>
            Note that these flags include both errors and warnings. In order to check only for errors, perform a logical
            AND with the Error mask.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.OK">
            <summary>Indicates that there are no errors or warnings</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.Error">
            <summary>Mask of all the possible errors that can occur</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.PathNotFound">
            <summary>
            Indicates that the path to the folder could not be found, so the database information file could not be
            loaded
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.Unauthorized">
            <summary>
            Indicates that an unauthorized access exception occurred while trying to load the information file
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.NotSupported">
            <summary>
            Indicates that a NotSupportedException occurred while trying to load the information file
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.IOException">
            <summary>
            Indicates that an IOException occurred while trying to load the information file
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.NeedsRefresh">
            <summary>
            Indicates that RefreshFromPath() needs to be called on this object to make it valid
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.Warnings">
            <summary>Mask of all the possible warnings that can occur</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.UnsupportedSqlServerVersion">
            <summary>
            Indicates that the database information file sets an unsupported SQL server version (so we picked SQL Server
            2000 arbitrarily)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.DatabaseInformationBadFormat">
            <summary>
            Indicates that the database information file has a bad format (not XML or malformed XML), so we're using the
            defaults
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.DatabaseInformationNotFound">
            <summary>
            Minor warning: no database information file was found, so we're using the defaults
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.FolderInformationErrors.DatabaseInformationPartialFile">
            <summary>
            Minor warning: the file was found and loaded, but some settings were missing so the defaults were chosen
            instead.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage">
            <summary>Represents an informative message generated during parsing.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.Type">
            <summary>The type of parser message.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.File">
            <summary>The file being parsed at the time.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.LineNumber">
            <summary>The line number containing the text that caused the message.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.LineText">
            <summary>The line of text in which the error occurred.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.ErrorString">
            <summary>
            The specific text that caused the parser message. Whether a particular message type has an associated string
            can be determined using <see cref="M:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.HasErrorString(RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType)" />.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.HasErrorString(RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType)">
            <summary>
            Returns true if the specified <see cref="T:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType" /> has a non-null <see cref="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessage.ErrorString" />
            in it's messages.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType">
            <summary>The different types of messages the parser can produce.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType.InvalidSyntax">
            <summary>Invalid syntax was found; one or more statements were ignored.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType.IgnoredStatement">
            <summary>A non-schema statement was ignored.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType.IfClauseTakenAsTrue">
            <summary>An IF clause was assumed to evaluate as true.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReadFromFolder.ParserMessageType.ReferenceNotFound">
            <summary>An object referenced by a subsidiary object was not found.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.FileNameGenerator">
            <summary>Canonical scripts folder file name generator.
            WARNING: Changes to the resulting filenames for an object may cause major issues for migrations.
            See https://github.com/red-gate/BlockDeployment/blob/bb5ab2a/source/Definitions/Definitions.Synchronizer/IScriptsFolder.cs
            </summary>
            <remarks>
            Handles the fact the using user strings for file names is a bad idea - originally stolen from SQL DOC
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.FileNameGeneratorBase.RemoveNastyBitsOfFileName(System.String)">
            <summary>Returns a legal and unproblematic version of a file name</summary>
            <param name="name">Nasty file name</param>
            <returns>nice file name</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator">
            <summary>Used to generate file names for new objects (to handle file name collisions)</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator.GetFileNameForObjectToScript(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,System.String,System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction},System.String)">
            <param name="folderPath"></param>
            <param name="obj"></param>
            <param name="objectPrefix"></param>
            <param name="actionsCollection"></param>
            <param name="dotExtension">File extension with leading dot</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IIdealPathChooser.GetIdealPath(RedGate.SQLCompare.Engine.IDatabaseObject,System.String)">
            <param name="dbObject">The object whose name is required</param>
            <param name="dotExtension">The file extension to use with a preceding dot</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.UpdateDataToolsProjectAction.#ctor(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionWrite},System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ReadFromFolder.SynchronizationActionRewriteBase},System.String,System.Func{System.IO.DirectoryInfo,RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseProject.IDataToolsProject})">
            <param name="potentialCreateActions"></param>
            <param name="potentialRemoveFileActions"></param>
            <param name="scriptFolder"></param>
            <param name="tryLoadFromFolderOverrideForTests">
            By default uses FileBasedSsdtProject to load the sqlproj.
            Only for use by tests.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.UpdateDataToolsProjectAction.LoadFromFolder(System.IO.DirectoryInfo)">
            <summary>
            Don't call this directly, it should be assigned to m_TryLoadFromFolder. Throws InvalidStateException via Aver
            in failure cases.
            </summary>
            <param name="directoryInfo">The directory to load the project from.</param>
            <returns>The only project in the given directory.</returns>
            <remarks>Don't call this method directly, should only be called via m_TryLoadFromFolder.</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.StringWriterWithEncoding">
            <summary>
            The normal StringWriter ignores encoding and therefore screws up when used with XmlTextWriter. This is to fix
            that issue.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ParserError">
            <summary>Contains an error found in the scripts</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserError.File">
            <summary>The file in which the error occured</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserError.Line">
            <summary>The line on which the error was found</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserError.Column">
            <summary>The column on which the error was found</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserError.Offset">
            <summary>The offset into the file on which the error was found</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ParserError.Text">
            <summary>The offset into the file on which the error was found</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.FinalizeDatabase">
            <summary>
            This is a workaround so that SA accurately report the line number when a null ref is thrown and caught in
            Populate().
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.FixUpTriggerParents``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Triggers with an Execute As clause must point to a valid user</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.ProcessTriggersAndTheirParents">
            <summary>assign the triggers to their tables or views</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.ProcessUdtsForFieldsAndParameters(RedGate.SQLCompare.Engine.ReadFromFolder.IObjectLookup)">
            <summary>
            Checks fields and parameters and sets udt properties as well as adds dependencies. Prerequisite: default
            bindings!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.ProcessUdtsGetUdt(System.String,System.String)">
            <summary>Resolves a user defiend type based on its name</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.ProcessDefaultAndRuleBindings">
            <summary>
            Postprocesses default bindings. Prerequisites: Defaults, User Defined Types, Tables
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.ProcessRoleMembers">
            <summary>Postprocesses role members. Prerequisites: Defaults, Users, Roles</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.ProcessTriggerOrder">
            <summary>Postprocesses role members. Prerequisites: table triggers</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.ProcessExtendedProperties">
            <summary>
            Prerequisite: queues; event notifications, ... most of the objects plus their patch up.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseModelPostProcessor.ProcessIndices">
            <summary>Need view columns!</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromParseResultPopulator.ParserMessages">
            <summary>The list of parser messages generated while parsing the scripts folder</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromParseResultPopulator.#ctor(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options)">
            <summary>Constructs a DatabaseModelPostProcessor for a specific database.</summary>
            <param name="database">The database that is to be populated from a set of  creation script files.</param>
            <param name="dbinfo">Information about the database, such as default collations and database version.</param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromParseResultPopulator.Populate(RedGate.SQLCompare.Engine.ReadFromFolder.ParseResult)">
            <summary>
            Populates the relevant part of the model from a parse result.
            </summary>
            <remarks>
            This is called repeatedly, once for each parse result, to produce a fully-populated model.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DatabaseFromParseResultPopulator.Freeze">
            <summary>
            Prevents any further modifications to the model.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.DataCompressionUtils.DataCompressionFromValue(RedGate.SQLCompare.ASTParser.Syntax.General.DataCompressionValue)">
            <summary>
            Unfortunately we need a second enum in the engine, because the integration tests can't see the raw value in
            the parser project.  This method converts between them.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation">
            <summary>
            Options and settings that control how the creation SQL files are loaded and processed.
            </summary>
            <remarks>
            When adding a new property to this class you must also add it to the ScriptDatabaseInformationTests.
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions">
            <summary>Options that control how script files are written to a scripts folder.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.#ctor">
            <summary>Constructs a new instance of the WriteToFileOptions class.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.ObjectPrefixes">
            <summary>
            The object prefixes for all the ObjectType enumeration elements. These prefixes may contain one or more
            subfolder names and an object name prefix.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.WriteDataFilesInOneDirectory">
            <summary>Sets/Gets the write data files in one directory option</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.WriteXml(System.IO.Stream)">
            <summary>Writes an XML version of these options to a stream.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.WriteXml(RedGate.SQLCompare.Engine.ReadFromFolder.DataPreservingXmlStringBuilder)">
            <summary>Writes an XML version of these options to an XmlWriter.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.FromXml(System.String)">
            <summary>
            Constructs a new WriteToFileOptions object given an XML string generated by GetXml() method. Returns null if
            the options cannot be constructed from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.FromXml(System.IO.Stream)">
            <summary>
            Constructs a new WriteToFileOptions object given a stream. Returns null if the options cannot be constructed
            from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.FromXml(System.IO.TextReader)">
            <summary>
            Constructs a new WriteToFileOptions object given a textreader containing XML generated by GetXml(). Returns
            null if the options cannot be constructed from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.FromXml(System.Xml.XmlReader)">
            <summary>
            Constructs a new WriteToFileOptions object given an XML reader. Returns null if the options cannot be
            constructed from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.WriteToFileOptions.FromXmlEx(System.Xml.XmlNode)">
            <summary>
            Constructs a new WriteToFileOptions object given a document node for a WriteToFileOptions instance. Returns
            null if the options cannot be constructed from the XML.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.SetScriptEncodingType(System.String)">
            <summary>Set the ScriptEncodingType</summary>
            <param name="sct">A string representing the ScriptEncdingType</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.GetScriptEncodingType">
            <summary>Get the current ScriptEncodingType as a string</summary>
            <returns>The string representation of the current encoding type</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.DefaultCollation">
            <summary>The default collation for this database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.CaseSensitive">
            <summary>Indicates whether the database is case sensitive.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.DefaultOwner">
            <summary>
            Sets or gets the default owner for the database objects. In SQL Server 2005 this will set the default schema;
            in SQL Server 2000 it will set the default user owner.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.DefaultUser">
            <summary>Sets or gets the default user that should be used for AUTHORIZATION clauses.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.SQLServerDBVersion">
            <summary>
            Gets or sets the database major version. 8 is for SQL Server 2000. 9 is for SQL Server 2005. 10 is for SQL
            Server 2008.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.IsAzure">
            <summary>
            Is this database an Azure database?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.DefaultFilegroup">
            <summary>
            Sets or gets the filegroup that should be used if nothing or "DEFAULT" is specified in a creation SQL
            statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.CustomScriptFolder">
            <summary>
            Folder name where custom scripts can be stored that will be ignored when reading from a directory
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.#ctor">
            <summary>
            Constructs a new ScriptDatabaseInformation object. By default it initializes itself with values that
            represent a SQL Server 2005 database with Latin1_General_CS_AS collation.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.HasMatchingDatabaseObjectProperties(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation)">
            <summary>
            Determines whether two ScriptDatabaseInformation instances have equal DatabaseObjectProperties
            </summary>
            <param name="other">The ScriptDatabaseInformation to compare with.</param>
            <returns>True if the two instances have equal DatabaseObjectProperties.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.Equals(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation)">
            <summary>Determines whether the two ScriptDatabaseInformation instances are equal.</summary>
            <param name="other">The ScriptDatabaseInformation to compare with.</param>
            <returns>True if the two instances are equal.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.InfoVersion">
            <summary>
            The version of the ScriptDatabaseInformation that was read in. InfoVersion 0 doesn't exist. InfoVersion 1 is
            regarded to be any file not including a version attribute.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.ShouldOverrideSessionSets">
            <summary>Whether to build the object model based on these set statements</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.DefinesSetStatements">
            <summary>
            Set this if this ScriptDatabaseInformation is the definitive source for SET statements for the associated
            scripts.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation.GetXml">
            <summary>
            Gets a string containing XML that represents this object.
            </summary>
            <remarks>This method is not thread safe.</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis">
            <summary>
            This analysis object processes all the create and some alter statements. Note that some processing needs to
            be deferred until after we have all the objects. This is done in DatabaseModelPostProcessor (accessible via
            m_Factory)
            </summary>
            <excludetoc />
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.EnterNode(RedGate.SQLCompare.ASTParser.Syntax.Element,RedGate.SQLCompare.Rewriter.Analysis.AnalysisProvider{RedGate.SQLCompare.ASTParser.Syntax.Element})">
            <summary></summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.VisitNode(RedGate.SQLCompare.ASTParser.Syntax.Element,RedGate.SQLCompare.Rewriter.Analysis.AnalysisProvider{RedGate.SQLCompare.ASTParser.Syntax.Element})">
            <summary>
            We only need to trtaverse the top level go blocks, since we recurse later on the ast tree.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ExitNode(RedGate.SQLCompare.ASTParser.Syntax.Element,RedGate.SQLCompare.Rewriter.Analysis.AnalysisProvider{RedGate.SQLCompare.ASTParser.Syntax.Element})">
            <summary>Executed when a node is exited. At the moment nothing needs to be done.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.Reset">
            <summary></summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.TraverseNode(antlr.collections.AST)">
            <summary>
            A recursive method that iterates through the AST nodes, and fills in the relevant treeview nodes.
            </summary>
            <returns>True if a tree node has been added.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeIf(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes if nodes.</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessAddOrGrantLogin(RedGate.SQLCompare.ASTParser.Syntax.Statements.ExecuteProcedureStatement)">
            <summary>Postprocesses sp_addlogin and sp_grantlogin statements</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateDefault(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes Create Default statements</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateRule(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes Alter and Create nodes.</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateRoute(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes create route node</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateOrAlterProcedure(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes Alter and Create nodes.</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateOrAlterFunction(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes Alter and Create nodes for functions.</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateAggregate(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes Create nodes for aggregates.</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateOrAlterView(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes Alter and Create nodes for views.</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ReadScriptAnalysis.ProcessNodeCreateTable(RedGate.SQLCompare.ASTParser.Syntax.Element)">
            <summary>Processes Create table nodes.</summary>
            <param name="currentNode">The current AST element.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction">
            <summary>
            A synchronization action that is used when a file needs to be created or altered during synchronizing to a
            scripts folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.String,System.String)">
            <summary>Constructs a ScriptSynchronizationAction.</summary>
            <param name="dbInfo">The options that control how to write to the scripts folder.</param>
            <param name="options">Database options.</param>
            <param name="scriptFolder">The scripts folder for the target scripts.</param>
            <param name="fileName">The name of the file for this particular synchronization action.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.ScriptDatabaseInfo">
            <summary>The options that control how to write to the scripts folder.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.DatabaseObjectType">
            <summary>The object type this action applies to.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.Options">
            <summary>
            Database options. These affect the way scripts are created, for example whether SQL Server 2005 syntax is
            used, or whether filegroups should be included.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.ScriptFolder">
            <summary>The scripts folder for the target scripts.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.FileName">
            <summary>The file name for this synchronization action.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.ShortFileName">
            <summary>
            The name of the file and its prefix folder for this particular synchronization action.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.Check">
            <summary>Checks preconditions for the execution.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationAction.Execute">
            <summary>
            Executes the synchronization action and updates ScriptDatabaseInformation with relevant metadata
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionBlatObject">
            <summary>
            A synchronization action that creates a new file for a database object.  The database object may or may not
            be in the destination script folder already. Please use
            <see cref="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject" /> if at all possible, because using this class causes
            SC-4654.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionBlatObject.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.String,System.String,RedGate.SQLCompare.Engine.ScriptableDatabaseObject)">
            <summary>Constructs a ScriptSynchronizationActionBlatObject.</summary>
            <param name="dbInfo">Information about how to write the object</param>
            <param name="options">Options.</param>
            <param name="scriptFolder">The root scripts folder.</param>
            <param name="fileName">
            The filename for the new database object. This may include a relative sub folder prefix.
            </param>
            <param name="dbObject">The database object that is to be created by this action.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionBlatObject.Execute">
            <summary>Executes the synchronization action.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject">
            <summary>
            A synchronization action that creates a new file for a database object.  The database object must not be in
            the destination script folder already.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.String,System.String,RedGate.SQLCompare.Engine.ScriptableDatabaseObject)">
            <summary>Constructs a ScriptSynchronizationActionCreateObject.</summary>
            <param name="dbInfo">Information about how to write the object</param>
            <param name="options">Options.</param>
            <param name="scriptFolder">The root scripts folder.</param>
            <param name="fileName">
            The filename for the new database object. This may include a relative sub folder prefix.
            </param>
            <param name="dbObject">The database object that is to be created by this action.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionCreateObject.Execute">
            <summary>
            Executes the synchronization action. Which involves writing out to the object file(s), and adding any
            required metadata to ScriptDatabaseInformation.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.UpdateDBInfoAction">
            <summary>Modifies database settings during synchronizing to a scripts folder.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.UpdateDBInfoAction.Check">
            <summary>Verifies that we'll be able to update the DB info file</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.UpdateDBInfoAction.Execute">
            <summary>Creates the database info file</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.SynchronizationActionRewriteBase.Check">
            <summary>Checks if the script synchronization action can be carried out.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionRewrite">
            <summary>A synchronization action that modifies a creation SQL file.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionRewrite.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.String,System.String,RedGate.SQLCompare.Rewriter.Rewriting.Rewrite)">
            <summary></summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionRewrite.Execute">
            <summary>Executes the synchronization action.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions">
            <summary>
            The synchronization actions that need to be executed during synchronizing to a scripts folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.#ctor">
            <summary>Constructs the ScriptSynchronizationActions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.Check">
            <summary>Checks if the script synchronization actions can be carried out.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.Execute">
            <summary>
            Performs the script synchronization actions; it will modify the SQL script files in the target scripts
            folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.SynchronizationActions">
            <summary>Access to the synchronization actions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.CancelOperation">
            <summary>Cancels the current operation.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.Status">
            <summary>Used to provide status events.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActions.OnStatus(RedGate.Legacy.ProgressTasks.StatusEventArgs)">
            <summary>Fire the status events.</summary>
            <param name="e">Arguments.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionWrite">
            <summary>A synchronization action that creates a new file for a database object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionWrite.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.String,System.String,RedGate.SQLCompare.Engine.ScriptableDatabaseObject)">
            <summary>Constructs a ScriptSynchronizationActionWrite.</summary>
            <param name="dbInfo">
            Information about how to write the object. Will be updated with any required metadata on constructor.
            </param>
            <param name="options">Options.</param>
            <param name="scriptFolder">The root scripts folder.</param>
            <param name="fileName">
            The filename for the new database object. This may include a relative sub folder prefix.
            </param>
            <param name="dbObject">The database object that is to be created by this action.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionWrite.DatabaseObject">
            <summary>The database object that is to be created by this synchronization action.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ReadFromFolder.ScriptSynchronizationActionWrite.Check">
            <summary>Checks preconditions for the execution.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IEncryptedTextReader.GetEncryptedText(RedGate.SQLCompare.Engine.IResultSet,System.Int32)">
            <summary>
            Get the decrypted text for an object. Do not call if you are not viewing decrypted objects as it has
            significant performance impacts. (6-7 seconds on ICUST_1)
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.ScriptSourceForFullTextColumn">
            <summary>
            The location of the creation script for the fulltext column information for this field if the database source
            is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.IsFullTextFromInlineCreate">
            <summary>
            True if this fulltext field was set from an inline CREATE FULLTEXT INDEX statement
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.ScriptSourceForDefault">
            <summary>
            The location of the creation script for the default binding of this field if the database source is set to
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.ScriptSourceForRule">
            <summary>
            The location of the creation script for the rule binding of this field if the database source is set to
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.ColumnID">
            <summary>For internal use only.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.IsIncludedInFullTextIndex">
            <summary>True if the field is included in the full-text index on the table</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.FullTextTypeColumn">
            <summary>
            The column that holds document type information. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.FullTextLanguage">
            <summary>The language of any full-text index to which the field belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Scale">
            <summary>The scale of the field.</summary>
            <remarks>Valid for numeric and decimal data types.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.DefaultText">
            <summary>The text of the field's default value.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Precision">
            <summary>The precision of a decimal or numeric data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.AllowNulls">
            <summary>True if the field can contain NULL values.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.IdentitySeed">
            <summary>The identity seed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.IdentityCurrent">
            <summary>The current identity value.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.IdentityIncrement">
            <summary>The identity increment.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Default">
            <summary>The default that is bound to the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.DRIDefault">
            <summary>The Declarative Referential Integrity (DRI) default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Sparse">
            <summary>Whether this column is a sparse column</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.ComputedText">
            <summary>The computed text of the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.RowGUIDCol">
            <summary>True if the field is a ROWGUIDCOL.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Collation">
            <summary>The collation order of character fields.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Rule">
            <summary>The rule bound to the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Filestream">
            <summary>Specifies if this is a filestream column.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.SqlType">
            <summary>The field type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Identity">
            <summary>True if the field is an identity field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Computed">
            <summary>True if the field is computed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.DependentFields">
            <summary>Dependent fields for computed columns.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.NotForReplication">
            <summary>True if the field is marked as <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.DefinedSize">
            <summary>The length of the field.</summary>
            <remarks>Valid only for character and binary data.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Persisted">
            <summary>The column is in a calculated column that is persisted.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.TypeSchemaName">
            <summary>The name of the schema for the field's data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.TypeName">
            <summary>The name of the field type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.FullyQualifiedTypeName">
            <summary>
            The name of the fully-qualified field type. For SQL Server 2005, this property contains the schema name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.XmlDocument">
            <summary>The referenced XML document.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.ColumnSet">
            <summary>True if this field is a column set.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.XmlSchemaCollection">
            <summary>The referenced XML schema collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.DataMaskingFunction">
            <summary>
            The function used to mask the data.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IField.Hidden">
            <summary>
            For temporal tables, specifies that the column doesn't appear in SELECT * statements.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IField.CompareWith(RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.ComparisonContext,System.Boolean)">
            <returns><em>True</em> if the fields are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the field with a specified field.</summary>
            <param name="targetField">The field to compare.</param>
            <param name="context">Comparison options.</param>
            <param name="ignoreDriDefault">Whether to ignore default constraints for the field</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IField.GetSQL(RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker,System.Nullable{System.Boolean})">
            <summary>Builds the SQL definition for this field for use when creating or altering a table</summary>
            <param name="options">Comparison options.</param>
            <param name="includeFullDefinition">true to include parts of the field definition
            that are only valid when creating a column (e.g. IDENTITY, ROWGUIDCOL, DEFAULT).</param>
            <param name="targetFeatures">SQL Server features supported by the comparison target.</param>
            <param name="targetAllowsNulls">Whether or not the target field allows NULL values. Used to preserve
            target nullability when altering something other than a column's nullability with the IgnoreNullability
            option on.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IField.GetDataTypeSql(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Get the SQL string for the field type definition</summary>
            <param name="options">Comparison options.</param>
            <param name="targetFeatures">SQL Server features supported by the comparison target.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FieldMappingBestMatchMessage">
            <summary>A message.</summary>
            <remarks>See <see cref="T:RedGate.SQLCompare.Engine.Work" /> for more information.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FieldMappingBestMatchMessage.#ctor(RedGate.SQLCompare.Engine.IDatabaseObject,System.Collections.Generic.List{RedGate.SQLCompare.Engine.SqlCompareFieldMapping})">
            <summary>For internal use only.</summary>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="bestMatchedFieldMappings">The list of auto field mappings to warn about.</param>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PlannedChangesExtensions.GetCorrespondingViewOrTable(RedGate.SQLCompare.Engine.PlannedChanges,RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Returns the object in the target database corresponding to <paramref name="databaseObject" />.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDmvModelFactory.FromLive(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ICancellationStatus,RedGate.SQLCompare.Engine.IO.ITemporaryFileManager)">
            <summary>
            Create a dmv model instance from the given connection properties.
            This is the main point that record/replay gets injected for the tests
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDmvModelFactory.FromBackup(System.String,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ICancellationStatus,RedGate.SQLCompare.Engine.IO.ITemporaryFileManager)">
            <summary>
            Create a dmv model instance from the given BackupReader connection string
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqbEncryptionLevel">
            <summary>SQB encryption level enumeration</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BackupOptions.CachedSqbLicenseType">
            <summary>Gets the type of the SQL Backup license on the target server</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BackupOptions.CachedSqbVersion">
            <summary>
            Gets the installed version of SQL Backup on the target server. Returns zero if SQL Backup isn't installed.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BackupOptions.CachedDefaultNativeFolder">
            <summary>The default location for Native backups</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.BackupOptions.CachedDefaultSqbFolder">
            <summary>The default location for SQB backups</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.BackupOptions.UpdateFromDataSource(RedGate.SQLCompare.Engine.Deployment.IServerFactory,RedGate.SQLCompare.Engine.IDataSource)">
            <summary>
            Updates the BackupOptions from the dataSource
            </summary>
            <param name="factory"></param>
            <param name="dataSource"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Aver">
            <summary>
            Guard statement class moved from SHU
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert that the condition is true
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.True(System.Boolean,System.String)">
            <summary>
            Assert that the condition is true
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.False(System.Boolean,System.String)">
            <summary>
            Assert that the condition is false
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.Equals``1(``0,``0,System.String)">
            <summary>
            Assert that the actual value is the same as expected (using default object.Equals)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.Equals``1(``0,``0,System.String,System.Object[])">
            <summary>
            Assert that the actual value is the same as expected (using default object.Equals)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.NotNull``1(``0,System.String)">
            <summary>
            Check the variable is not null
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.NotNullOrEmpty``1(``0,System.String)">
            <summary>
            Check that the collection is not null or empty
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Check that the argument is not null
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.ArgumentNotNullOrEmpty``1(``0,System.String)">
            <summary>
            Check that the collection argument is not null or empty
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.Null``1(``0,System.String)">
            <summary>
            Assert obj is null
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.Empty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Assert collection is empty
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Aver.PathValid(System.String)">
            <summary>
            Check that the given path is not null, does not have invalid characters and is well-formed
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ClrMetaData.AssemblyDetails.s_VersionForNonStrongNamedAssemblies">
            <summary>
            SQL Server only preserves the version information if the assembly is strong named.
            SQL Server gives non-strong named assemblies this version number.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrMetaData.AssemblyComparison">
            <summary>
            This class determines whether or not an Assembly can be altered or if it will need to be dropped and
            re-created. Rules for altering are defined at: http://msdn.microsoft.com/en-us/library/ms186711.aspx
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrMetaData.AssemblyLoader">
            <summary>Convenience class for loading assemblies from byte[] using Reflector</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrMetaData.AssemblyLoader.Load(System.Byte[],RedGate.SQLCompare.Engine.IO.TemporaryFileManager)">
            <summary>
            Load an assembly from a byte[] by writing it to a temporary file and loading that
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.DirectObjectsComparison.PopulateDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.Legacy.ProgressTasks.ICancellable)">
            <summary>Compares the database with another database.</summary>
            <returns>
            A <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection containing the differences between the two databases.
            </returns>
            <remarks>
                <para>
                When two databases have been compared they can be synchronized using the
                <see cref="T:RedGate.SQLCompare.Engine.Work" /> class. Note that all objects that differ are selected for synchronization by default.
                </para>
                <para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <param name="differences"></param>
            <param name="subscriber">A subscriber to status and cancellation of the Comparison Task</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjectsComparison.PopulateDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.Legacy.ProgressTasks.ICancellable)">
            <summary>Compares the database with another database.</summary>
            <returns>
            A <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection containing the differences between the two databases.
            </returns>
            <remarks>
                <para>
                When two databases have been compared they can be synchronized using the
                <see cref="T:RedGate.SQLCompare.Engine.Work" /> class. Note that all objects that differ are selected for synchronization by default.
                </para>
                <para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <param name="differences"></param>
            <param name="subscriber">A subscriber to status and cancellation of the Comparison Task</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.ExtendedProperties">
            <summary>Database-level extended properties.</summary>
            <remarks>
            The collection contains extended properties that have been defined at the database level. Individual database
            objects (such as tables and users) can also have extended properties defined on them.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Tables">
            <summary>The tables in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.StoredProcedures">
            <summary>The stored procedures in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Views">
            <summary>The views in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Defaults">
            <summary>The defaults in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.UserDefinedTypes">
            <summary>The user-defined types in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Rules">
            <summary>The rules in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Functions">
            <summary>The user-defined functions in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Users">
            <summary>The users in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.DdlTriggers">
            <summary>The DDL triggers in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Roles">
            <summary>The roles in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Schemas">
            <summary>
            The schemas in the database. Note that schemas were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Assemblies">
            <summary>
            The CLR assemblies in the database. Note that CLR assemblies were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.MessageTypes">
            <summary>
            The message types in the database. Note that message types were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Synonyms">
            <summary>
            The synonyms in the database. Note that synonyms were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.EventNotifications">
            <summary>
            The database-level event notifications in the database. Note that event notifications were introduced in SQL
            Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Routes">
            <summary>
            The routes in the database. Note that routes were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Queues">
            <summary>
            The queues in the database. Note that queues were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Contracts">
            <summary>
            The contracts in the database. Note that contracts were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Services">
            <summary>
            The services in the database. Note that services were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.XmlSchemaCollections">
            <summary>
            The XML schema collections in the database. Note that XML schema collections were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.PartitionSchemes">
            <summary>
            The partition schemes in the database. Note that partitions schemes were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.PartitionFunctions">
            <summary>
            The partition functions in the database. Note that partition functions were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.ServiceBindings">
            <summary>
            The service bindings in the database. Note that service bindings were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Certificates">
            <summary>
            The certificates in the database. Note that certificates were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.SymmetricKeys">
            <summary>
            The symmetric keys in the database. Note that symmetric keys were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.AsymmetricKeys">
            <summary>
            The asymmetric keys in the database. Note that asymmetric keys were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.FullTextCatalogs">
            <summary>The full-text catalogs in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.Sequences">
            <summary>
            The sequence objects in the database. Note that these were introduced in SQL Server 2012
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IFullDatabaseObjects.FullTextStoplists">
            <summary>The full-text stoplists in the database.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseCollaborators.ColumnStacker">
            <summary>This used to create the dependency stack with the parser.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.ColumnStacker.MatchedSqlColumn(System.String[],System.Int32)">
            <summary>Called when the parser matches a dependent column.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.ObjectNameUtils.GetFullyQualifiedName(System.String)">
            <summary>Converts full names to names with []. E.g. dbo.table -> [dbo].[table]</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.ObjectNameUtils.ParseObjectName(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Breaks up a name into its constituent parts, such as object name, owner name, database name, and server name.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.ObjectNameUtils.FixTextualObjectName(System.String,System.String,System.String,System.Boolean)">
            <summary>Fix the text definition of a schema object to deal with object renames</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.ObjectNameUtils.FixTextualObjectName(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Fix the text definition of a schema object or DML trigger to deal with object renames.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.ExtendedProperties">
            <summary>Database-level extended properties.</summary>
            <remarks>
            The collection contains extended properties that have been defined at the database level. Individual database
            objects (such as tables and users) can also have extended properties defined on them.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Tables">
            <summary>The tables in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.StoredProcedures">
            <summary>The stored procedures in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Views">
            <summary>The views in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Defaults">
            <summary>The defaults in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.UserDefinedTypes">
            <summary>The user-defined types in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Rules">
            <summary>The rules in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Functions">
            <summary>The user-defined functions in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Users">
            <summary>The users in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.DdlTriggers">
            <summary>The DDL triggers in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Roles">
            <summary>The roles in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Schemas">
            <summary>
            The schemas in the database. Note that schemas were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Assemblies">
            <summary>
            The CLR assemblies in the database. Note that CLR assemblies were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.MessageTypes">
            <summary>
            The message types in the database. Note that message types were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Synonyms">
            <summary>
            The synonyms in the database. Note that synonyms were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.EventNotifications">
            <summary>
            The database-level event notifications in the database. Note that event notifications were introduced in SQL
            Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Routes">
            <summary>
            The routes in the database. Note that routes were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Queues">
            <summary>
            The queues in the database. Note that queues were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Contracts">
            <summary>
            The contracts in the database. Note that contracts were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Services">
            <summary>
            The services in the database. Note that services were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.XmlSchemaCollections">
            <summary>
            The XML schema collections in the database. Note that XML schema collections were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.PartitionSchemes">
            <summary>
            The partition schemes in the database. Note that partitions schemes were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.PartitionFunctions">
            <summary>
            The partition functions in the database. Note that partition functions were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.ServiceBindings">
            <summary>
            The service bindings in the database. Note that service bindings were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Certificates">
            <summary>
            The certificates in the database. Note that certificates were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.SymmetricKeys">
            <summary>
            The symmetric keys in the database. Note that symmetric keys were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.AsymmetricKeys">
            <summary>
            The asymmetric keys in the database. Note that asymmetric keys were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.FullTextCatalogs">
            <summary>The full-text catalogs in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.Sequences">
            <summary>
            The sequence objects in the database. Note that these were introduced in SQL Server 2012
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.FullTextStoplists">
            <summary>The full-text stoplists in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects.SecurityPolicies">
            <summary>The security policies in the database.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseCollaborators.ObjectStacker">
            <summary>
            This used to create the dependency stack with the parser. It contains of string[4] with the object name as
            the first element!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.ObjectStacker.MatchedSqlObject(System.String[],System.Int32)">
            <summary>Called when the parser matches a dependent object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseCollaborators.ObjectStacker.Stack">
            <summary>A stack with the object names that are identified as dependent objects.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.DatabaseCreationInfoGenerator.CalculateDatabaseCreationInformation(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.LiveConnectionInstructions,System.String@,System.String@,System.Collections.Generic.List{RedGate.SQLCompare.Engine.DatabaseFile}@,System.String@,System.String@)">
            <summary>
            Retrieve default values for various database settings (eg collations, file paths) from
            one or both of the specified connections
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.DatabaseCreationInfoGenerator.GetCollation(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.LiveConnectionInstructions)">
            <summary>
            There are four databases that we can use to determine the collation of the new database.
            They are the source and target databases provided by the user and the master databases on
            their respective servers. We try to get the collation from each of these in turn until we
            find a collation. This is done in descending order of preference. The first choice is the 
            collation of the source database. Otherwise, the other three databases will be tried. 
            If no collation is found, a common collation is returned as a best guess. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.DatabaseCreationInfoGenerator.SetDataPaths(RedGate.SQLCompare.Engine.LiveConnectionInstructions,System.String@,System.String@)">
            <summary>
            Gets the default data path and log path from the master database of a server.
            </summary>
            <param name="lci">Server connection properties</param>
            <param name="defaultDataPath">Default data path on the target server</param>
            <param name="defaultLogPath">Default log path on the target server</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCollaborators.DatabaseCreationInfoGenerator.SetDatabaseFiles(RedGate.SQLCompare.Engine.LiveConnectionInstructions,System.String,System.Collections.Generic.List{RedGate.SQLCompare.Engine.DatabaseFile},System.String,System.String)">
            <summary>
            If the source database exists, the database files of the new database will be based on
            those from the source database. The filegroups will be the same and the names will be
            the same, but with any substrings containing the source's name replaced by the new 
            target's name. The data and log paths will be the target server's. If the source 
            database does not exist, a data file and log file will be created. These will be 
            based on information from the target server and new database name. The data file 
            filegroup will be PRIMARY in this case.
            </summary>
            <param name="lci">Source server connection properties</param>
            <param name="defaultDbName">Name of the new database</param>
            <param name="defaultDbFiles">Data and log files of the new database</param>
            <param name="defaultDataPath">Default data path on the target server</param>
            <param name="defaultLogPath">Default log path on the target server</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Database">
            <summary>
            This is a (vaguely temporary) class used to reduce the number of new items added to Database's interface. Use
            one of the interfaces this class implements where possible, since those will behave consistenly between the
            two classes.
            </summary>
            <remarks>See <see cref="T:RedGate.SQLCompare.Engine.IDatabase" /> documentation for usage</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.#cctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.InitializeFieldsForTests">
            <summary>
            In order to get closer to unit testing we need to be able to programmatically create databases, add fields
            here as needed for tests (trying to be exhaustive would be pointless)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToDisk(System.String)">
             <summary>Saves the Database to disk.</summary>
             <example>
             The example shows how you save and load a snapshot.
             <code lang="CS">
             //register a Database using integrated security
             Database db1=new Database();
             db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
            
             //save the Database to disk
             db.SaveToDisk(@"c:\WidgetStaging.snp");
            
             Database db2=new Database();
             db2.LoadFromDisk(@"c:\WidgetStaging.snp");
            
             //dispose of the objects
             db.Dispose();
             db2.Dispose();
                 </code>
             <code lang="VB">
             'register a Database using integrated security
             Dim db1 As New Database()
             db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
            
             'save the Database to disk
             db.SaveToDisk("c:\WidgetStaging.snp")
            
             Dim db2 As New Database()
             db2.LoadFromDisk("c:\WidgetStaging.snp")
            
             'dispose of the objects
             db.Dispose()
             db2.Dispose()
                 </code>
             </example>
             <param name="fileName">The name of the snapshot file to be created.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToStream(System.IO.Stream)">
            <summary>
            Writes the Database snapshot to the specified stream. This is an alternative to the SaveToDisk method
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToFolder(System.String)">
            <summary>Saves the Database as a set of creation scripts to the specified folder.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToFolder(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation)">
            <summary>Saves the Database as a set of creation scripts to the specified folder.</summary>
            <param name="folderName"></param>
            <param name="dbInfo">
            Options to control how the script files are written to the folder - will be changed by the call
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SaveToFolder(System.String,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator)">
            <summary>Saves the Database as a set of creation scripts to the specified folder.</summary>
            <param name="folderName"></param>
            <param name="options">Options to control how the Database objects are scripted out</param>
            <param name="readOnlyDbInfo">
            Options to control how the script files are written to the folder - will be changed by the call
            </param>
            <param name="generator">Generator will be autodetected if none is specified.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.LoadFromDisk(System.String,System.Boolean,System.Nullable{RedGate.SQLCompare.Engine.Options})">
            <summary>Loads the Database from disk.</summary>
            <remarks>Progress events are fired via the Status event.</remarks>
            <example>See <see cref="M:RedGate.SQLCompare.Engine.Database.SaveToDisk(System.String)" /> for a code sample.</example>
            <param name="fileName">The name of the Database snapshot file to load.</param>
            <param name="caseSensitiveComparison">
            Whether the comparison is case sensitive (from the project options). This is checked against the case
            sensitivity of the snapshot to ensure that they match.
            </param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.LoadFromStream(System.IO.Stream,System.Boolean,System.Nullable{RedGate.SQLCompare.Engine.Options})">
            <summary>
            Loads the Database from a stream. This is an alternative to the LoadFromDisk method.
            </summary>
            <param name="f">The open stream from which to read the database.</param>
            <param name="caseSensitiveComparison">
            Whether the comparison is case sensitive (from the project options). This is checked against the case
            sensitivity of the snapshot to ensure that they match.
            </param>
            <param name="options"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.DateScripted">
            <summary>The date the Database object was created.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ParserMessages">
            <summary>
            A list of parser messages generated during population from a script folder. This will be null if the Database
            source is not a set of scripts.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ServerMajorVersion">
            <summary>
            The major server version of the SQL Server for the database. This may be different from the
            <see cref="P:RedGate.SQLCompare.Engine.Database.MajorVersion">MajorVersion</see> property if the Database is running in a compatibility mode.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ServerVersionNumber">
            <summary>The full version number of the SQL Server.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.MajorVersion">
            <summary>
            The major version of the SQL Server for the database. This reflects the compatibility mode of the database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.SqlServerVersionInfo">
            <summary>
            Information about the version of SQL Server this database exists on, including version number, compatibility
            level, internal version and whether or not it's an Azure database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SetSqlServerVersionInfo(RedGate.SQLCompare.Engine.Model.SqlServerVersioning.SqlVersion,System.Boolean)">
            <summary>
            Sets the <see cref="T:RedGate.SQLCompare.Engine.Model.SqlServerVersioning.SqlVersion"/> of the database and updates the associated list of supported features taking into
            account whether the server version or compatibility level should be used for the feature list.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.IsAzure">
            <summary>Is this database an Azure database?</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.CaseSensitive">
            <summary>Indicates whether the Database has been set up as case sensitive.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.CaseSensitiveServer">
            <summary>
            Information about the Database coillation. This information is only populated for the refactoring tool.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Collation">
            <summary>The collation of the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.DbInfo">
            <summary>Script File Information *INTERNAL USE ONLY*</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ConnectionProperties">
            <summary><![CDATA[]] Use Metadata.GetMetadata<DatabaseName> instead ]]></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.FullTextEnabled">
            <summary>True if the Database has full text enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.RemoteDataArchiveEnabled">
            <summary>True if the database has REMOTE_DATA_ARCHIVE (aka 'Stretch Database') enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.DependenciesBuilder">
            <summary>The dependencies in the database.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Dependencies">
            <summary>The dependencies in the database.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ClrAssemblyDependenciesBuilder">
            <summary>The dependencies of the CLR assemblies in the database.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.ClrAssemblyDependencies">
            <summary>The dependencies of the CLR assemblies in the database.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Register(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory)">
             <summary>Registers a database.</summary>
             <remarks>
             Connects to a Database and retrieves all schema information. The Database object can then be saved to disk or
             used in a comparison. Progress feedback is provided via the Status event.
             </remarks>
             <example>
             This example shows how you register a Database from a live server, with feedback.
             <code lang="CS">
             using System;
             using RedGate.Legacy.ProgressTasks;
             using RedGate.SQLCompare.Engine;
            
             namespace ConsoleApplication2
             {
                 public class Class1
                 {
            
                     public static void Main()
                     {
                         Class1 c1=new Class1();
                         c.Run();
                     }
            
                     private void StatusCallback(object sender, StatusEventArgs e)
                     {
                         //fired by the SqlProvider to indicate events
            
                         if (e.Message!=null)
                         {
                             Console.WriteLine(e.Message);
                         }
            
                         if (e.Percentage!=-1)
                         {
                             Console.WriteLine("{0}%", e.Percentage);
                         }
            
                     }
            
                     private void Run()
                     {
                         Database db=new Database();
                         db.Status+=new StatusEventHandler(StatusCallback);
                         db.Register(new ConnectionProperties(".", "WidgetStaging"),Options.Default);
                         db.Dispose();
                     }
                 }
             }
                 </code>
             <code lang="VB">
             Option Explicit On
            
             Imports RedGate.SQLCompare.Engine
            
             Module Module3
            
                 Sub Main()
            
                     Dim c As Class1 = New Class1()
            
                     c.Run()
                     Console.WriteLine("Press [Enter]")
                     Console.ReadLine()
            
                 End Sub
            
                 Public Class Class1
            
                     Sub StatusCallback(ByVal sender As Object, ByVal e As StatusEventArgs)
            
                         If Not (e.Message Is Nothing) Then
                             Console.WriteLine(e.Message)
                         End If
            
                         If e.Percentage &lt;&gt; -1 Then
                             Console.WriteLine("{0}%", e.Percentage)
                         End If
            
            
                     End Sub
            
                     Sub Run()
            
                         Dim db As New Database()
                         db.Status = New StatusEventHandler(AddressOf Me.StatusCallback)
                         db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
                         db.Dispose()
                     End Sub
            
            
                 End Class
             End Module
                 </code>
             </example>
             <param name="connectionProperties">The connection properties associated with the database.</param>
             <param name="options">Options.</param>
             <param name="factory"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Register(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory)">
            <summary>
            Registers a database
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Register(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers the Database from creation scripts that are stored in the folder specified by the path parameter.
            </summary>
            <param name="path">The path to the folder that contains the creations scripts.</param>
            <param name="dbinfo">
            This is an optional parameter. If the specified folder contains the SQL Compare generated xml file with the
            necessary Database information, it does not need to be specified. However, if the folder does not contain
            this information, or this information needs to be overriden, then this parameter must be set.
            </param>
            <param name="options">Options.</param>
            <param name="filesToUse">
            A list of files to use for the register if this is set to null then any .sql file found under the path and
            it's subfolders will be used
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Register(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Registers the Database from creation scripts that are stored in the folder specified by the path parameter.
            </summary>
            <param name="path">The path to the folder that contains the creations scripts.</param>
            <param name="dbinfo">
            This is an optional parameter. If the specified folder contains the SQL Compare generated xml file with the
            necessary Database information, it does not need to be specified. However, if the folder does not contain
            this information, or this information needs to be overriden, then this parameter must be set.
            </param>
            <param name="options">Options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Register(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.Collections.Generic.IEnumerable{System.String},RedGate.SQLCompare.Engine.ReadFromFolder.Cache.IReadFromFolderCache,RedGate.SQLCompare.Engine.Model.DatabaseObjects.DatabaseFromFolderPopulator.IDatabaseFromFolderPopulator)">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:RedGate.SQLCompare.Engine.SqlCompareException"></exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDataCompare(RedGate.SQLCompare.Engine.ConnectionProperties)">
            <summary>Registers a Database for SQL Data Compare (focusing on tables, views and a few associated objects)</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDataCompare(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Registers a Database for SQL Data Compare (focusing on tables, views and a few associated objects)</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDataCompare(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory)">
            <summary>Registers a Database for SQL Data Compare (focusing on tables, views and a few associated objects)</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForDependencyViewer(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Internal use only.</summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterGetObjectOwners(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Internal use only. (used by SQL Prompt)</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RegisterForRefactoring(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Internal use only. (Used by SQL Prompt)</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.SetupPrivateVariables(RedGate.SQLCompare.Engine.Options)">
            <summary></summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CreateEmptyTarget(System.Boolean)">
            <summary>For internal use only</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)">
             <summary>Compares the Database with another database.</summary>
             <returns>
             A <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection containing the differences between the two databases.
             </returns>
             <remarks>
                 <para>
                 When two databases have been compared they can be synchronized using the
                 <see cref="T:RedGate.SQLCompare.Engine.Work" /> class. Note that all objects that differ are selected for synchronization by default.
                 </para>
                 <para>Progress feedback is provided via the Status event.</para>
             </remarks>
             <example>
             This example shows how you compare two databases and print out a summary of the differences.
             <code lang="CS">
             Database db1=new Database();
             Database db2=new Database();
            
             db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             db2.Register(new ConnectionProperties(".", "WidgetProduction"), Options.Default);
            
             Differences differences=db1.CompareWith(db2, Options.Default);
            
             foreach (Difference difference in differences)
             {
                 Console.WriteLine("{0} {1} {2}", difference.Type.ToString(), difference.DatabaseObjectType.ToString(), difference.Name);
             }
            
             //dispose of the objects
             db1.Dispose();
             db2.Dispose();
                 </code>
             <code lang="VB">
             Dim db1 As New Database()
             Dim db2 As New Database()
            
             db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             db2.Register(New ConnectionProperties(".", "WidgetProduction"), Options.Default)
            
             Dim differences As Differences = db1.CompareWith(db2, Options.Default)
            
             Dim difference As Difference
            
             For Each difference In differences
                 Console.WriteLine("{0} {1} {2}", difference.Type.ToString(), difference.DatabaseObjectType.ToString(), difference.Name)
             Next
            
             'dispose of the objects
             db1.Dispose()
             db2.Dispose()
                 </code>
             </example>
             <param name="targetDatabase">The Database to compare with.</param>
             <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>Compares the Database with another database.</summary>
            <returns>
            A <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection containing the differences between the two databases.
            </returns>
            <remarks>
                <para>
                When two databases have been compared they can be synchronized using the
                <see cref="T:RedGate.SQLCompare.Engine.Work" /> class. Note that all objects that differ are selected for synchronization by default.
                </para>
                <para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <param name="targetDatabase">The Database to compare with.</param>
            <param name="options">Comparison options.</param>
            <param name="ownerMappings">Owner mappings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,RedGate.SQLCompare.Engine.SqlCompareTableMappings)">
            <summary>Compares the Database with another database.</summary>
            <returns>
            A <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection containing the differences between the two databases.
            </returns>
            <remarks>
                <para>
                When two databases have been compared they can be synchronized using the
                <see cref="T:RedGate.SQLCompare.Engine.Work" /> class. Note that all objects that differ are selected for synchronization by default.
                </para>
                <para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <param name="targetDatabase">The Database to compare with.</param>
            <param name="options">Comparison options.</param>
            <param name="ownerMappings">Owner mappings.</param>
            <param name="tableMappings">Table mappings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetDependencyStacks">
            <summary>For internal use only. (Used by Dependency Tracker)</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Status">
            <summary>Used to provide status events.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.CancelOperation">
            <summary>Cancels the current operation.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Database.Cancel">
            <summary>Indicates whether the Database registration has been canceled.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.OnStatus(RedGate.Legacy.ProgressTasks.StatusEventArgs)">
            <summary>Fire the status events</summary>
            <param name="e">Arguments</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Dispose">
            <summary>Disposes of the object.</summary>
            <remarks>
            It is important to dispose of the object to delete any temporary files it uses.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.Clone">
            <summary>A deep clone of the Database object.</summary>
            <returns>A deep clone of the Database object.</returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.GetLiveDatabaseCaseSensitivity(System.Data.SqlClient.SqlConnection)">
            <summary>Internal use only.</summary>
            <param name="connection">Internal use only.</param>
            <returns>Internal use only.</returns>
            <exclude />
            <excludeToc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Database.RetrieveCaseInformationFromLiveDatabase(System.Data.SqlClient.SqlConnection)">
            <summary>
            This static method returns true if the Database in question is using a case sensitive collation.
            </summary>
            <param name="connection">
            A connection to the Database to be checked. If the connection that is provided is closed, it will be opened
            again, then closed.
            </param>
            <returns>True if the Database collation is case sensitive.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IPatchUpAfterDeserialization.PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Database)">
            <summary>
            This method must be idempotent - it may be called any number of times and at any time. Ideally the first call
            should patch up the object collection, and all subsequent calls should do nothing.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IReadOnlyKeyedDatabaseObjectCollectionWrapper.Item(System.String)">
            <summary>Returns elements by key.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction">
            <summary>A TSQL permission action such as VIEW DEFINITION or ALTER ANY ROLE that has a class of DATABASE</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExecuteAs">
            <summary>The EXECUTE AS clause used to create the object.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.Caller">
            <summary>The object is set to EXECUTE AS CALLER.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.Owner">
            <summary>The object is set to EXECUTE AS OWNER.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.Dbo">
            <summary>The object is set to EXECUTE AS 'dbo'.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.Guest">
            <summary>The object is set to EXECUTE AS 'guest'.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ExecuteAs.User">
            <summary>The object is set to EXECUTE AS a specified user.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextChangeTracking">
            <summary>The type of change tracking applied to the full text index on a view or table.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextChangeTracking.Off">
            <summary>Change tracking is disabled.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextChangeTracking.Manual">
            <summary>The change tracking log is propagated manually</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextChangeTracking.Auto">
            <summary>The full text index is updated automatically.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextStoplistType">
            <summary>The stoplist used by the full text index on a view or table.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextStoplistType.None">
            <summary>No stoplist is used for the fulltext index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextStoplistType.System">
            <summary>The system stoplist is used.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FullTextStoplistType.UserDefined">
            <summary>A user-defined stoplist is used.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FunctionType">
            <summary>The type of function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Inline">
            <summary>An inline function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Scalar">
            <summary>A scalar function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Table">
            <summary>A table function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FunctionType.Aggregate">
            <summary>An aggregate.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.GridDensity">
            <summary>The grid density for the levels of the spatial index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GridDensity.LOW">
            <summary>LOW (16)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GridDensity.MEDIUM">
            <summary>MEDIUM (64)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.GridDensity.HIGH">
            <summary>HIGH (256)</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ICompressionPartition.DataCompressionPartitionsInternal">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature. The internal version
            gives you direct access to the list that is stored. If there is no important information in the list it is
            not stored!
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IEncryptedTextObject">
            <summary>
            A text object that can be encrypted and have other options applied to the textual definition.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IEncryptedTextObject.Encrypted">
            <summary>Returns a value indicating if the object text was encrypted.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IEncryptedTextObject.TextID">
            <summary>Returns the ID of the syscomments entry of this object's text.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IEncryptedTextObject.GetSql(RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Returns appropriate sql for creating or altering the object with or without a WITH ENCRYPTION clause
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IHasAuthorization">
            <summary>
            Marks objects that have an owner instead of a schema. Note that some objects can have both an owner and a
            schema; in this instance, <see cref="T:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization" /> is used instead.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IHasAuthorization.AlterAuthorizationClassType">
            <summary>
            The securable class of the entity for which the owner is being changed.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IOwner">
            <summary>An interface representing an object that can 'own' other objects.</summary>
            <remarks>Currently used for Role, Schema, User</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.LockEscalationType">
            <summary>
            See MSDN docs on the LOCK_ESCALATION keyword:
            http://technet.microsoft.com/en-us/library/ms184286(v=sql.105).aspx Gotchas:- Text used to generate SQL The
            actual values are also the values stored by SQL Server
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageTypeValidation">
            <summary>The validation type for a message type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.Xml">
            <summary>XML.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MessageTypeValidation.Empty">
            <summary>Empty.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionLevel">
            <summary>The action that a permission allows. <seealso cref="T:RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction" /></summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SecurableType">
            <summary>The class on which the permission exists.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.Database">
            <summary>Database.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.ObjectOrColumn">
            <summary>
            Object or column. Prior to SQL Server 2005, this is the only permission class used.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.Schema">
            <summary>Schema.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.DatabasePrincipal">
            <summary>Database principal.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.Assembly">
            <summary>Assembly.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.Type">
            <summary>Type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.XmlSchemaCollection">
            <summary>XML schema collection.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.MessageType">
            <summary>Message type.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.ServiceContract">
            <summary>Service contract.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.Service">
            <summary>Service.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.RemoteServiceBinding">
            <summary>Remote service binding.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.Route">
            <summary>Route.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.FullTextCatalog">
            <summary>Full text catalog.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.SymmetricKey">
            <summary>Symmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.AsymmetricKey">
            <summary>Asymmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.Certificate">
            <summary>Certificate.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SecurableType.SearchPropertyList">
            <summary>Search Property List.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionSet">
            <summary>The code access permissions for CLR assemblies.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.SAFE">
            <summary>Safe.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.EXTERNAL_ACCESS">
            <summary>External access.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionSet.UNSAFE">
            <summary>Unsafe.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PermissionStatementType">
            <summary>The type of permission.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionStatementType.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionStatementType.GrantWithGrant">
            <summary>Grant with grant option.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionStatementType.Grant">
            <summary>Grant.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionStatementType.Deny">
            <summary>Deny.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionStatementType.Revoke">
            <summary>Revoke.</summary>
            <remarks>
            This crazy value is to preserve compatibility with buggy snapshot serialization in format version 12.48f.
            PermissionStatementType used to be int based, not byte based, and had the value 999.
            '999' is cast to (byte) on serialization in <see cref="M:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.Serialize(RedGate.SQLCompare.Engine.NullableBinaryWriter)"/>,
            and therefore deserialization back to PermissionStatementType failed.
            
            We assign the value 999 % 256 so that it matches the value that casting to byte originally gave.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.PermissionStatementType.RevokeGrantOption">
            <summary>Revoke grant option</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReferentialAction">
            <summary>Referential actions for foreign keys.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.NoAction">
            <summary>Cause update or delete to fail.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.Cascade">
            <summary>Propagate changes to other tables.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.SetNull">
            <summary>Set value to null.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ReferentialAction.SetDefault">
            <summary>Set value to default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SearchProperty.Name">
            <summary> The name of the property </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SearchProperty.GuidOfSet">
            <summary> An identifier for the property set the property belongs to </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SearchProperty.IdInSet">
            <summary> Which property in the property set to use </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SearchProperty.Description">
            <summary> A description of the property </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SearchProperty.InternalID">
            <summary> SQL Server's internal id for this instance of the property </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexType">
            <summary>
            The type of the spatial index. In SQL Server 2008 this can be either geometry or geography.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexType.Geometry">
            <summary>Geometry</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexType.Geography">
            <summary>Geography</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TesselationScheme">
            <summary>The tesselation scheme for the spatial index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TesselationScheme.GeometryGrid">
            <summary>GEOMETRY_GRID</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TesselationScheme.GeographyGrid">
            <summary>GEOGRAPHY_GRID</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TesselationScheme.GeometryAutoGrid">
            <summary>GEOMETRY_AUTO_GRID</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TesselationScheme.GeographyAutoGrid">
            <summary>GEOGRAPHY_AUTO_GRID</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserType">
            <summary>The type of user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.SqlUser">
            <summary>SQL Server user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.WindowsUser">
            <summary>Windows user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.CertificateUser">
            <summary>Certificate bound user.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.UserType.AsymmetricKeyUser">
            <summary>Asymmetric key bound user.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DBPopulationOptions">
            <summary>Options used when populating databases.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesHelper.GetDependenciesFromExpression(System.String)">
            <summary>For defaults and column dependencies</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesHelper.GetDependencies(System.String,System.Boolean,System.Boolean)">
            <summary>Gets the dependencies of a particular string of SQL code. Internal use only.</summary>
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseCreation">
            <summary>
            Methods for creating a live database with specific files and filegroups
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCreation.CreateDatabase(System.Data.Common.DbConnection,RedGate.SQLCompare.Engine.DatabaseCreationInfo)">
            <summary>
            Run sql against <paramref name="connection"/> to create the database specified by <paramref name="databaseCreationInfo"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCreation.CreateDatabase(System.Data.Common.DbConnection,RedGate.SQLCompare.Engine.DatabaseCreationInfo,System.Threading.CancellationToken)">
            <summary>
            Run sql against <paramref name="connection"/> to create the database specified by <paramref name="databaseCreationInfo"/>.
            Use <paramref name="cancel"/> to cancel the creation if necessary
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCreation.CalculateDatabaseCreationInformation(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.LiveConnectionInstructions,System.String@,System.String@,System.Collections.Generic.List{RedGate.SQLCompare.Engine.DatabaseFile}@,System.String@,System.String@)">
            <summary>
            Retrieve default values for various database settings (eg collations, file paths) from
            one or both of the specified connections
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseCreation.CalculateDatabaseCreationInformation(System.String,System.String,System.String@,System.String@,System.Collections.Generic.List{RedGate.SQLCompare.Engine.DatabaseFile}@,System.String@,System.String@)">
            <summary>
            Retrieve default values for various database settings (eg collations, file paths) from
            one or both of the specified connections
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DefaultDictionary`2">
            <summary>
            Dictionary with default values for keys.
            </summary>
            <remarks>
            The main point of this class is to replace the "check if key exists, create key if not, use key" boilerplate that
            so often accompanies Dictionary (ie the code in Item[TKey]). This is particulary useful when creating a
            foo->List(bar) dictionary.
            Named after Python's defaultdict
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DefaultDictionary`2.Item(`0)">
            <summary>
            Return the value associated with <paramref name="key"/>, creating it if it doesn't already exist
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DefaultDictionary`2.ContainsKey(`0)">
            <summary>
            Checks whether the <paramref name="key"/> has been created yet.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DuplicateObjectNameException">
            <summary>
            <para>
            Exception thrown when the engine finds that an object definition already exists
            for a given name and it is not expected to.
            In many cases this is caused by case-sensitivity problems, so this exception
            has specific support for flagging that error case (<see cref="P:RedGate.SQLCompare.Engine.DuplicateObjectNameException.IsCaseInsensitiveCollision" />).
            </para>    
            <para>
            This class also provides static ThrowIf... methods to perform the normal
            collision checks used by the engine, detect case-insensitivity problems, and
            throw the correct DuplicateObjectNameException when collisions occur.
            </para>
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DuplicateObjectNameException.ObjectName">
            <summary>
            The name of the object that already existed
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DuplicateObjectNameException.ObjectType">
            <summary>
            The type of object involved in the collision (a human-readable string
            used in the exception message)
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DuplicateObjectNameException.IsCaseInsensitiveCollision">
            <summary>
            Whether the duplicate was with a name that differed only by case.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.#ctor">
            <summary>Constructs a DuplicateObjectNameException with no extra information.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.#ctor(System.String,System.Boolean,System.String)">
            <summary>Constructs a DuplicateObjectNameException with a default message based
            on the object properties provided.</summary>
            <param name="objectName">The object name that was duplicated</param>
            <param name="isCaseInsensitiveCollision">Did the duplication occur because a case-insensitive match existed</param>
            <param name="objectType">The (human-readable) type of object that had a duplicate name</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.#ctor(System.String,System.Boolean,System.String,System.String)">
            <summary>Constructs a DuplicateObjectNameException with a specific message. In almost all
            cases you should use one of the other constructors that provides the default message, rather than
            this one.</summary>
            <param name="objectName">The object name that was duplicated</param>
            <param name="isCaseInsensitiveCollision">Did the duplication occur because a case-insensitive match existed</param>
            <param name="objectType">The (human-readable) type of object that had a duplicate name</param>
            <param name="message">The exception message to display</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.#ctor(System.String,System.Exception)">
            <summary>Constructs a DuplicateObjectNameException exception.
            This is only provided because it's required/expected for all exceptions - it doesn't
            populate the more specific properties of this exception. You should use
            <see cref="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.#ctor(System.String,System.Boolean,System.String,System.Exception)"/> if you really need an inner exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.#ctor(System.String,System.Boolean,System.String,System.Exception)">
            <summary>Constructs a DuplicateObjectNameException witha default message and an inner exception</summary>
            <param name="objectName">The object name that was duplicated</param>
            <param name="isCaseInsensitiveCollision">Did the duplication occur because a case-insensitive match existed</param>
            <param name="objectType">The (human-readable) type of object that had a duplicate name</param>
            <param name="inner">The exception that triggered this DuplicateObjectNameException</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructs a DuplicateObjectNameException during serialization.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            property bag</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the 
            custom properties on this exception.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination. </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.ThrowIfDuplicateName``1(System.String,System.Collections.Generic.Dictionary{System.String,``0},RedGate.SQLCompare.Engine.ObjectType,System.String)">
            <summary>
            If <paramref name="key"/> already exists in <paramref name="existingObjects"/> (based
            on that dictionary's default Comparer), this will throw a <see cref="T:RedGate.SQLCompare.Engine.DuplicateObjectNameException"/>.
            This method will detect case-insensitive collision scenarios (where the existing object key
            differs from key only by case) and set the appropriate flag in the exception.
            </summary>
            <typeparam name="T">the value type of <paramref name="existingObjects"/></typeparam>
            <param name="key">The key we're going to add to <paramref name="existingObjects"/></param>
            <param name="existingObjects">The dictionary of existing key/object pairs</param>
            <param name="objectType">The <see cref="T:RedGate.SQLCompare.Engine.ObjectType" /> of the object being added</param>
            <param name="objectNameForMessage">The string to use for the object's name in the exception message,
            if it's different to the key. If null (the default value), then <paramref name="key"/> will be used.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.ThrowIfDuplicateName``1(System.String,System.Collections.Generic.Dictionary{System.String,``0},System.String,System.String)">
            <summary>
            If <paramref name="key"/> already exists in <paramref name="existingObjects"/> (based
            on that dictionary's default Comparer), this will throw a <see cref="T:RedGate.SQLCompare.Engine.DuplicateObjectNameException"/>.
            This method will detect case-insensitive collision scenarios (where the existing object key
            differs from key only by case) and set the appropriate flag in the exception.
            </summary>
            <typeparam name="T">the value type of <paramref name="existingObjects"/></typeparam>
            <param name="key">The key we're going to add to <paramref name="existingObjects"/></param>
            <param name="existingObjects">The dictionary of existing key/object pairs</param>
            <param name="objectType">The human-readable type name of the object being added</param>
            <param name="objectNameForMessage">The string to use for the object's name in the exception message,
            if it's different to the key. If null (the default value), then <paramref name="key"/> will be used.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.ThrowIfCaseInsensitiveClash(RedGate.SQLCompare.Engine.IDatabaseObject,System.String)">
            <summary>
            Checks that <paramref name="matchedname" /> is the same as the name of <paramref name="obj" />
            in a case-sensitive way. If it isn't, it throws <see cref="T:RedGate.SQLCompare.Engine.DuplicateObjectNameException" /> 
            with an appropriate error message.
            </summary>
            <param name="obj">The object found to match <paramref name="matchedname" />.</param>
            <param name="matchedname">The object name that was searched for.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DuplicateObjectNameException.DetectCaseInsensitiveCollision``1(System.String,System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            Helper method to search through a dictionary for a matching key and detect
            whether the key only matches because the dictionary's comparison is case-insensitive.
            <em>This should only be called when a matching key has already been detected in the dictionary 
            and an exception is going to be thrown, because it's slower than just using ContainsKey to 
            detect the collision.</em>
            </summary>
            <typeparam name="T">The value type of <paramref name="existingObjects"/></typeparam>
            <param name="key">The key that has already been matched by <paramref name="existingObjects"/> default comparer</param>
            <param name="existingObjects"></param>
            <returns>true if the existing key that matches <paramref name="key"/> in <paramref name="existingObjects"/>
            differs in case.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareArgumentException">
            <summary>This exception is used as the general exception for SQL Compare.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareArgumentException.#ctor">
            <summary>Constructs a SqlCompareArgumentException exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareArgumentException.#ctor(System.String)">
            <summary>Constructs a SqlCompareArgumentException exception.</summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareArgumentException.#ctor(System.String,System.Exception)">
            <summary>Constructs a SqlCompareArgumentException exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructs a SqlCompareArgumentException exception.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlExceptionWithSql">
            <summary>
            Wrap a <see cref="T:System.Data.SqlClient.SqlException"/> with the sql that failed
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlExceptionWithSql.BuildMessage(System.String,System.String)">
            <summary>
            Internal: build a relevant exception message from the failure message and sql
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UnsupportedDataWarehouseException">
            <summary>
            Exception for when trying to register an Azure Data Warehouse (and possibly PDW) database
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UnsupportedSqlServerVersionException">
            <summary>
            Exception for when trying to register a database for a SQL Server version that is too old
            (currently 2000 and earlier)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDatabase">
            <summary>
            A SQL Server database object model. The object model may represent a scripts folder, snapshot, or a live
            database.
            </summary>
            <remarks>
                <para>
                Use <see cref="M:RedGate.SQLCompare.Engine.IDatabase.Register(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory)" /> to register the
                Databasefrom a live server or
                <see cref="M:RedGate.SQLCompare.Engine.IDatabase.LoadFromDisk(System.String,System.Boolean,System.Nullable{RedGate.SQLCompare.Engine.Options})" /> to load a Database from a snapshot.
                </para>
                <para>
                Registering a Database is a long-running operation. Status feedback is provided via the Status event
                handler. To cancel the operation, call CancelOperation.
                </para>
                <para>
                You must call <see cref="M:System.IDisposable.Dispose" /> when you have finished using a Database object.
                </para>
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.ParserMessages">
            <summary>
            A list of parser messages generated during population from a script folder. This will be null if the database
            source is not a set of scripts.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.IsAzure">
            <summary>
            Is this database an Azure database?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.CaseSensitive">
            <summary>Indicates whether the database has been set up as case sensitive.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.Collation">
            <summary>The collation of the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.DbInfo">
            <summary>Script File Information *INTERNAL USE ONLY*</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.ConnectionProperties">
            <summary><![CDATA[]] Use Metadata.GetMetadata<DatabaseName> instead ]]></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.FullTextEnabled">
            <summary>True if the database has full text enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.DependenciesBuilder">
            <summary>The dependencies in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.Dependencies">
            <summary>The dependencies in the database.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.ClrAssemblyDependenciesBuilder">
            <summary>The dependencies of the CLR assemblies in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabase.ClrAssemblyDependencies">
            <summary>The dependencies of the CLR assemblies in the database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.SaveToDisk(System.String)">
            <summary>Saves the database to disk.</summary>
            <example>
            The example shows how you save and load a snapshot.
            <code lang="CS">
            //register a database using integrated security
            Database db1=new Database();
            db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            //save the database to disk
            db.SaveToDisk(@"c:\WidgetStaging.snp");
             
            Database db2=new Database();
            db2.LoadFromDisk(@"c:\WidgetStaging.snp");
             
            //dispose of the objects
            db.Dispose();
            db2.Dispose();
                </code>
            <code lang="VB">
            'register a database using integrated security
            Dim db1 As New Database()
            db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            'save the database to disk
            db.SaveToDisk("c:\WidgetStaging.snp")
             
            Dim db2 As New Database()
            db2.LoadFromDisk("c:\WidgetStaging.snp")
             
            'dispose of the objects
            db.Dispose()
            db2.Dispose()
                </code>
            </example>
            <param name="fileName">The name of the snapshot file to be created.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.SaveToStream(System.IO.Stream)">
            <summary>
            Writes the database snapshot to the specified stream. This is an alternative to the SaveToDisk method
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.SaveToFolder(System.String)">
            <summary>Saves the database as a set of creation scripts to the specified folder.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.SaveToFolder(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation)">
            <summary>Saves the database as a set of creation scripts to the specified folder.</summary>
            <param name="folderName"></param>
            <param name="dbInfo">
            Options to control how the script files are written to the folder - will be changed by the call
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.SaveToFolder(System.String,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator)">
            <summary>Saves the database as a set of creation scripts to the specified folder.</summary>
            <param name="folderName"></param>
            <param name="options">Options to control how the database objects are scripted out</param>
            <param name="dbInfo">
            Options to control how the script files are written to the folder - will be changed by the call
            </param>
            <param name="generator">Generator will be autodetected if none is specified.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.LoadFromDisk(System.String,System.Boolean,System.Nullable{RedGate.SQLCompare.Engine.Options})">
            <summary>Loads the database from disk.</summary>
            <remarks>Progress events are fired via the Status event.</remarks>
            <example>See <see cref="M:RedGate.SQLCompare.Engine.IDatabase.SaveToDisk(System.String)" /> for a code sample.</example>
            <param name="fileName">The name of the database snapshot file to load.</param>
            <param name="caseSensitiveComparison">
            Whether the comparison is case sensitive (from the project options). This is checked against the case
            sensitivity of the snapshot to ensure that they match.
            </param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.LoadFromStream(System.IO.Stream,System.Boolean,System.Nullable{RedGate.SQLCompare.Engine.Options})">
            <summary>
            Loads the database from a stream. This is an alternative to the LoadFromDisk method.
            </summary>
            <param name="f">The open stream from which to read the database.</param>
            <param name="caseSensitiveComparison">
            Whether the comparison is case sensitive (from the project options). This is checked against the case
            sensitivity of the snapshot to ensure that they match.
            </param>
            <param name="options"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.Register(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory)">
            <summary>Registers a database.</summary>
            <remarks>
            Connects to a database and retrieves all schema information. The database object can then be saved to disk or
            used in a comparison. Progress feedback is provided via the Status event.
            </remarks>
            <example>
            This example shows how you register a database from a live server, with feedback.
            <code lang="CS">
            using System;
            using RedGate.Legacy.ProgressTasks;
            using RedGate.SQLCompare.Engine;
             
            namespace ConsoleApplication2
            {
                public class Class1
                {
             
                    public static void Main()
                    {
                        Class1 c1=new Class1();
                        c.Run();
                    }
             
                    private void StatusCallback(object sender, StatusEventArgs e)
                    {
                        //fired by the SqlProvider to indicate events
             
                        if (e.Message!=null)
                        {
                            Console.WriteLine(e.Message);
                        }
             
                        if (e.Percentage!=-1)
                        {
                            Console.WriteLine("{0}%", e.Percentage);
                        }
             
                    }
             
                    private void Run()
                    {
                        Database db=new Database();
                        db.Status+=new StatusEventHandler(StatusCallback);
                        db.Register(new ConnectionProperties(".", "WidgetStaging"),Options.Default);
                        db.Dispose();
                    }
                }
            }
                </code>
            <code lang="VB">
            Option Explicit On 
             
            Imports RedGate.SQLCompare.Engine
             
            Module Module3
             
                Sub Main()
             
                    Dim c As Class1 = New Class1()
             
                    c.Run()
                    Console.WriteLine("Press [Enter]")
                    Console.ReadLine()
             
                End Sub
             
                Public Class Class1
             
                    Sub StatusCallback(ByVal sender As Object, ByVal e As StatusEventArgs)
             
                        If Not (e.Message Is Nothing) Then
                            Console.WriteLine(e.Message)
                        End If
             
                        If e.Percentage &lt;&gt; -1 Then
                            Console.WriteLine("{0}%", e.Percentage)
                        End If
             
             
                    End Sub
             
                    Sub Run()
             
                        Dim db As New Database()
                        db.Status = New StatusEventHandler(AddressOf Me.StatusCallback)
                        db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
                        db.Dispose()
                    End Sub
             
             
                End Class
            End Module
                </code>
            </example>
            <param name="connectionProperties">The connection properties associated with the database.</param>
            <param name="options">Options.</param>
            <param name="factory">Factory for creating DMV model objects</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.Register(RedGate.SQLCompare.Engine.LiveConnectionInstructions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDmvModelFactory)">
            <summary>
            Registers a database
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.Register(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Registers the database from creation scripts that are stored in the folder specified by the path parameter.
            </summary>
            <param name="path">The path to the folder that contains the creations scripts.</param>
            <param name="dbinfo">
            This is an optional parameter. If the specified folder contains the SQL Compare generated xml file with the
            necessary database information, it does not need to be specified. However, if the folder does not contain
            this information, or this information needs to be overriden, then this parameter must be set.
            </param>
            <param name="options">Options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.Register(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers the database from creation scripts that are stored in the folder specified by the path parameter.
            </summary>
            <param name="path">The path to the folder that contains the creations scripts.</param>
            <param name="dbinfo">
            This is an optional parameter. If the specified folder contains the SQL Compare generated xml file with the
            necessary database information, it does not need to be specified. However, if the folder does not contain
            this information, or this information needs to be overriden, then this parameter must be set.
            </param>
            <param name="options">Options.</param>
            <param name="filesToUse">
            A list of files to use for the register if this is set to null then any .sql file found under the path and
            it's subfolders will be used
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.Register(System.String,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.Options,System.Collections.Generic.IEnumerable{System.String},RedGate.SQLCompare.Engine.ReadFromFolder.Cache.IReadFromFolderCache,RedGate.SQLCompare.Engine.Model.DatabaseObjects.DatabaseFromFolderPopulator.IDatabaseFromFolderPopulator)">
            <summary></summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:RedGate.SQLCompare.Engine.SqlCompareException"></exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.RegisterForDataCompare(RedGate.SQLCompare.Engine.ConnectionProperties)">
            <summary>Registers a database for SQL Data Compare.</summary>
            <param name="connectionProperties">The connection properties to use for the database connection.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.RegisterForDataCompare(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Registers a database for SQL Data Compare.</summary>
            <param name="connectionProperties">The connection properties to use for the database connection.</param>
            <param name="options">Options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.RegisterForDependencyViewer(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Internal use only.</summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.RegisterGetObjectOwners(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Internal use only.</summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.RegisterForRefactoring(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.Options)">
            <summary>Internal use only.</summary>
            <param name="connectionProperties">Internal use only.</param>
            <param name="options">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.CreateEmptyTarget(System.Boolean)">
            <summary>For internal use only</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the database with another database.</summary>
            <returns>
            A <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection containing the differences between the two databases.
            </returns>
            <remarks>
                <para>
                When two databases have been compared they can be synchronized using the
                <see cref="T:RedGate.SQLCompare.Engine.Work" /> class. Note that all objects that differ are selected for synchronization by default.
                </para>
                <para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <example>
            This example shows how you compare two databases and print out a summary of the differences.
            <code lang="CS">
            Database db1=new Database();
            Database db2=new Database();
             
            db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
            db2.Register(new ConnectionProperties(".", "WidgetProduction"), Options.Default);
             
            Differences differences=db1.CompareWith(db2, Options.Default);
             
            foreach (Difference difference in differences)
            {
                Console.WriteLine("{0} {1} {2}", difference.Type.ToString(), difference.DatabaseObjectType.ToString(), difference.Name);
            }
             
            //dispose of the objects
            db1.Dispose();
            db2.Dispose();
                </code>
            <code lang="VB">
            Dim db1 As New Database()
            Dim db2 As New Database()
             
            db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
            db2.Register(New ConnectionProperties(".", "WidgetProduction"), Options.Default)
             
            Dim differences As Differences = db1.CompareWith(db2, Options.Default)
             
            Dim difference As Difference
             
            For Each difference In differences
                Console.WriteLine("{0} {1} {2}", difference.Type.ToString(), difference.DatabaseObjectType.ToString(), difference.Name)
            Next
             
            'dispose of the objects
            db1.Dispose()
            db2.Dispose()
                </code>
            </example>
            <param name="targetDatabase">The database to compare with.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>Compares the database with another database.</summary>
            <returns>
            A <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection containing the differences between the two databases.
            </returns>
            <remarks>
                <para>
                When two databases have been compared they can be synchronized using the
                <see cref="T:RedGate.SQLCompare.Engine.Work" /> class. Note that all objects that differ are selected for synchronization by default.
                </para>
                <para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <param name="targetDatabase">The database to compare with.</param>
            <param name="options">Comparison options.</param>
            <param name="ownerMappings">Owner mappings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.SqlCompareOwnerMappings,RedGate.SQLCompare.Engine.SqlCompareTableMappings)">
            <summary>Compares the database with another database.</summary>
            <returns>
            A <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection containing the differences between the two databases.
            </returns>
            <remarks>
                <para>
                When two databases have been compared they can be synchronized using the
                <see cref="T:RedGate.SQLCompare.Engine.Work" /> class. Note that all objects that differ are selected for synchronization by default.
                </para>
                <para>Progress feedback is provided via the Status event.</para>
            </remarks>
            <param name="targetDatabase">The database to compare with.</param>
            <param name="options">Comparison options.</param>
            <param name="ownerMappings">Owner mappings.</param>
            <param name="tableMappings">Table mappings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.GetDependencyStacks">
            <summary>For internal use only.</summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabase.GetObjectCollectionByType(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>Returns a readonly collection of database objects, of the specified type.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.InvalidSnapshotFileException">
            <summary>An exception thrown when a snapshot is invalid.</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.InvalidSnapshotFileException.Type">
            <summary>Information about the snapshot if there was a failure.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.InvalidSnapshotType">
            <summary>An enumeration of the errors that can occur when reading a snapshot.</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="F:RedGate.SQLCompare.Engine.InvalidSnapshotType.FileNotFound">
            <summary>The file is not found.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.InvalidSnapshotType.InvalidFile">
            <summary>Invalid file.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Mapping`1">
            <summary>Abstract class used to contain a mapping between two database objects.</summary>
            <typeparam name="T">The type stored in the mappings.</typeparam>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mapping`1.m_obj1">
            <summary>The object in the first database or null.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mapping`1.m_obj2">
            <summary>The object in the second database or null.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.#ctor(`0,`0)">
            <summary>
            Creates a new mapping from obj1 to obj2. <see cref="P:RedGate.SQLCompare.Engine.Mapping`1.Include" /> is set to true if both objects are not null.
            </summary>
            <param name="obj1">Database object in 1 or null.</param>
            <param name="obj2">Database object in 2 or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mapping`1.Messages">
            <summary>
            Messages that explain any issues concerning the mapping; null if no issues exist.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.#ctor(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>Shallow copy constructor.</summary>
            <param name="copy">Mapping object to copy.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mapping`1.Obj1">
            <summary>Returns the object from the first database</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mapping`1.Obj2">
            <summary>Returns the object from the second database</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mapping`1.Include">
            <summary>Specifies whether the mapping is to be included.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.CompareTo(RedGate.SQLCompare.Engine.Mapping{`0})">
            <summary>Sorts the Mappings.</summary>
            <returns>
            Less than zero when this instance is less than the specified object; zero when this instance is equal to the
            specified object; greater then zero when this instance is greater than the specified object.
            </returns>
            <param name="obj">The object to be compared.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mapping`1.System#ICloneable#Clone">
            <summary>Creates a shallow copy.</summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PrepareStringDelegate`2">
            <summary>Creates the name used for comparing two objects when creating mappings.</summary>
            <param name="obj">The object for which the name is to be generated.</param>
            <param name="useFullName">
            If <em>true</em>, uses the fully-qualified name. If <em>false</em>, uses the name.
            </param>
            <param name="context">
            The context object passed back from the <see cref="T:RedGate.SQLCompare.Engine.Mappings`3">Mappings</see> class.
            </param>
            <typeparam name="TMap">The type stored in the mapping.</typeparam>
            <typeparam name="TContext">The type of the context object.</typeparam>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectMapping">
            <summary>
            Contains a mapping from a schema level object to another schema level object. Also contains information on
            the criteria used for matching the two schema level objects, which can be based on an level 2 object or an
            arbitrary set of mapped fields.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMapping.#ctor(RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.SchemaObjectMappingStatus)">
            <summary>Constructor. Calls the base constructor and initializes the index mappings.</summary>
            <param name="obj1">The view or table in the first database.</param>
            <param name="obj2">The view or table in the second database.</param>
            <param name="status">The status of the mapping.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectMapping.Include">
            <summary>The include property for tables.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectMapping.Status">
            <summary>The status of the Table Mapping.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMapping.Clone">
            <summary>Creates a shallow copy.</summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectMappingCategories">
            <summary>
            This enum contains schema object categories. This is used to decide what to include in the schem mappings (no
            need to create a full mapping!)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectMappingStatus">
            <summary>The result of the mapping.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObjectMappingStatus.Success">
            <summary>The mapping was successful.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObjectMappingStatus.UnableToCompare">
            <summary>
            The mapping succeeded, but SQL Compare is unable to compare. This is usually because of type comparison
            failure.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SchemaObjectMappingStatus.PartialSuccess">
            <summary>The mapping was a partial success; some columns remain unmapped.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings">
            <summary>
            Holds mappings for the schema or owners between the two databases. Uses the database objects to create the
            mappings for the views and the tables from the two databases.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_IsTrivialMapping">
            <summary>
            To keep track if the mapping has been modified (any split/join, even if the result is trivial)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.m_Level1ObjectMappings">
            <summary>The table mappings is for all schemas, users or roles</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.SchemaObjectMappings">
            <summary>Returns the schema object mappings for the databases.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CaseSensitive">
            <summary>True if the keys are case-sensitive.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor(RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>Shallow copy constructor.</summary>
            <param name="ownerMappings"><see cref="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings" /> to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor">
            <summary>Default constructor, with case-sensitive mapping keys and auto column mapping</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor(System.Boolean,System.Boolean)">
            <summary>Constructor specifying case-sensitivity and auto mapping of columns</summary>
            <param name="caseSensitive">
            If true, the mappings will be done using case-sensitive keys. If false, the keys will be case-insensitive
            </param>
            <param name="autoMapColumns">Whether or not similar columns should be mapped automatically</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.#ctor(System.Boolean,System.Boolean,RedGate.SQLCompare.Engine.PrepareStringDelegate{RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.MappingContext})">
            <summary>
            Constructor specifying case-sensitivity, auto mapping of columns and a delegate function to control
            object name casing.
            </summary>
            <param name="caseSensitive">
            If true, the mappings will be done using case-sensitive keys. If false, the keys will be case-insensitive
            </param>
            <param name="autoMapColumns">Whether or not similar columns should be mapped automatically</param>
            <param name="schemaObjectPrepareString">Delegate to control how object names are handled</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.GetKey(System.String)">
            <summary>Return the key that should be used for the specified fully qualified name.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CreateMappings(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database)">
            <summary>
            Creates a mapping for each owner or schema in the database where such a mapping is possible.
            </summary>
            <param name="db1">The first database, or null.</param>
            <param name="db2">The second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.RequiredFakeSchemas(RedGate.SQLCompare.Engine.Database)">
            <summary>SC-4256</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.MapDatabase(System.Boolean)">
            <summary>Maps the specified database according to the current mappings.</summary>
            <param name="first">
            If true, <see cref="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Database1" /> is mapped. If false, <see cref="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Database2" /> is mapped.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.MapDatabase(System.Boolean,RedGate.Legacy.ProgressTasks.StatusEventHandler)">
            <summary>Maps the specified database according to the current mappings.</summary>
            <param name="first">
            If true, <see cref="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Database1" /> is mapped. If false, <see cref="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Database2" /> is mapped.
            </param>
            <param name="status"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Owners">
            <summary>Internal use only</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Owners.#ctor(System.Boolean)">
            <summary>Internal use only</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Owners.Add(RedGate.SQLCompare.Engine.IOwner)">
            <summary>Adds an <see cref="T:RedGate.SQLCompare.Engine.IOwner" /> to this collection.</summary>
            <param name="owner">The owner object to add.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Owners.GetKey(RedGate.SQLCompare.Engine.IOwner)">
            <summary>For internal use.</summary>
            <param name="value">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Join(RedGate.SQLCompare.Engine.IOwner,RedGate.SQLCompare.Engine.IOwner)">
            <summary>
            Called to join two schemas or users tables together. For each schema or user, attempts to map the tables and
            views in the specified schema or belonging to the specified user. Any tables mapped in the schema or
            belonging to the user will be
            <see cref="M:RedGate.SQLCompare.Engine.Mappings`3.Split(`0)" />.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">
            SchemaMappings.Join must be called with Schema or Users
            arguments.
            </exception>
            <param name="obj1">The schema or user in the first database.</param>
            <param name="obj2">The schema or user in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.Split(RedGate.SQLCompare.Engine.Mapping{RedGate.SQLCompare.Engine.IOwner})">
            <summary>
            Splits apart a mapping and creates two mappings, one to null and one from null.
            </summary>
            <param name="old1">The mapping to be split. Both obj1 and obj2 should be not null.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.IsTrivialMapping">
            <summary>
            Indicates whether a mapping is trivial or not. A trivial mapping is one that maps every owner to itself.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareOwnerMappings.CancelOperation">
            <summary>Cancels the current operation.</summary>
            <remarks>An <see cref="T:System.OperationCanceledException" /> will be thrown.</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MappingOptions">
            <summary>Options used when generating the mapping between two databases.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.Default">
            <summary>
                <para>The default options when generating the mappings. These are:</para>
                <list type="bullet">
                    <item>IgnoreCase</item>
                    <item>IgnoreSpaces</item>
                    <item>IncludeIdentities</item>
                    <item>IncludeTimestamps</item>
                </list>
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.CaseSensitiveObjectDefinition">
            <summary>
            Ignores the case of the object names (tables, views, users, roles, schemas, indexes, and columns) when
            mapping. For example, [dbo].[Widget] is considered to be the same as [dbo].[widget] when you select this
            option.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.IgnoreSpaces">
            <summary>
            Ignores the spaces in the object names (tables, views, users, roles, schemas, indexes, and columns) when
            mapping. For example, [dbo].[Widget Prices] is considered to be the same as [dbo].[WidgetPrices] when you
            select this option.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.IgnoreUnderscores">
            <summary>
            Ignores the underscores in the object names (tables, views, users, roles, schemas, indexes, and columns) when
            mapping. For example, [dbo].[Widget_Prices] is considered to be the same as [dbo].[WidgetPrices] when you
            select this option.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.MissingFrom2AsInclude">
            <summary>
            When the object does not exist in the second database, the Mapping status is set to <em>success</em> and
            include is set to <em>true</em>.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.IncludeTimestamps">
            <summary>
            Includes timestamp columns from the tables or views in the schema information for the database. Timestamp
            columns cannot be synchronized.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.IncludeIndexedViews">
            <summary>
            Includes views in the schema information for the database. Views can be synchronized only if the referenced
            rows are from a single table, and the referenced columns are simple (for example, they must not include
            identity columns or computed columns).
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.IncludeIdentities">
            <summary>
            Includes identity columns from the tables or views in the schema information for the database. You cannot
            synchronize views if they include an identity column.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.MissingFrom1AsInclude">
            <summary>
            This option is only used by SQL Source Control to get the diffs correct for conflicts in the ODP. If you
            start using this option elsewhere, please modify this text.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.MappingOptions.ExcludeNewTablesByDefault">
            <summary>
            Indicates if new tables should not be selected for comparison by default. THis is used by SQL Data Compare UI 
            to determine if user actions should be recorded as includes or excludes in the project file
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.ExtendedProperties">
            <summary>Database-level extended properties.</summary>
            <remarks>
            The collection contains extended properties that have been defined at the database level. Individual database
            objects (such as tables and users) can also have extended properties defined on them.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Tables">
            <summary>The tables in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.StoredProcedures">
            <summary>The stored procedures in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Views">
            <summary>The views in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Defaults">
            <summary>The defaults in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.UserDefinedTypes">
            <summary>The user-defined types in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Rules">
            <summary>The rules in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Functions">
            <summary>The user-defined functions in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Users">
            <summary>The users in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Triggers">
            <summary>The DML triggers in the database.</summary>
            <remarks>This will not be implemented for a while, hence it is internal now. Dead code!</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.ISessionSetObjects">
            <summary>The DML triggers in the database.</summary>
            <remarks>This will not be implemented for a while, hence it is internal now. Dead code!</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.DdlTriggers">
            <summary>The DDL triggers in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Roles">
            <summary>The roles in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Schemas">
            <summary>
            The schemas in the database. Note that schemas were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Assemblies">
            <summary>
            The CLR assemblies in the database. Note that CLR assemblies were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.MessageTypes">
            <summary>
            The message types in the database. Note that message types were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Synonyms">
            <summary>
            The synonyms in the database. Note that synonyms were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.EventNotifications">
            <summary>
            The database-level event notifications in the database. Note that event notifications were introduced in SQL
            Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Routes">
            <summary>
            The routes in the database. Note that routes were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Queues">
            <summary>
            The queues in the database. Note that queues were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Contracts">
            <summary>
            The contracts in the database. Note that contracts were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Services">
            <summary>
            The services in the database. Note that services were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.XmlSchemaCollections">
            <summary>
            The XML schema collections in the database. Note that XML schema collections were introduced in SQL Server
            2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.PartitionSchemes">
            <summary>
            The partition schemes in the database. Note that partitions schemes were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.PartitionFunctions">
            <summary>
            The partition functions in the database. Note that partition functions were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.ServiceBindings">
            <summary>
            The service bindings in the database. Note that service bindings were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Certificates">
            <summary>
            The certificates in the database. Note that certificates were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.SymmetricKeys">
            <summary>
            The symmetric keys in the database. Note that symmetric keys were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.AsymmetricKeys">
            <summary>
            The asymmetric keys in the database. Note that asymmetric keys were introduced in SQL Server 2005.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.FullTextCatalogs">
            <summary>The full-text catalogs in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.Sequences">
            <summary>
            The sequence objects in the database. Note that these were introduced in SQL Server 2012
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.FullTextStoplists">
            <summary>The full-text stoplists in the database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ObjectCollections.SecurityPolicies">
            <summary>
            The security policies in the database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectCollections.GetObjectCollectionByType(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>Returns a readonly collection of database objects, of the specified type.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectCollections.GetDatabaseObject(System.String)">
            <summary>
            Get database object by two-part name
            </summary>
            <param name="name">The name of the object to find in the whole database</param>
            <returns>The object if found, NULL on not found</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectCollections.GetDatabaseObjects``1">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseExtensions">
            <summary>
            Extension methods on Database / IDatabase
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseExtensions.GetMetadata``1(RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            A shortcut to make database.Metadata.GetMetadata a bit less redundant
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ICancellationStatus.Cancel">
            <summary>Indicates whether the database registration has been canceled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IVersionedDatabase.ServerMajorVersion">
            <summary>
            The major server version of the SQL Server for the database. This does not change if the database is running
            in compatibility mode.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IVersionedDatabase.MajorVersion">
            <summary>
            The major version of the SQL Server for the database. This reflects the compatibility mode of the database.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IVersionedDatabase.SqlServerVersionInfo">
            <summary>
            Information about the version of SQL Server this database exists on, including version number, 
            compatibility level, internal version and whether or not it's an Azure database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollections.IndexesExtensions.Relational(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Index})">
            <summary>An IEnumerable of all the relational indexes in this collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollections.IndexesExtensions.Xml(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Index})">
            <summary>An IEnumerable of all the xml indexes in this collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollections.IndexesExtensions.Spatial(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Index})">
            <summary>An IEnumerable of all the spatial indexes in this collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollections.IndexesExtensions.ColumnstoreIndexes(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Index})">
            <summary>An IEnumerable of all the columnstore indexes in this collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollections.IndexesExtensions.Statistics(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Index})">
            <summary>An IEnumerable of all the statistics in this collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollections.IndexesExtensions.WillBeInlined(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Index},RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>An IEnumerable of all the indexes that will be inlined</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectCollections.IndexesExtensions.WillNotBeInlined(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Index},RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>An IEnumerable of all the indexes that will not be inlined</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ReadOnlyDatabaseObjectCollectionWrapper`1.Item(System.String)">
            <summary>Returns elements by key.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SearchPropertyLists.SerializeItem(RedGate.SQLCompare.Engine.SearchPropertyList,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SearchPropertyLists.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Sequences.SerializeItem(RedGate.SQLCompare.Engine.Sequence,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Sequences.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FileTable">
            <summary>
            Filetables are a new feature in 2012 that provide a filestream view of a folder/file hierarchy.
            </summary>
            <remarks>
            They're basically just regular tables, except that all of the default schema is set in stone, while the user
            can add extra constraints, triggers and so on. We need to be able to compare the added stuff while making
            sure that the default stuff is not changed. So we just pretend that the system-defined objects don't exist.
            This is done by overriding the collections for these objects to filter out system-defined objects - note that
            this means that any operations that manipulate the object lists such as adding or sorting items must use eg
            the AllIndexes property instead. This only really affects DatabaseFactory/ReadFromFolder* This might be
            improved by, instead of hiding the fields everywhere and whitelisting places we need them, having the fields
            exist as normal, and the deployment code filter them out where they aren't needed. This has the advantage of
            making the FileTable code happen in places such as FileTable.GetSQL and methods specifically related to
            FileTables rather than arbitrarily scattered across the codebase. Filetables can also only be created using
            AS FILETABLE rather than constructing the default schema explicitely, so we need to take that into account if
            we try and rebuild one I'm not sure if we need to worry about making sure the database is set up for
            filestream/filegroup stuff if we're deploying to a database that doesn't have those
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.FileTable.UnknownDirName">
            <summary>
            This is a hack to make backup support partially work - the dirname/collation don't seem to be accessible with
            the current backup reader but we can at least compare the other stuff
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FileTable.SystemDefinedObjectIDs">
            <summary>
            This is a list of all the objects (constraints, indices, etc) that were created along with the filetable and
            cannot be modified directly
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IShouldWriteStorageSettings.ShouldWriteFileGroupOrPartitionScheme">
            <summary>Whether (disregarding any options) the filegroup should be written out</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ISessionSetObject.QuotedIdentifierOn">
            <summary>
            Returns a value indicating if quoted identifier is on in the object definition.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ISessionSetObject.AnsiNullsOn">
            <summary>Returns a value indicating if ANSI nulls are on in the object definition.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ISessionSetObject.SetSessionOptions(System.Boolean,System.Boolean)">
            <summary>Override the session set options stored in the object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ISystemNameable">
            <summary>
            Indicates an object which can be given an automatically-generated name by SQL Server that we might not care
            about
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SearchPropertyList">
            <summary>
            A list of search properties we can attach to a fulltext index which lets the index search those properties on
            a document as well as the document text
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SearchPropertyList.ObjectType">
            <summary>The type of the object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SearchPropertyList.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares two database objects.</summary>
            <returns>
            <em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SearchPropertyList.ComparePropertyLists(RedGate.SQLCompare.Engine.SearchPropertyList,System.Collections.Generic.List{RedGate.SQLCompare.Engine.SearchProperty}@,System.Collections.Generic.List{RedGate.SQLCompare.Engine.SearchProperty}@)">
            <summary>
            Compare this property list to the target, and output the properties that would need to be added and removed
            to change target to this
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SearchPropertyList.ExtraScriptSources">
            <summary>
            Since the property list can only be created with extra ALTER statements, we can have multiple script sources.
            ScriptSource always refers to the main CREATE statement and these refer to the ADD PROPERTY statements. When
            a scripts folder is modified, then all of these sources are blanked out and ScriptSource is replaced with the
            full SQL for the SPL to try and keep things tidy.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SearchPropertyList.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <param name="targetFeatures"></param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Sequence.ObjectType">
            <summary>The type of the object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Sequence.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares two database objects.</summary>
            <returns>
            <em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Sequence.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <param name="targetFeatures"></param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesArray.AddDependency(System.Int32,System.Int32,System.Boolean)">
            <summary>For internal use only.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesArray.GetIds(System.UInt64,System.Int32@,System.Int32@)">
            <summary>For internal use only.</summary>
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DependenciesBuilder">
            <summary>The core object dependencies within a database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesBuilder.AddDependency(System.Int32,System.Int32,System.Boolean)">
            <summary>For internal use only.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesBuilder.Expand(RedGate.SQLCompare.Engine.ICancellationStatus)">
            <summary>
            Expand transitive dependencies, so if A depends on B depends on C,
            then A is explicitly considered to depend on C
            </summary>
            <param name="database">Used to make this method cancelable. Can be null</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DependenciesBuilder.GetEnumerator">
            <summary>For internal use only.</summary>
            <returns>A <see cref="T:System.Collections.Generic.KeyValuePair`2" /> of id and dependency id</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExpressionDependencyInfo">
            <summary>
            Used to pass information on expression dependencies (obtained from sys.sql_expression_dependencies) when
            building the <see cref="T:RedGate.SQLCompare.Engine.Dependencies">Dependencies</see> data structure in
            <see cref="T:RedGate.SQLCompare.Engine.Database">Database</see> from <see cref="T:RedGate.SQLCompare.Engine.Registration.ModelFactory.DatabaseFactory">DatabaseFactory</see>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseObjectExtensions">
            <summary>
            Extension methods for IDatabaseObject
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectExtensions.GetIdFromObject(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            The sysobject identifyer of the object, or 0 of it is not sysobject identifyable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtensionMethods.DifferenceExtensions.SelectAll(RedGate.SQLCompare.Engine.Differences)">
            <summary>
            Set the selectedness state of all differences to <code>true</code>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtensionMethods.DifferenceExtensions.IsDataSync(RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Returns true iff <paramref name="difference"/>refers to an object that is in the DataSync schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtensionMethods.DifferenceExtensions.IsDataSync(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Returns true iff <paramref name="databaseObject"/> is in the DataSync schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtensionMethods.DifferenceExtensions.GetSourceDatabase(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Gets the source database, i.e. the one representing the desired schema at the end of a deployment
            </summary>
            <remarks>
            Ideally we want to push up knowledge of the <paramref name="runOnTwo"/>, but the public API currently allows it to be set differently for each operation.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtensionMethods.DifferenceExtensions.GetTargetDatabase(RedGate.SQLCompare.Engine.Differences,System.Boolean)">
            <summary>
            Gets the target database, i.e. the one representing the schema at the start of deployment
            </summary>
            <remarks>
            Ideally we want to push up knowledge of the <paramref name="runOnTwo"/>, but the public API currently allows it to be set differently for each operation.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageBase.Text">
            <summary>The text of the message.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageBase.DatabaseObject">
            <summary>The database object to which this message belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageBase.MessageTypeID">
            <summary>The identifier of the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageBase.WarningSeverity">
            <summary>The severity of the message or warning.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.OldOptions">
            <summary>
            This enum is only used to record the old option values so that we can still parse old integer representations.
            Use <see cref="T:RedGate.SQLCompare.Engine.Options"/> instead.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Option">
            <summary>
            This enum is used to store the names of options and assign each of them a unique value
            </summary>
            <remarks>
            The duplication between this enum and the equivalent fields on <see cref="T:RedGate.SQLCompare.Engine.Options" /> is annoying.
            Alternatives include: - removing this list and using reflection on Options fields to reproduce it (pros:
            makes handling Default/Ssdt easier, cons: is a terrible terrible hack) - removing the fields on Options and
            changing everything to use a mix of Option and Options (pros: is probably the morally right thing to do,
            cons: means changing a whole lot of code and making it more complicated) Ideally we could get some sort of
            composite pattern going between Option and Options, but when one is a struct and the other is an enum that
            doesn't seem likely.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Option.DisableSocForLiveDbs">
            <remarks>
            THIS MUST BE THE LAST OPTION (otherwise subsequent options will be assigned to the be equal to 
            the options after IgnoreMigrationScripts). C# assigns incrementing integer values to each enum 
            value, but restarts the count if we ever assign something explicitly. See 
            https://msdn.microsoft.com/en-us/library/whbyts4t.aspx for more information.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SourceControlInfo.Empty">
            <summary>
            A SourceControlInfo that doesn't contain any source control information
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareFieldMapping">
            <summary>Contains a mapping from a field in one table to a field in another table.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMapping.#ctor(RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.SqlCompareFieldMappingStatus)">
            <summary>Constructor. Calls the base constructor.</summary>
            <param name="obj1">The field in the first database.</param>
            <param name="obj2">The field in the second database.</param>
            <param name="status">The status of the mapping.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareFieldMapping.ValidForMatching">
            <summary>Specifies whether the FieldMapping can be used in a matching mapping.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareFieldMapping.Status">
            <summary>The status of the field mapping.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMapping.CompareTo(RedGate.SQLCompare.Engine.Mapping{RedGate.SQLCompare.Engine.IField})">
            <summary>
            Sorts the FieldMappings by fully-qualified name in the first database; if null in the first database, sorts
            by fully-qualified name in the second database.
            </summary>
            <returns>
            Less than zero when this instance is less than the specified object; zero when this instance is equal to the
            specified object; greater then zero when this instance is greater than the specified object.
            </returns>
            <param name="obj">The object to be compared.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMapping.Clone">
            <summary>Creates a shallow copy of the field mapping.</summary>
            <returns>A shallow copy of the field mapping.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareFieldMappings">
            <summary>Holds mappings for fields in a table or view.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.#ctor(RedGate.SQLCompare.Engine.SqlCompareTableMapping,RedGate.SQLCompare.Engine.MappingContext,System.Boolean)">
            <summary>The default constructor.</summary>
            <param name="parent">Table to which this FieldMappings class belongs.</param>
            <param name="autoMapColumns">Whether or not similar columns should be mapped automatically</param>
            <param name="context">Case sensitivity</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.#ctor(RedGate.SQLCompare.Engine.SqlCompareTableMapping,RedGate.SQLCompare.Engine.Mappings{RedGate.SQLCompare.Engine.SqlCompareFieldMapping,RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.MappingContext})">
            <summary>Shallow copy constructor.</summary>
            <param name="parent">Table to which this FieldMappings class belongs.</param>
            <param name="fieldMappings">The field mappings to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.#ctor(RedGate.SQLCompare.Engine.SqlCompareTableMapping,RedGate.SQLCompare.Engine.SqlCompareFieldMappings,System.Boolean)">
            <summary>Shallow copy constructor for matching mappings.</summary>
            <param name="parent">Table to which this FieldMappings class belongs.</param>
            <param name="fieldMappings"><see cref="T:RedGate.SQLCompare.Engine.SqlCompareFieldMappings" /> to copy.</param>
            <param name="isMatching">true for matching mappings; false otherwise.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.CreateMappings(RedGate.SQLCompare.Engine.Fields,RedGate.SQLCompare.Engine.Fields)">
            <summary>
            Creates a mapping for each object in the collection for which such a mapping is possible.
            </summary>
            <param name="in1">List of objects in the first database, or null.</param>
            <param name="in2">List of objects in the second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.ComputeLevenshteinDistance(System.String,System.String)">
            <summary>
            Compute the distance between two strings.  This was moved from SHU and unfortunately had no tests around it.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.ShouldInclude(RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.IField,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.Join(RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.IField)">
            <summary>
            Joins two fields in the different databases, and returns the created mapping. The mapping may not have its
            status set as <em>Success</em> if the field types are incompatible.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">FieldMappings. Join must be called with Field arguments.</exception>
            <param name="field1">The field in the first database.</param>
            <param name="field2">The field in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.CanBeMapped(RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.IField)">
            <summary>
            Returns <em>true</em> if the two fields can be mapped together because the types can be compared by the SQL
            Data Compare engine.
            </summary>
            <returns><em>true</em> if the types are comparable; otherwise <em>false</em>.</returns>
            <param name="field1">The field from the first database.</param>
            <param name="field2">The field from the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareFieldMappings.OnValidate(RedGate.SQLCompare.Engine.Mapping{RedGate.SQLCompare.Engine.IField})">
            <summary>Performs additionl custom proccesses when validating a value.</summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.ArgumentException">
            <see cref="T:RedGate.SQLCompare.Engine.SqlCompareFieldMappings" /> only supports <see cref="T:RedGate.SQLCompare.Engine.SqlCompareFieldMapping" /> objects.
            </exception>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareFieldMappingStatus">
            <summary>The result of the <see cref="T:RedGate.SQLCompare.Engine.SqlCompareFieldMapping" />.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareFieldMappingStatus.Success">
            <summary>Mapping success.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareFieldMappingStatus.UnableToCompare">
            <summary>
            Mapping succeeded but SQL Data Compare is still unable to compare the databases. This is usually because of
            type comparison failure.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareTableMapping">
            <summary>
            Contains a mapping from a view or table to another view or table. Also contains information on the criteria
            used for matching the two tables, which can be based on an index or an arbitrary set of mapped fields.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMapping.#ctor(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.SqlCompareTableMappingStatus,System.Boolean,System.Boolean)">
            <summary>Constructor. Calls the base constructor and initializes the index mappings.</summary>
            <param name="obj1">The view or table in the first database.</param>
            <param name="obj2">The view or table in the second database.</param>
            <param name="status">The status of the mapping.</param>
            <param name="caseSensitive">Case sensitivity</param>
            <param name="autoMapColumns">Whether or not similar columns should be mapped automatically</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMapping.#ctor(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.SqlCompareTableMappingStatus,RedGate.SQLCompare.Engine.MappingContext,System.Boolean)">
            <summary>Constructor. Calls the base constructor and initializes the index mappings.</summary>
            <param name="obj1">The view or table in the first database.</param>
            <param name="obj2">The view or table in the second database.</param>
            <param name="status">The status of the mapping.</param>
            <param name="context">The mapping context</param>
            <param name="autoMapColumns">Whether or not similar columns should be mapped automatically</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareTableMapping.FieldMappings">
            <summary>Returns the field mappings for the tables.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareTableMapping.Include">
            <summary>The include property for tables.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMapping.RefreshMappingStatus">
            <summary>
                <para>
                Checks the current contents of <see cref="P:RedGate.SQLCompare.Engine.SqlCompareTableMapping.FieldMappings" />
                to determine whether the current TableMapping can be compared.
                </para>
                <para>
                If the TableMapping can be compared, the
                <see cref="T:RedGate.SQLCompare.Engine.SqlCompareTableMappingStatus">TableMapping Status</see> is set to Success; otherwise the
                Status is set to UnableToCompare. If not all of the fields in the table are mapped successfully, if the
                Status is not already set to UnableToCompare, it is set to PartialSuccess.
                </para>
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlCompareTableMapping.Status">
            <summary>The status of the Table Mapping.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMapping.Clone">
            <summary>Creates a shallow copy.</summary>
            <returns>A shallow copy.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareTableMappingStatus">
            <summary>The result of the mapping.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareTableMappingStatus.Success">
            <summary>The mapping was successful.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareTableMappingStatus.UnableToCompare">
            <summary>
            The mapping succeeded, but SQL Data Compare is unable to compare. This is usually because of type comparison
            failure.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlCompareTableMappingStatus.PartialSuccess">
            <summary>The mapping was a partial success; some columns remain unmapped.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseObjectExistsException">
            <summary>
            Exception thrown when a matching <see cref="T:RedGate.SQLCompare.Engine.IDatabaseObject"/> already exists in a collection.
            It is a <see cref="T:RedGate.SQLCompare.Engine.DuplicateObjectNameException"/> that stores which <see cref="T:RedGate.SQLCompare.Engine.IDatabaseObject"/>
            was found to already exist.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectExistsException.Object">
            <summary>
            The <see cref="T:RedGate.SQLCompare.Engine.IDatabaseObject"/> that was found to have a matching object already defined.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectExistsException.#ctor(RedGate.SQLCompare.Engine.IDatabaseObject,System.Boolean,System.String)">
            <summary>
            Constructs a DatabaseObjectExistsException.
            </summary>
            <param name="dbObject">The database object that caused the collision</param>
            <param name="isCaseInsensitiveCollision">Whether the existing object's name differed only by case</param>
            <param name="objectNameForException">The object name to display in the exception message.
            If null, the <see cref="P:RedGate.Shared.ComparisonInterfaces.TSql.ITSqlObject.FullyQualifiedName"/> of <paramref name="dbObject"/> is used.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The serialization constructor.
            Note - the <see cref="P:RedGate.SQLCompare.Engine.DatabaseObjectExistsException.Object"/> property is not preserved across serialization
            boundaries because <see cref="T:RedGate.SQLCompare.Engine.IDatabaseObject"/> implementations might not be <see cref="T:System.SerializableAttribute" />.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectExistsException.ThrowIfDuplicateObject``1(System.String,System.Collections.Generic.Dictionary{System.String,``0},``0,System.Func{``0,System.String})">
            <summary>
            Throws a <see cref="T:RedGate.SQLCompare.Engine.DatabaseObjectExistsException"/> if <paramref name="key"/> already exists in
            <paramref name="existingObjects"/> (based on that dictionary's default Comparer).
            This method will detect case-insensitive collision scenarios (where the existing object key
            differs from key only by case) and set the appropriate flag in the exception.
            </summary>
            <typeparam name="T">the value type of <paramref name="existingObjects"/></typeparam>
            <param name="key">The key we're going to add to <paramref name="existingObjects"/></param>
            <param name="existingObjects">The dictionary of existing key/object pairs</param>
            <param name="dbObject">The <see cref="T:RedGate.SQLCompare.Engine.IDatabaseObject"/> that we want to add to <paramref name="existingObjects"/></param>
            <param name="getObjectNameForException">Provides the object name to use in the exception message.
            Only called when the exception is thrown.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextStoplists">
            <summary>A collection of full text stoplists.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStoplists.SerializeItem(RedGate.SQLCompare.Engine.FullTextStoplist,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStoplists.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SerializableDatabaseObjectCollection`1">
            <summary>A collection of database objects that can be serialized to disk.</summary>
            <typeparam name="T">The type stored in the collection.</typeparam>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SerializableDatabaseObjectCollection`1.Item(System.String,System.String)">
            <summary>Returns a database object given its owner and name.</summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableDatabaseObjectCollection`1.GetKey(`0)">
            <summary>For internal use.</summary>
            <param name="value">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TableFields">
            <summary>A collection of Fields belonging to several different tables</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey">
            <summary>An asymmetric key.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption">
            <summary>How the private key of the asymmetric key is encrypted.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.NotAvailable">
            <summary>NA = There is no private key for the asymmetric key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.MasterKey">
            <summary>MK = Private key is encrypted by the master key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.PrivateKey">
            <summary>PW = Private key is encrypted by a user-defined password.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.ServiceKey">
            <summary>SK = Private key is encrypted by the service master key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyKeyEncryption.Unknown">
            <summary>Unknown = Private key is encrypted by something else, probably a hardware crypto device.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm">
            <summary>The asymmetric key encryption algorithm.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA512">
            <summary>1R = RSA 512</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA1024">
            <summary>2R = RSA 1024</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.RSA2048">
            <summary>3R = RSA 2048</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.AsymmetricKey.AsymmetricKeyEncryptionAlgorithm.Unknown">
            <summary>Unknown = probably NA / hardware crypto device - fix for SC-8138</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.ObjectType">
            <summary>Returns ObjectType.AsymmetricKey</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.ThumbPrint">
            <summary>The thumb print for the asymmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.KeyAlgorithm">
            <summary>The key algorithm.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.KeyLength">
            <summary>The length of the asymmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.AsymmetricKey.PrivateKeyEncryption">
            <summary>The encryption type of the asymmetric key's private key.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKey.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the asymmetric key with a specified asymmetric key.</summary>
            <returns>
            <em>True</em> if the asymmetric keys are identical; otherwise,
            <em>false.</em>
            </returns>
            <param name="targetObject">The asymmetric key to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKey.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options, for example quoted identifier on or off.</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.AsymmetricKeys">
            <summary>A collection of asymmetric keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKeys.SerializeItem(RedGate.SQLCompare.Engine.AsymmetricKey,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.AsymmetricKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IReadOnlyDictionary`2">
            <summary>
            Let's remove this once we move to .NET 4+
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of key/value collection pairs.
            </summary>
            <returns>
            The number of key/value collection pairs.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element that has the specified key.
            </summary> 
            <returns>
            <c>true</c> if the dictionary contains an element that has the specified key; otherwise, <c>false</c>.
            </returns>
            <param name="key">The key of the value.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value indexed by a specified key.
            </summary> 
            <returns>
            The value indexed by the specified key.
            </returns>
            <param name="key">The key of the value.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ReadOnlyDictionary`2">
            <summary>
            Represents a read-only, generic collection of key/value pairs.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.LiveConnectionInstructionsUtils">
            <summary>
            Helper methods for <see cref="T:RedGate.SQLCompare.Engine.LiveConnectionInstructions"/> that we want to keep away from the API
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.LiveConnectionInstructionsUtils.PullConnectionStringFromConnection(RedGate.SQLCompare.Engine.LiveConnectionInstructions)">
            <summary>
            Get a connection string from a <see cref="T:RedGate.SQLCompare.Engine.LiveConnectionInstructions"/>. Use sparingly (ideally we wouldn't care at all about this)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Log.ComponentLogger">
            <summary>
            Component Logger - wraps the standard logger to always provide the Component information Instantiated through
            the GetComponentLogger function on the ILogMessages interface
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.#ctor(System.String,RedGate.SQLCompare.Engine.Log.IProductLogger)">
            <summary>Create a new Component Logger</summary>
            <param name="currentComponent">The component to associate with the component logger.</param>
            <param name="logger"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogError(System.String)">
            <summary>Log an error message using the current component</summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogError(System.String,System.Object[])">
            <summary>
            Log an error message using the current component - the message is formatted first using String.Format before
            being dispatched further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogError(System.Exception)">
            <summary>Log an error exception using the current component</summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogError(System.Exception,System.String)">
            <summary>
            Log an error exception using the current component starting with a message. If null is passed for the
            exception, an Error message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Log an error exception using the current component with a message - the message is formatted first using
            String.Format before being dispatched further. If the formatted string is not valid an Error is logged. If
            the exception is null an Error is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogWarning(System.String)">
            <summary>Log a warning message using the current component</summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogWarning(System.String,System.Object[])">
            <summary>
            Log a warning message using the current component - the message is formatted first using String.Format before
            being dispatched further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogWarning(System.Exception)">
            <summary>Log a warning exception using the current component</summary>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogWarning(System.Exception,System.String)">
            <summary>
            Log a warning exception using the current component starting with a message. If null is passed for the
            exception, an Warning message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogWarning(System.Exception,System.String,System.Object[])">
            <summary>
            Log a warning exception using the current component with a message - the message is formatted first using
            String.Format before being dispatched further. If the formatted string is not valid an Warning is logged. If
            the exception is null an Warning is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogInformation(System.String)">
            <summary>Log an informational message using the current component</summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogInformation(System.String,System.Object[])">
            <summary>
            Log an informational message using the current component - the message is formatted first using String.Format
            before being dispatched further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogInformation(System.Exception,System.String)">
            <summary>
            Log an information exception using the current component starting with a message. If null is passed for the
            exception, an Information message will be logged instead.
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogInformation(System.Exception,System.String,System.Object[])">
            <summary>
            Log an information exception using the current component with a message - the message is formatted first
            using String.Format before being dispatched further. If the formatted string is not valid an Information is
            logged. If the exception is null an Information is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogDebug(System.String)">
            <summary>Log a debug message using the current component</summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogDebug(System.String,System.Object[])">
            <summary>
            Log a debug message using the current component - the message is formatted first using String.Format before
            being dispatched further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogTrace(System.String)">
            <summary>Log a trace message using the current component</summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogTrace(System.String,System.Object[])">
            <summary>
            Log a trace message using the current component - the message is formatted first using String.Format before
            being dispatched further. If the formatted string is not valid an error is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogTrace(System.Exception,System.String,System.Object[])">
            <summary>
            Log a trace exception using the current component with a message - the message is formatted first using
            String.Format before being dispatched further. If the formatted string is not valid an Trace is logged. If
            the exception is null an Trace is logged
            </summary>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.LogVerbose(System.String)">
            <summary>Log a verbose message using the current component</summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.Log(RedGate.SQLCompare.Engine.Log.LogLevel,System.String)">
            <summary>All calls to LoggerLog ultimately end up in this call down to this call</summary>
            <param name="level">The type of message being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.Log(RedGate.SQLCompare.Engine.Log.LogLevel,System.String,System.Object[])">
            <summary>
            Log a message - the message is formatted first using String.Format before being dispatched further. If the
            formatted string is not valid an error is logged.
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.Log(RedGate.SQLCompare.Engine.Log.LogLevel,System.Exception)">
            <summary>
            Log an exception. If null is passed for the exception, an Error message will be logged instead.
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="e">The exception being logged</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.Log(RedGate.SQLCompare.Engine.Log.LogLevel,System.Exception,System.String)">
            <summary>
            Log an exception starting with a message. If null is passed for the exception, an Error message will be
            logged instead.
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ComponentLogger.Log(RedGate.SQLCompare.Engine.Log.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a message with an exception using the current component - the message is formatted first using
            String.Format before being dispatched further. If the formatted string is not valid an error is logged. If
            the exception is null an error is logged
            </summary>
            <param name="level">The type of message being logged</param>
            <param name="e">The exception being logged</param>
            <param name="message">The actual message to be logged</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Log.ILogger">
            <summary>
            All loggers regardless of the mechanism used to save the logs must implement this interface
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Log.ILogger.Level">
            <summary>The level to which this logger will log</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.ILogger.Log(RedGate.SQLCompare.Engine.Log.LogLevel,System.String,System.String,System.String)">
            <summary>The function called for logging</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Log.IProductLogger">
            <summary>
            An interface for a Logger that knows the product name
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.IProductLogger.Log(RedGate.SQLCompare.Engine.Log.LogLevel,System.String,System.String)">
            <summary>
            Write a log message for a particular component
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Log.Logger">
            <summary>
            Static Log provider
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.Logger.s_Logger">
            <summary>
            The inner logger
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.Logger.s_ProductName">
            <summary>
            The name of the product output in the log
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.Logger.s_ComponentLoggerShim">
            <summary>
            A static instance of the <see cref="T:RedGate.SQLCompare.Engine.Log.Logger.ComponentLoggerShim"/> so we don't need to new up every time we create a component logger
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.Logger.GetComponentLogger(System.String)">
            <summary>Create a new ComponentLogger for the component specified.</summary>
            <param name="component">The component to wrap in the component logger.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.Logger.Initialize(RedGate.SQLCompare.Engine.Log.ILogger,System.String)">
            <summary>
            Initializes the logger with with a new logger.  By default this is a <see cref="T:RedGate.SQLCompare.Engine.Log.TraceLogger"/>
            </summary>
            <param name="logger"></param>
            <param name="productName"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Log.Logger.Clear">
            <summary>
            Resets the logger to a <see cref="T:RedGate.SQLCompare.Engine.Log.TraceLogger"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Log.Logger.ComponentLoggerShim">
            <summary>
            This is a bit of a nasty shim that allows s_Logger to be mutated at run time.
            This was needed because the tests on team city were interfering with each other.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Log.LogLevel">
            <summary>The different levels of Logging</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.None">
            <summary>No logging</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Verbose">
            <summary>Maximum logging level - everything will be logged</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Debug">
            <summary>Debug logging</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Trace">
            <summary>Trace logging</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Information">
            <summary>Information logging</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Warning">
            <summary>Warnings</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Error">
            <summary>Errors</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Fatal">
            <summary>Fatal errors</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Default">
            <summary>Fatal | Error | Warning | Information | Trace | Debug</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.All">
            <summary>Fatal | Error | Warning | Information | Trace | Debug | Verbose</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Log.LogLevel.Serious">
            <summary>Fatal | Error | Warning</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Log.TraceLogger">
            <summary>
            A simple implementation of <see cref="T:RedGate.SQLCompare.Engine.Log.ILogger"/> that writes to <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IMetadata">
            <summary>
            An interface for storing arbitrary extra data on an object
            </summary>
            <remarks> See Docs/GLOSSARY for more details </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IMetadata.AddMetadata``1(``0)">
            <summary>
            Store a piece of metadata, keyed by its type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IMetadata.GetMetadata``1">
            <summary>
            Returns T or default(T)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IMetadata.Clone">
            <summary>
            Returns a shallow clone of the metadata.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Metadata">
            <summary>
            Basic implementation of <see cref="T:RedGate.SQLCompare.Engine.IMetadata"/> backed by a dictionary
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificate">
            <summary>A certificate.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption">
            <summary>How the private key of the certificate is encrypted.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.NotAvailable">
            <summary>NA = There is no private key for the certificate.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.MasterKey">
            <summary>MK = Private key is encrypted by the master key.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.PrivateKey">
            <summary>PW = Private key is encrypted by a user-defined password.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Certificate.CertificateKeyEncryption.ServiceKey">
            <summary>SK = Private key is encrypted by the service master key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ObjectType">
            <summary>Returns ObjectType.Certificate</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.SerialNumber">
            <summary>The certificate's serial number.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.StartDate">
            <summary>The start date of the certificate.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ExpiryDate">
            <summary>The expiry date of the certificate.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ActiveForDialog">
            <summary>
            True if the certificate is available to the initiator of a Service Broker dialog conversation.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.IssuerName">
            <summary>The name of the certificate's issuer.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.KeyEncryptionType">
            <summary>The certificate's private key encryption type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.Subject">
            <summary>The certificate's subject.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Certificate.ThumbPrint">
            <summary>The thumb print for this certificate.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificate.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns>
            <em>True</em> if the certificates are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the certificate with a specified certificate.</summary>
            <param name="targetObject">The certificate to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificate.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Certificates">
            <summary>A collection of certificates.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificates.SerializeItem(RedGate.SQLCompare.Engine.Certificate,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Certificates.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.CheckConstraint">
            <summary>A check constraint.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Database">
            <summary>The database to which the object belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.ObjectType">
            <summary>Returns ObjectType.CheckConstraint.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Fields">
            <summary>The fields in the check constraint.</summary>
            <remarks>
            If it's a table level constraint then the list will have length 0, and if it's a column level constraint then
            the list will have length 1
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.NoCheck">
            <summary>True if the constraint is marked as WITH NOCHECK (that is, it is not trusted).</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.SysobjectID">
            <summary>The sysobject identier of the object.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.QualifiedName">
            <summary>The qualified name of the object.  Do you mean <seealso cref="P:RedGate.SQLCompare.Engine.CheckConstraint.Name" />?</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Name">
            <summary>
            The constraint name.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.CheckConstraint.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.FullyQualifiedName">
            <summary>
            The fully-qualified name of the object.  DANGER WILL ROBINSON!!  This is not escaped.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Owner">
            <summary>The owner or schema of the parent table.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.NotForReplication">
            <summary>True if the check constraint is marked <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Disabled">
            <summary>True if the check constraint is disabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.Text">
            <summary>The constraint text.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.ScriptSource">
            <summary>
            The location of the creation script for this object if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraint.ScriptSourceNocheck">
            <summary>
            The location of any ALTER TABLE ... NOCHECK CONSTRAINT commands on the constraint.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraint.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the check constraint with a specified check constraint.</summary>
            <returns>Compares the table with a specified table.</returns>
            <param name="obj">The constraint to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraint.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>
            temporary overload for <see cref="M:RedGate.SQLCompare.Engine.CheckConstraint.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.CheckConstraints">
            <summary>A collection of check constraints.</summary>
            <moduleiscollection />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.SerializeItem(RedGate.SQLCompare.Engine.CheckConstraint,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.GetKey(RedGate.SQLCompare.Engine.CheckConstraint)">
            <summary>Generates a key for a check constraint.</summary>
            <param name="value">The check constraint for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraints.Item(System.String)">
            <summary>Returns a check constraint given a name.</summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.CheckConstraints.Item(RedGate.SQLCompare.Engine.Table,System.String)">
            <summary>Returns a check constraint given a table and a name.</summary>
            <param name="table">The table component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.CheckConstraints.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name does
            not need to be considered.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrAssemblies">
            <summary>A collection of Common Language Runtime (CLR) assemblies.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblies.SerializeItem(RedGate.SQLCompare.Engine.ClrAssembly,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssemblies.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssemblies.Item(System.Int32)">
            <summary>Returns a CLR assembly given its identifier.</summary>
            <param name="index">The system id of the assmebly.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrAssembly">
            <summary>A Common Language Runtime (CLR) assembly.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.WriteObjectProperties(RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Writes out the properties of this object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ID">
            <summary>The sysobject identifier for the CLR assembly.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.ScriptSourceVisibility">
            <summary>
            The script source for any ALTER ASSEMBLY statements attached to this assembly other than adding files
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.PermissionSet">
            <summary>The code access permission for the CLR assembly.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.CLRName">
            <summary>The CLR name of the assembly.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.Visibility">
            <summary>Indicates whether the assembly's visibility is set to on or off.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrAssembly.Files">
            <summary>The files that belong to the assembly.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the assemblies are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the assembly with a specified assembly.</summary>
            <param name="targetObject">The assembly to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.CanBeAlteredTo(RedGate.SQLCompare.Engine.ClrAssembly)">
            <summary>
            This method check if a CLR assembly can be altered to the target assembly, i.e. all of its method signatures
            are the same.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrAssembly.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <param name="targetFeatures"></param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrFile">
            <summary>A Common Language Runtime (CLR) file.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrFile.ReadObjectProperties(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Reads in the properties of this object.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrFile.WriteObjectProperties(RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Writes out the properties of this object.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFile.Name">
            <summary>The name of the CLR file.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ClrFile.Contents">
            <summary>The raw data of the CLR assembly file.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ClrFiles">
            <summary>A collection of CLR files.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ClrFiles.Add(RedGate.SQLCompare.Engine.ClrFile)">
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ConnectionProperties">
            <summary>We're looking to replace this with <see cref="T:RedGate.SQLCompare.Engine.LiveConnectionInstructions"/>.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor">
            <summary>Constructor for the ConnectionProperties class.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor(System.String,System.String)">
            <summary>Constructor for integrated security.</summary>
            <param name="serverName">The SQL Server name.</param>
            <param name="databaseName">The database name.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Constructor for SQL security.</summary>
            <param name="serverName">The SQL Server name.</param>
            <param name="databaseName">The database name.</param>
            <param name="userName">The user name to use to connect to the SQL Server.</param>
            <param name="password">The password to use to connect to the SQL Server.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.Serialize(RedGate.SQLCompare.Engine.ConnectionProperties,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>
            Write a ConnectionProperties instance to our custom binary snapshot format
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.FromSnapshot(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>
            Read a ConnectionProperties instance from our custom binary snapshot format
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used in serialization.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ConnectionProperties.ConnectionString">
            <summary>Returns the connection string for this connection.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.ForBackup(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},RedGate.BackupReaderInterfaces.IBackupSet,System.Boolean)">
            <summary>
            Creates a BackupReader-specific connection string from the given files and backupset
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ConnectionProperties.ToLiveConnectionInstructions">
            <summary>
            Creates a <see cref="T:RedGate.SQLCompare.Engine.LiveConnectionInstructions" /> instance that uses the details from this connection
            properties to create a SqlConnection
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Contract">
            <summary>A contract.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.PatchUpAfterDeserialization2(RedGate.SQLCompare.Engine.Database)">
            <summary>Prerequisites: services loaded!, message types are available</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Name">
            <summary>
            The name of the object.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.IsSystemObject">
            <summary>Indicates whether the object is a system object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Usages">
            <summary>The message types used by the contract.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Contract.Services">
            <summary>The services that depend on the contract.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the contracts are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the contract with a specified contract.</summary>
            <param name="targetObject">The contract to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contract.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Contracts">
            <summary>A collection of contracts.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contracts.SerializeItem(RedGate.SQLCompare.Engine.Contract,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Contracts.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseHelperResultSet.Description">
            <summary>
            Description of the source of this result set.
            Used to display more helpful error messages to users when the DMV queries go wrong.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermission">
            <summary>A database-level permission.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.UserName">
            <summary>The user or role to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.Action">
            <summary>The action to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermission.Type">
            <summary>The type of permission.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseLevelPermissions">
            <summary>A collection of database-level permissions.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.Name">
            <summary>Sets the name of these permissions</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.Item(RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction)">
            <summary>The permission type for a specific permission action.</summary>
            <param name="permission">The permission type.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.Equals(RedGate.SQLCompare.Engine.DatabaseLevelPermissions,RedGate.SQLCompare.Engine.Options)">
            <returns>
            <em>True</em> if the database-level permisssions are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>
            Compares the database-level permission with a specified database-level permission.
            </summary>
            <param name="targetPermissions">The database-level permissions to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.ContainsPermission(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction,RedGate.SQLCompare.Engine.PermissionStatementType}},System.Collections.Generic.KeyValuePair{RedGate.SQLCompare.Engine.DatabaseLevelPermissionAction,RedGate.SQLCompare.Engine.PermissionStatementType})">
            <summary>
            If the collection contains the given action, we need to make sure the permission types match. Missing, 'none' and REVOKE permissions get treated as equivalent.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseLevelPermissions.GetSQL(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <param name="dbObject"></param>
            <param name="sqlBuilder"></param>
            <param name="options"></param>
            <param name="revokeGrantForConnect">
            When writing out an Data Tools scripts folder, this should be set to false. Otherwise it should be true as
            the user has grant connect as a default permission which needs to be revoked.
            </param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseObjectResolver">
            <summary>Resolver class for the AST parser.</summary>
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.#ctor(RedGate.SQLCompare.Engine.IDatabase)">
            <summary></summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectResolver.Database">
            <summary>Access to the database object.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ResolveSystemObjects">
            <summary>
            If set to true then system objects are also resolved (note that for that the database must be populated with
            system objects).
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ColumnsInObject(RedGate.SQLCompare.ASTParser.Resolvers.ISqlObject)">
            <summary></summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ObjectForName(RedGate.SQLCompare.ASTParser.Syntax.Element,System.String,System.String,System.String,System.String)">
            <summary></summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ResolveSchemaScopedObjectFromCategory``1(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.Engine.KeyedCollection{``0},System.String,System.String)">
            <summary>
            Tries to resolve a schema object based on its name and owner. If the owner is not specified, it first tries
            to look at the owner hint. If this is not successful, it checks dbo as owner. If this does not help either,
            then we return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ResolveTrigger(System.String,System.String,System.String)">
            <summary>
            Tries to resolve a schema object based on its name and owner. If the owner is not specified, it first tries
            to look at the owner hint. If this is not successful, it checks dbo as owner. If this does not help either,
            then we return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.FindTriggerInCollection(System.String,System.String,RedGate.SQLCompare.Engine.Triggers)">
            <summary>Finds a trigger in the Triggers collection.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectResolver.ResolveDBScopedObjectFromCategory``1(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.Engine.IKeyedCollection{``0})">
            <summary>
            Tries to resolve a schema object based on its name and owner. If the owner is not specified, it first tries
            to look at the owner hint. If this is not successful, it checks dbo as owner. If this does not help either,
            then we return null.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseObjectWithAuthorization">
            <summary>A database object that can have its owner altered using ALTER AUTHORIZATION.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectWithAuthorization.ScriptSourceAuthorization">
            <summary>The script source for any ALTER AUTHORIZATION statement.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseObjectWithAuthorization.FullyQualifiedOwner">
            <summary>The fully qualified owner of the object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextStoplist">
            <summary>A full text stoplist.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStoplist.FullyQualifiedName">
            <summary>
            The fully-qualified name of the stoplist.  DANGER WILL ROBINSON!!  This is not escaped.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStoplist.ObjectType">
            <summary>The type of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStoplist.Stopwords">
            <summary>Returns the words in this stoplist.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStoplist.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares two database objects.</summary>
            <returns>
            <em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStoplist.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <param name="targetFeatures"></param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DataCompression">
            <summary>
            Compression used for a table or index record. This has been introduced in SQL Server 2008.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Index">
            <summary>An index.</summary>
            <remarks>
            This includes primary keys, unique constraints, xml and spatial indexes, and statistics.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.#ctor(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Semi shallow clone of the index. For deep clone it needs to have the following modified: PrimaryXMLIndex
            reference.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.#ctor(RedGate.SQLCompare.Engine.NullableBinaryReader,System.Single)">
            <summary>
            Reads in the information for this index. Note that <paramref name="versionNumber" />
            should be the same as that passed in from <see cref="M:RedGate.SQLCompare.Engine.Index.DeserializeIndex(RedGate.SQLCompare.Engine.NullableBinaryReader)" />. Subclasses should use their own
            version numbers for their own information.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Item(RedGate.SQLCompare.Engine.Index.IndexFlags)">
            <summary>Shortcut to get/set a specific index flag.</summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IsPartitioned">
            <summary>
            Indicates whether the index is built on a partition scheme. If it is, the name of the partition scheme is
            returned by the <see cref="P:RedGate.SQLCompare.Engine.Index.FileGroupOrPartitionScheme" /> property.
            </summary>
            <remarks>
            This can be true for xml and spatial indexes, as they inherit their partitioning from the parent table if it
            isn't otherwise specified.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FileGroupOrPartitionScheme">
            <summary>The filegroup or the partition scheme on which the index is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Fields">
            <summary>The fields in the index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.ScriptSource">
            <summary>
            The location of the creation script for this object if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Relational">
            <summary>True if this is a relational index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Statistics">
            <summary>True if the index is a statistic.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Spatial">
            <summary>True if the index is a spatial index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Xml">
            <summary>True if the index is an XML index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.NoRecompute">
            <summary>True if the index is defined with NORECOMPUTE.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Incremental">
            <summary>True if incremental (introduced in SQL Server 2014)</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FullScan">
            <summary>True if the index is defined with FullScan</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Pad">
            <summary>The index padding.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IgnoreDuplicateKeys">
            <summary>True if set to ignore duplicate keys.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FillFactor">
            <summary>The fill factor.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.AllowRowLocks">
            <summary>True if the index allows row locks.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.AllowPageLocks">
            <summary>True if the index allows page locks.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IsDisabled">
            <summary>Indicates whether the index is disabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Online">
            <summary>True iff the index is to be created online.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.SortInTempDb">
            <summary>True iff the index is to be created using tempdb.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.QualifiedName">
            <summary>The qualified name of the object.  Do you mean <seealso cref="P:RedGate.SQLCompare.Engine.Index.Name" />?</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Name">
            <summary>
            The name of the index.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.Index.QualifiedName" />?
            </summary>
            <remarks>
            Note that changing this WILL mess up the parent collection of Indexes! One should use/implement the rename
            index in that collection, OR do the rename outside the collection. The primary use for this method is in the
            refactoring tool.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Owner">
            <summary>The owner of the index's table.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.FullyQualifiedName">
            <summary>
            The fully-qualified name of the index.  DANGER WILL ROBINSON!!  This is not escaped.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.Database">
            <summary>The database to which the index belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.ObjectType">
            <summary>Returns ObjectType.Index</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.FieldsCompareWith(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Overridden in <see cref="P:RedGate.SQLCompare.Engine.Index.Statistics" /> since we don't care about key/included columns there
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.Difference``1(System.String,``0,``0)">
            <summary>
            Convenience method to generate an <see cref="T:RedGate.SQLCompare.Engine.EqualityDifference"/>
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.IsColumnstore">
            <summary>
            Stupid columnstore indexes mark all of their fields as included but use the normal syntax to list them.
            (http://msdn.microsoft.com/en-us/library/ms175105.aspx)
            </summary>
            <remarks>Blargh, bad hack</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.SqlAddFields(System.Text.StringBuilder,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Appends " (field1 DESC, ...) INCLUDE (field2, ...)" to a <see cref="T:System.Text.StringBuilder"/>
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.WriteFileGroupOrPartitionScheme">
            <summary>Whether (disregarding any options) the filegroup should be written out</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.Clone(RedGate.SQLCompare.Engine.Table)">
            <summary>Used by the refactorer.</summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Index.SysobjectID">
            <summary>The sysobject identier of the object.</summary>
            <exclude />
            <remarks>
            Currently this is only used for relational indexes to calculate whether they're part of a filetable's default
            schema
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Index.SetMotIndexOptionDefaults">
            <summary>
            Sets the options on the index correctly (As of Sql Server 2016) if it is on a memory optimsed table
            These differ from the normal defaults and the index is not aware if it is on a Mot when constructed
            Sql Server 2014 RTM produces different results and will casue a regression of 
            https://jira.red-gate.com/browse/SC-8156 if removed.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ITextObject">
            <summary>A database object that has its definition stored in the database as text.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ITextObject.Text">
            <summary>Returns the object text.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.BoundingBoxXMin">
            <summary>The x-coordinate of the lower-left corner of the bounding box.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.BoundingBoxXMax">
            <summary>The x-coordinate of the upper-right corner of the bounding box.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.BoundingBoxYMin">
            <summary>The y-coordinate of the lower-left corner of the bounding box.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.BoundingBoxYMax">
            <summary>The y-coordinate of the upper-right corner of the bounding box.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.Level1Grid">
            <summary>The first tesselation level's grid density.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.Level2Grid">
            <summary>The second tesselation level's grid density.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.Level3Grid">
            <summary>The third tesselation level's grid density.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.Level4Grid">
            <summary>The fourth tesselation level's grid density.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.CellsPerObject">
            <summary>The number of tesselation cells per objects.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.SpatialIndexType">
            <summary>
            The type of the spatial index. In SQL Server 2008 it can be either geometry or geography.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndex.TesselationScheme">
            <summary>The tesselation scheme of the spatial index.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Statistics">
            <summary>
            This implements ISystemNameable indirectly, but only in 2000 is it even possibly system nameable
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Statistics.Filter">
            <summary>
            The filtering condition on the index. This property exists in SQL Server 2008 and later.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Datatype.TargetSupportsDatatype(System.Boolean,RedGate.SQLCompare.Engine.SqlType)">
            <returns>
            true if <paramref name="type">the type</paramref> is supported by the target database based on the other
            arguments
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Datatype.GetSqlType(System.String,System.Boolean)">
            <summary>Helper method to get the enumeration for base sql type string.</summary>
            <param name="typeName">The name of the base SQL type </param>
            <param name="supportsTableAndDateTimeTypes"></param>
            <returns>SqlType enumeration entry.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Datatype.GetSqlTypeName(RedGate.SQLCompare.Engine.SqlType,System.Boolean)">
            <summary>Helper method to get the enumeration for base sql type string.</summary>
            <param name="sqlType">The SQL type</param>
            <param name="supportsTableAndDateTimeTypes"></param>
            <returns>SqlType enumeration entry.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DdlTrigger">
            <summary>A DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ObjectType">
            <summary>Returns ObjectType.DdlTrigger</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.After">
            <summary>True if the trigger is an <em>after</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.InsteadOf">
            <summary>True if the trigger is an <em>instead of</em> trigger<em>.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.IsDisabled">
            <summary>True if the trigger is <em>disabled</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.FullyQualifiedName">
            <summary>
            The fully-qualified name of the DDL trigger.  DANGER WILL ROBINSON!!  This is not escaped.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.CLRObject">
            <summary>True if the DDL trigger is a Common Language Runtime (CLR) DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.QuotedIdentifierOn">
            <summary>True if the trigger was created with <em>quoted identifiers on.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AnsiNullsOn">
            <summary>True if the trigger was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Encrypted">
            <summary>True if the DDL trigger definition is <em>encrypted</em>.</summary>
            <remarks>The contents of the trigger cannot be decrypted.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.EventTypes">
            <summary>The event types for the DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ExecuteAsType">
            <summary>The EXECUTE AS clause used for the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the DDL trigger. This is a SQL Server 2005
            feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Assembly">
            <summary>The CLR assembly for the DDL trigger, for a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AssemblyClass">
            <summary>The CLR assembly class name for the DDL trigger, for a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.AssemblyMethod">
            <summary>The CLR assembly method name for the DDL trigger, for a CLR trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.Text">
            <summary>The text of the DDL trigger, if it is not a CLR DDL trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DdlTrigger.ExtendedProperties">
            <summary>The extended properties defined for the DDL trigger.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the DDL trigger with a specified DDL trigger.</summary>
            <returns><em>True</em> if the DDL triggers are identical; otherwise <em>false</em>.</returns>
            <param name="value">The DDL trigger to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.Equals(RedGate.SQLCompare.Engine.DdlTrigger,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the DDL trigger with the specified DDL trigger.</summary>
            <returns><em>True</em> if the DDL triggers are identical; otherwise <em>false</em>.</returns>
            <param name="target">The DDL trigger to compare.</param>
            <param name="context">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTrigger.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifiers on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DdlTriggers">
            <summary>A collection of DDL triggers.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTriggers.SerializeItem(RedGate.SQLCompare.Engine.DdlTrigger,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>Internal.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DdlTriggers.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>Internal</summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Default">
            <summary>A database default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.ObjectType">
            <summary>Returns ObjectType.Default</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.SysobjectID">
            <summary>The sysobject identifier for the default.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Default.Text">
            <summary>The text of the default.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Default.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the defaults are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the default with a specified default.</summary>
            <param name="target">The object to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Default.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Defaults">
            <summary>A collection of defaults.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Defaults.SerializeItem(RedGate.SQLCompare.Engine.Default,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Defaults.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Dependencies">
            <summary>The core object dependencies within a database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.SortByDependency(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sorts the passed in items by dependency such that dependencies (children) come before items that depend on
            them (parents).
            <para>
            Note that this is equivalent to calling the other overload with a canIgnoreLinkToBreakCycle parameter that
            always returns false (i.e. links are never broken to fix circular dependencies).
            </para>
            </summary>
            <param name="items">
            The items to be sorted. If any elements are not present in the dependencies tree, they will be returned at
            the end of the returned list
            </param>
            <returns>All the elements in 'items', sorted based on their inter-dependencies</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.SortByDependency(System.Collections.Generic.IEnumerable{System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Sorts the passed in items by dependency such that dependencies (children) come before items that depend on
            them (parents). If any items have circular dependencies on each other, the 'canIgnoreLinkToBreakCycle'
            delegate will be given the opportunity to break links in order the break the circularity.
            </summary>
            <param name="items">
            The items to be sorted. If any elements are not present in the dependencies tree, they will be returned at
            the end of the returned list
            </param>
            <param name="canIgnoreLinkToBreakCycle">
            This delegate will be called for all links in a circular dependency chain between items. The first parameter
            is the parent id, and the second is the child id. The delegate should return true if that link can be
            ignored/broken when attempting to break the circularity.
            </param>
            <returns>All the elements in 'items', sorted based on their inter-dependencies</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.LogUnresolvableCycleAndFlatten(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Handles any circular dependencies that could not be resolved by breaking links. This implementation logs the
            circularity as a warning, and then simply returns the required elements in the order they are received - i.e.
            without attempting to resolve their inter-dependencies.
            </summary>
            <param name="sortRequired">The nodes that need to be sorted</param>
            <param name="stronglyConnectedComponent">
            All of the elements that make up the circular chain (aka strongly connected component)
            </param>
            <returns>'sortRequired' unmodified.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetParents(System.Int32)">
            <summary>For internal use only.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetShallowParents(System.Int32)">
            <summary>For internal use only.</summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetChildren(System.Int32)">
            <summary>For internal use only.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.ResetNodes">
            <summary>
            Sets <em>removed</em> to false for all the nodes, that is, for all the dependencies.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Dependencies.GetUnresetChildren(System.Int32)">
            <summary>
            Enumerates all the child nodes that have not yet been marked as removed, and marks them as removed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Difference">
            <summary>A difference between two database objects.</summary>
            <remarks>
            See <see cref="M:RedGate.SQLCompare.Engine.Database.CompareWith(RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Options)" /> and <see cref="T:RedGate.SQLCompare.Engine.Work" /> for more information.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Difference.Flags.SelectedImplicitly">
            <summary>
            This field is for v5 UI to show what has been included implicitly. This is basically very similar to
            m_SelectedAsDependency, BUT it is NOT the same. Also, note that this is used before script generation in
            which m_SelectedAsDependency is used, thus it cannot be reset. Also, m_SelectedAsDependency is selecting more
            (for rebuilds), thus it cannot be used for the UI.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Difference.#ctor(RedGate.SQLCompare.Engine.Difference)">
            <summary>Shallow copy constructor</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.SelectedAsDependency">
            <summary>For internal use only.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.SelectedImplicity">
            <summary>For internal use only.</summary>
            <remarks>
            This is used for the UI only. It has no sideffects, thus it may be set if one wishes to.
            </remarks>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Selected">
            <summary>True if the difference is selected.</summary>
            <remarks>Set to <em>true</em> to include the difference in a migration script.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.DatabaseObjectType">
            <summary>The type of database object the difference represents.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.ObjectIn1">
            <summary>The object in the first database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Name">
            <summary>The name of the database object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.ObjectIn2">
            <summary>The object in the second database.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Type">
            <summary>The type of difference.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Context">
            <summary>The options and settings affecting the difference</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.MustRebuildTo1">
            <summary>Indicates whether we must rebuild the object when migrating to database 1.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.MustRebuildTo2">
            <summary>Indicates whether we must rebuild the object when migrating to database 2.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Difference.Renamed">
            <summary>Indicates whether the object was renamed as part of a rename refactoring.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Difference.GetHashCode">
            <summary>Hashcode for the difference.</summary>
            <returns>Hashcode for the difference.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Difference.Equals(System.Object)">
            <summary>Equality check.</summary>
            <param name="obj">Difference instance to compare against.</param>
            <returns>True if the two Difference instances are equal.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Difference.CompareTo(RedGate.SQLCompare.Engine.Difference)">
            <summary>Compares the current object with another object of the same type.</summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has
            the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" />
            parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater
            than <paramref name="other" />.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Differences">
            <summary>
            A collection of difference objects representing the differences between two databases.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Differences.SortedSet`1">
            <summary>
            Use a SortedDictionary to get set-like behaviour with builtin sorting. (values will always be null)
            Once we move to .NET4+, we can replace this with a framework SortedSet
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Differences.SortedSet`1.Remove(`0)">
            <summary>
            Remove an item matching toRemove from the set.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Differences.SortedSet`1.Add(`0)">
            <summary>
            Add an item to the set. If the item already exists in the set, it is ignored
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.Database1">
            <summary>The first database to be compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.Database2">
            <summary>The second database to be compared.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.OwnerMappings">
            <summary>Access to the owner mappings.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Differences.ObjectToRename">
            <summary>For refactoring!</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Differences.GetRenamedObject">
            <summary>For internal use only.</summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Differences.Add(RedGate.SQLCompare.Engine.Difference)">
            <summary>Adds an item to the <see cref="T:RedGate.SQLCompare.Engine.Differences" /> collection.</summary>
            <param name="value">The object to add.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventNotification">
            <summary>An event notification.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ServiceName">
            <summary>The name of the service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.BrokerInstance">
            <summary>The broker instance.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.FanIn">
            <summary>True if the event notification has the <em>fan in</em> option enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.EventTypes">
            <summary>The event types.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EventNotification.ExtendedProperties">
            <summary>The extended properties defined for the event notification.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotification.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns>
            <em>True</em> if the event notifications are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the event notification with a specified event notification.</summary>
            <param name="targetObject">The event notification to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotification.CompareWith(RedGate.SQLCompare.Engine.EventNotification,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares this object with another and gives a list of differences</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotification.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventNotifications">
            <summary>A collection of event notifications.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.#ctor(System.Boolean)">
            <summary>
            This is used only for database level event notifications!! queue level ones should use the other constructors
            that set the parent!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.SerializeItem(RedGate.SQLCompare.Engine.EventNotification,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.Equals(RedGate.SQLCompare.Engine.EventNotifications,RedGate.SQLCompare.Engine.Options)">
            <returns>
            <em>True</em> if the event notification collections are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>
            Compares the event notification collection with a specified event notification collection.
            </summary>
            <param name="target">The object to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventNotifications.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EngineLogger">
            <summary>Class to access engine logging facilities.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EngineLogger.CLRASM">
            <summary>Component logger for CLR-associated messages.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EngineLogger.Engine">
            <summary>Component logger for main engine messages.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.EngineLogger.Parser">
            <summary>Component logger for parser messages.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventType">
            <summary>The type of event.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Insert">
            <summary>INSERT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Update">
            <summary>UPDATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Delete">
            <summary>DELETE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateTable">
            <summary>CREATE_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterTable">
            <summary>ALTER_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropTable">
            <summary>DROP_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateIndex">
            <summary>CREATE_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterIndex">
            <summary>ALTER_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropIndex">
            <summary>DROP_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateStatistics">
            <summary>CREATE_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UpdateStatistics">
            <summary>UPDATE_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropStatistics">
            <summary>DROP_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSynonym">
            <summary>CREATE_SYNONYM</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSynonym">
            <summary>DROP_SYNONYM</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateView">
            <summary>CREATE_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterView">
            <summary>ALTER_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropView">
            <summary>DROP_VIEW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateProcedure">
            <summary>CREATE_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterProcedure">
            <summary>ALTER_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropProcedure">
            <summary>DROP_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFunction">
            <summary>CREATE_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFunction">
            <summary>ALTER_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFunction">
            <summary>DROP_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateTrigger">
            <summary>CREATE_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterTrigger">
            <summary>ALTER_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropTrigger">
            <summary>DROP_TRIGGER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateEventNotification">
            <summary>CREATE_EVENT_NOTIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropEventNotification">
            <summary>DROP_EVENT_NOTIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateType">
            <summary>CREATE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropType">
            <summary>DROP_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateAssembly">
            <summary>CREATE_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAssembly">
            <summary>ALTER_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropAssembly">
            <summary>DROP_ASSEMBLY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateUser">
            <summary>CREATE_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterUser">
            <summary>ALTER_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropUser">
            <summary>DROP_USER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRole">
            <summary>CREATE_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRole">
            <summary>ALTER_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRole">
            <summary>DROP_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateApplicationRole">
            <summary>CREATE_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterApplicationRole">
            <summary>ALTER_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropApplicationRole">
            <summary>DROP_APPLICATION_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSchema">
            <summary>CREATE_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterSchema">
            <summary>ALTER_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSchema">
            <summary>DROP_SCHEMA</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateLogin">
            <summary>CREATE_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterLogin">
            <summary>ALTER_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropLogin">
            <summary>DROP_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateMessageType">
            <summary>CREATE_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterMessageType">
            <summary>ALTER_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropMessageType">
            <summary>DROP_MESSAGE_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateContract">
            <summary>CREATE_CONTRACT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropContract">
            <summary>DROP_CONTRACT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateQueue">
            <summary>CREATE_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterQueue">
            <summary>ALTER_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropQueue">
            <summary>DROP_QUEUE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BrokerQueueDisabled">
            <summary>BROKER_QUEUE_DISABLED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateService">
            <summary>CREATE_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterService">
            <summary>ALTER_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropService">
            <summary>DROP_SERVICE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRoute">
            <summary>CREATE_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRoute">
            <summary>ALTER_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRoute">
            <summary>DROP_ROUTE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.GrantServer">
            <summary>GRANT_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DenyServer">
            <summary>DENY_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.RevokeServer">
            <summary>REVOKE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.GrantDatabase">
            <summary>GRANT_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DenyDatabase">
            <summary>DENY_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.RevokeDatabase">
            <summary>REVOKE_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QueueActivation">
            <summary>QUEUE_ACTIVATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRemoteServiceBinding">
            <summary>CREATE_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRemoteServiceBinding">
            <summary>ALTER_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRemoteServiceBinding">
            <summary>DROP_REMOTE_SERVICE_BINDING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateXmlSchemaCollection">
            <summary>CREATE_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterXmlSchemaCollection">
            <summary>ALTER_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropXmlSchemaCollection">
            <summary>DROP_XML_SCHEMA_COLLECTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateEndpoint">
            <summary>CREATE_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterEndpoint">
            <summary>ALTER_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropEndpoint">
            <summary>DROP_ENDPOINT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreatePartitionFunction">
            <summary>CREATE_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterPartitionFunction">
            <summary>ALTER_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropPartitionFunction">
            <summary>DROP_PARTITION_FUNCTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreatePartitionScheme">
            <summary>CREATE_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterPartitionScheme">
            <summary>ALTER_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropPartitionScheme">
            <summary>DROP_PARTITION_SCHEME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateCertificate">
            <summary>CREATE_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterCertificate">
            <summary>ALTER_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropCertificate">
            <summary>DROP_CERTIFICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDatabase">
            <summary>CREATE_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterDatabase">
            <summary>ALTER_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDatabase">
            <summary>DROP_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAuthorizationServer">
            <summary>ALTER_AUTHORIZATION_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAuthorizationDatabase">
            <summary>ALTER_AUTHORIZATION_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateXmlIndex">
            <summary>CREATE_XML_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddRoleMember">
            <summary>ADD_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRoleMember">
            <summary>DROP_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddServerRoleMember">
            <summary>ADD_SERVER_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropServerRoleMember">
            <summary>DROP_SERVER_ROLE_MEMBER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterExtendedProperty">
            <summary>ALTER_EXTENDED_PROPERTY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFulltextCatalog">
            <summary>ALTER_FULLTEXT_CATALOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFulltextIndex">
            <summary>ALTER_FULLTEXT_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterInstance">
            <summary>ALTER_INSTANCE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterMessage">
            <summary>ALTER_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterPlanGuide">
            <summary>ALTER_PLAN_GUIDE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterRemoteServer">
            <summary>ALTER_REMOTE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BindDefault">
            <summary>BIND_DEFAULT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BindRule">
            <summary>BIND_RULE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDefault">
            <summary>CREATE_DEFAULT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateExtendedProcedure">
            <summary>CREATE_EXTENDED_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateExtendedProperty">
            <summary>CREATE_EXTENDED_PROPERTY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFulltextCatalog">
            <summary>CREATE_FULLTEXT_CATALOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFulltextIndex">
            <summary>CREATE_FULLTEXT_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateLinkedServer">
            <summary>CREATE_LINKED_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateLinkedServerLogin">
            <summary>CREATE_LINKED_SERVER_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateMessage">
            <summary>CREATE_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreatePlanGuide">
            <summary>CREATE_PLAN_GUIDE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRule">
            <summary>CREATE_RULE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateRemoteServer">
            <summary>CREATE_REMOTE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDefault">
            <summary>DROP_DEFAULT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropExtendedProcedure">
            <summary>DROP_EXTENDED_PROCEDURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropExtendedProperty">
            <summary>DROP_EXTENDED_PROPERTY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFulltextCatalog">
            <summary>DROP_FULLTEXT_CATALOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFulltextIndex">
            <summary>DROP_FULLTEXT_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropLinkedServerLogin">
            <summary>DROP_LINKED_SERVER_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropMessage">
            <summary>DROP_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropPlanGuide">
            <summary>DROP_PLAN_GUIDE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRule">
            <summary>DROP_RULE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropRemoteServer">
            <summary>DROP_REMOTE_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Rename">
            <summary>RENAME</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UnbindDefault">
            <summary>UNBIND_DEFAULT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UnbindRule">
            <summary>UNBIND_RULE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSymmetricKey">
            <summary>CREATE_SYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterSymmetricKey">
            <summary>ALTER_SYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSymmetricKey">
            <summary>DROP_SYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateAsymmetricKey">
            <summary>CREATE_ASYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAsymmetricKey">
            <summary>ALTER_ASYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropAsymmetricKey">
            <summary>DROP_ASYMMETRIC_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterServiceMasterKey">
            <summary>ALTER_SERVICE_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateMasterKey">
            <summary>CREATE_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterMasterKey">
            <summary>ALTER_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropMasterKey">
            <summary>DROP_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddSignatureSchemaObject">
            <summary>ADD_SIGNATURE_SCHEMA_OBJECT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSignatureSchemaObject">
            <summary>DROP_SIGNATURE_SCHEMA_OBJECT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AddSignature">
            <summary>ADD_SIGNATURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSignature">
            <summary>DROP_SIGNATURE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateCredential">
            <summary>CREATE_CREDENTIAL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterCredential">
            <summary>ALTER_CREDENTIAL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropCredential">
            <summary>DROP_CREDENTIAL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropLinkedServer">
            <summary>DROP_LINKED_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterLinkedServer">
            <summary>ALTER_LINKED_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateEventSession">
            <summary>CREATE_EVENT_SESSION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterEventSession">
            <summary>ALTER_EVENT_SESSION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropEventSession">
            <summary>DROP_EVENT_SESSION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateResourcePool">
            <summary>CREATE_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterResourcePool">
            <summary>ALTER_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropResourcePool">
            <summary>DROP_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateWorkloadGroup">
            <summary>CREATE_WORKLOAD_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterWorkloadGroup">
            <summary>ALTER_WORKLOAD_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropWorkloadGroup">
            <summary>DROP_WORKLOAD_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterResourceGovernorConfig">
            <summary>ALTER_RESOURCE_GOVERNOR_CONFIG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSpatialIndex">
            <summary>CREATE_SPATIAL_INDEX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateCryptographicProvider">
            <summary>CREATE_CRYPTOGRAPHIC_PROVIDER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterCryptographicProvider">
            <summary>ALTER_CRYPTOGRAPHIC_PROVIDER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropCryptographicProvider">
            <summary>DROP_CRYPTOGRAPHIC_PROVIDER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDatabaseEncryptionKey">
            <summary>CREATE_DATABASE_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterDatabaseEncryptionKey">
            <summary>ALTER_DATABASE_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDatabaseEncryptionKey">
            <summary>DROP_DATABASE_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateBrokerPriority">
            <summary>CREATE_BROKER_PRIORITY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterBrokerPriority">
            <summary>ALTER_BROKER_PRIORITY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropBrokerPriority">
            <summary>DROP_BROKER_PRIORITY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateServerAudit">
            <summary>CREATE_SERVER_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterServerAudit">
            <summary>ALTER_SERVER_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropServerAudit">
            <summary>DROP_SERVER_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateServerAuditSpecification">
            <summary>CREATE_SERVER_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterServerAuditSpecification">
            <summary>ALTER_SERVER_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropServerAuditSpecification">
            <summary>DROP_SERVER_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateDatabaseAuditSpecification">
            <summary>CREATE_DATABASE_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterDatabaseAuditSpecification">
            <summary>ALTER_DATABASE_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropDatabaseAuditSpecification">
            <summary>DROP_DATABASE_AUDIT_SPECIFICATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateFulltextStoplist">
            <summary>CREATE_FULLTEXT_STOPLIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterFulltextStoplist">
            <summary>ALTER_FULLTEXT_STOPLIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropFulltextStoplist">
            <summary>DROP_FULLTEXT_STOPLIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterServerConfiguration">
            <summary>ALTER_SERVER_CONFIGURATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSearchPropertyList">
            <summary>CREATE_SEARCH_PROPERTY_LIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterSearchPropertyList">
            <summary>ALTER_SEARCH_PROPERTY_LIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSearchPropertyList">
            <summary>DROP_SEARCH_PROPERTY_LIST</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateServerRole">
            <summary>CREATE_SERVER_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterServerRole">
            <summary>ALTER_SERVER_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropServerRole">
            <summary>DROP_SERVER_ROLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSequence">
            <summary>CREATE_SEQUENCE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterSequence">
            <summary>ALTER_SEQUENCE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSequence">
            <summary>DROP_SEQUENCE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateAvailabilityGroup">
            <summary>CREATE_AVAILABILITY_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAvailabilityGroup">
            <summary>ALTER_AVAILABILITY_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropAvailabilityGroup">
            <summary>DROP_AVAILABILITY_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateAudit">
            <summary>CREATE_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropAudit">
            <summary>DROP_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterAudit">
            <summary>ALTER_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateSecurityPolicy">
            <summary>CREATE_SECURITY_POLICY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterSecurityPolicy">
            <summary>ALTER_SECURITY_POLICY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropSecurityPolicy">
            <summary>DROP_SECURITY_POLICY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateColumnMasterKey">
            <summary>CREATE_COLUMN_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropColumnMasterKey">
            <summary>DROP_COLUMN_MASTER_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateColumnEncryptionKey">
            <summary>CREATE_COLUMN_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterColumnEncryptionKey">
            <summary>ALTER_COLUMN_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropColumnEncryptionKey">
            <summary>DROP_COLUMN_ENCRYPTION_KEY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterDatabaseScopedConfiguration">
            <summary>ALTER_DATABASE_SCOPED_CONFIGURATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateExternalResourcePool">
            <summary>CREATE_EXTERNAL_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterExternalResourcePool">
            <summary>ALTER_EXTERNAL_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropExternalResourcePool">
            <summary>DROP_EXTERNAL_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CreateExternalLibrary">
            <summary>CREATE_EXTERNAL_LIBRARY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AlterExternalLibrary">
            <summary>ALTER_EXTERNAL_LIBRARY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DropExternalLibrary">
            <summary>DROP_EXTERNAL_LIBRARY</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLogin">
            <summary>AUDIT_LOGIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLogout">
            <summary>AUDIT_LOGOUT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginFailed">
            <summary>AUDIT_LOGIN_FAILED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Eventlog">
            <summary>EVENTLOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Errorlog">
            <summary>ERRORLOG</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockDeadlock">
            <summary>LOCK_DEADLOCK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Exception">
            <summary>EXCEPTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCachemiss">
            <summary>SP_CACHEMISS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCacheinsert">
            <summary>SP_CACHEINSERT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpCacheremove">
            <summary>SP_CACHEREMOVE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SpRecompile">
            <summary>SP_RECOMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectCreated">
            <summary>OBJECT_CREATED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectDeleted">
            <summary>OBJECT_DELETED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.HashWarning">
            <summary>HASH_WARNING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockDeadlockChain">
            <summary>LOCK_DEADLOCK_CHAIN</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LockEscalation">
            <summary>LOCK_ESCALATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbErrors">
            <summary>OLEDB_ERRORS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ExecutionWarnings">
            <summary>EXECUTION_WARNINGS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SortWarnings">
            <summary>SORT_WARNINGS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MissingColumnStatistics">
            <summary>MISSING_COLUMN_STATISTICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MissingJoinPredicate">
            <summary>MISSING_JOIN_PREDICATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ServerMemoryChange">
            <summary>SERVER_MEMORY_CHANGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable0">
            <summary>USERCONFIGURABLE_0</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable1">
            <summary>USERCONFIGURABLE_1</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable2">
            <summary>USERCONFIGURABLE_2</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable3">
            <summary>USERCONFIGURABLE_3</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable4">
            <summary>USERCONFIGURABLE_4</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable5">
            <summary>USERCONFIGURABLE_5</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable6">
            <summary>USERCONFIGURABLE_6</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable7">
            <summary>USERCONFIGURABLE_7</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable8">
            <summary>USERCONFIGURABLE_8</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.Userconfigurable9">
            <summary>USERCONFIGURABLE_9</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DataFileAutoGrow">
            <summary>DATA_FILE_AUTO_GROW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LogFileAutoGrow">
            <summary>LOG_FILE_AUTO_GROW</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DataFileAutoShrink">
            <summary>DATA_FILE_AUTO_SHRINK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.LogFileAutoShrink">
            <summary>LOG_FILE_AUTO_SHRINK</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseScopeGdrEvent">
            <summary>AUDIT_DATABASE_SCOPE_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectGdrEvent">
            <summary>AUDIT_SCHEMA_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddloginEvent">
            <summary>AUDIT_ADDLOGIN_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginGdrEvent">
            <summary>AUDIT_LOGIN_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginChangePropertyEvent">
            <summary>AUDIT_LOGIN_CHANGE_PROPERTY_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditLoginChangePasswordEvent">
            <summary>AUDIT_LOGIN_CHANGE_PASSWORD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddLoginToServerRoleEvent">
            <summary>AUDIT_ADD_LOGIN_TO_SERVER_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddDbUserEvent">
            <summary>AUDIT_ADD_DB_USER_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddMemberToDbRoleEvent">
            <summary>AUDIT_ADD_MEMBER_TO_DB_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAddRoleEvent">
            <summary>AUDIT_ADD_ROLE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditAppRoleChangePasswordEvent">
            <summary>AUDIT_APP_ROLE_CHANGE_PASSWORD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectAccessEvent">
            <summary>AUDIT_SCHEMA_OBJECT_ACCESS_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditBackupRestoreEvent">
            <summary>AUDIT_BACKUP_RESTORE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDbccEvent">
            <summary>AUDIT_DBCC_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditChangeAuditEvent">
            <summary>AUDIT_CHANGE_AUDIT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbCallEvent">
            <summary>OLEDB_CALL_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbQueryinterfaceEvent">
            <summary>OLEDB_QUERYINTERFACE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbDatareadEvent">
            <summary>OLEDB_DATAREAD_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXml">
            <summary>SHOWPLAN_XML</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeprecationAnnouncement">
            <summary>DEPRECATION_ANNOUNCEMENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeprecationFinalSupport">
            <summary>DEPRECATION_FINAL_SUPPORT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ExchangeSpillEvent">
            <summary>EXCHANGE_SPILL_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseManagementEvent">
            <summary>AUDIT_DATABASE_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectManagementEvent">
            <summary>AUDIT_DATABASE_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabasePrincipalManagementEvent">
            <summary>AUDIT_DATABASE_PRINCIPAL_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectManagementEvent">
            <summary>AUDIT_SCHEMA_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerPrincipalImpersonationEvent">
            <summary>AUDIT_SERVER_PRINCIPAL_IMPERSONATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabasePrincipalImpersonationEvent">
            <summary>AUDIT_DATABASE_PRINCIPAL_IMPERSONATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectTakeOwnershipEvent">
            <summary>AUDIT_SERVER_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectTakeOwnershipEvent">
            <summary>AUDIT_DATABASE_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BlockedProcessReport">
            <summary>BLOCKED_PROCESS_REPORT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXmlStatisticsProfile">
            <summary>SHOWPLAN_XML_STATISTICS_PROFILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DeadlockGraph">
            <summary>DEADLOCK_GRAPH</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TraceFileClose">
            <summary>TRACE_FILE_CLOSE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditChangeDatabaseOwner">
            <summary>AUDIT_CHANGE_DATABASE_OWNER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditSchemaObjectTakeOwnershipEvent">
            <summary>AUDIT_SCHEMA_OBJECT_TAKE_OWNERSHIP_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlStarted">
            <summary>FT_CRAWL_STARTED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlStopped">
            <summary>FT_CRAWL_STOPPED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.FtCrawlAborted">
            <summary>FT_CRAWL_ABORTED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.UserErrorMessage">
            <summary>USER_ERROR_MESSAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ObjectAltered">
            <summary>OBJECT_ALTERED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.SqlStmtrecompile">
            <summary>SQL_STMTRECOMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DatabaseMirroringStateChange">
            <summary>DATABASE_MIRRORING_STATE_CHANGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanXmlForQueryCompile">
            <summary>SHOWPLAN_XML_FOR_QUERY_COMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.ShowplanAllForQueryCompile">
            <summary>SHOWPLAN_ALL_FOR_QUERY_COMPILE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerScopeGdrEvent">
            <summary>AUDIT_SERVER_SCOPE_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectGdrEvent">
            <summary>AUDIT_SERVER_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectGdrEvent">
            <summary>AUDIT_DATABASE_OBJECT_GDR_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerOperationEvent">
            <summary>AUDIT_SERVER_OPERATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerAlterTraceEvent">
            <summary>AUDIT_SERVER_ALTER_TRACE_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerObjectManagementEvent">
            <summary>AUDIT_SERVER_OBJECT_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditServerPrincipalManagementEvent">
            <summary>AUDIT_SERVER_PRINCIPAL_MANAGEMENT_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseOperationEvent">
            <summary>AUDIT_DATABASE_OPERATION_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditDatabaseObjectAccessEvent">
            <summary>AUDIT_DATABASE_OBJECT_ACCESS_EVENT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.OledbProviderInformation">
            <summary>OLEDB_PROVIDER_INFORMATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.MountTape">
            <summary>MOUNT_TAPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AssemblyLoad">
            <summary>ASSEMBLY_LOAD</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.XqueryStaticType">
            <summary>XQUERY_STATIC_TYPE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnSubscription">
            <summary>QN__SUBSCRIPTION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnParameterTable">
            <summary>QN__PARAMETER_TABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnTemplate">
            <summary>QN__TEMPLATE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.QnDynamics">
            <summary>QN__DYNAMICS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.BitmapWarning">
            <summary>BITMAP_WARNING</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DatabaseSuspectDataPage">
            <summary>DATABASE_SUSPECT_DATA_PAGE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.CpuThresholdExceeded">
            <summary>CPU_THRESHOLD_EXCEEDED</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.AuditFulltext">
            <summary>AUDIT_FULLTEXT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlEvents">
            <summary>DDL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServerLevelEvents">
            <summary>DDL_SERVER_LEVEL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlEndpointEvents">
            <summary>DDL_ENDPOINT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseEvents">
            <summary>DDL_DATABASE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServerSecurityEvents">
            <summary>DDL_SERVER_SECURITY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlLoginEvents">
            <summary>DDL_LOGIN_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlGdrServerEvents">
            <summary>DDL_GDR_SERVER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAuthorizationServerEvents">
            <summary>DDL_AUTHORIZATION_SERVER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlCredentialEvents">
            <summary>DDL_CREDENTIAL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServiceMasterKeyEvents">
            <summary>DDL_SERVICE_MASTER_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlExtendedProcedureEvents">
            <summary>DDL_EXTENDED_PROCEDURE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlLinkedServerEvents">
            <summary>DDL_LINKED_SERVER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlLinkedServerLoginEvents">
            <summary>DDL_LINKED_SERVER_LOGIN_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlMessageEvents">
            <summary>DDL_MESSAGE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRemoteServerEvents">
            <summary>DDL_REMOTE_SERVER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseLevelEvents">
            <summary>DDL_DATABASE_LEVEL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlTableViewEvents">
            <summary>DDL_TABLE_VIEW_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlTableEvents">
            <summary>DDL_TABLE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlViewEvents">
            <summary>DDL_VIEW_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlIndexEvents">
            <summary>DDL_INDEX_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlStatisticsEvents">
            <summary>DDL_STATISTICS_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSynonymEvents">
            <summary>DDL_SYNONYM_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlFunctionEvents">
            <summary>DDL_FUNCTION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlProcedureEvents">
            <summary>DDL_PROCEDURE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlTriggerEvents">
            <summary>DDL_TRIGGER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlEventNotificationEvents">
            <summary>DDL_EVENT_NOTIFICATION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAssemblyEvents">
            <summary>DDL_ASSEMBLY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlTypeEvents">
            <summary>DDL_TYPE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseSecurityEvents">
            <summary>DDL_DATABASE_SECURITY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlCertificateEvents">
            <summary>DDL_CERTIFICATE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlUserEvents">
            <summary>DDL_USER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRoleEvents">
            <summary>DDL_ROLE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlApplicationRoleEvents">
            <summary>DDL_APPLICATION_ROLE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSchemaEvents">
            <summary>DDL_SCHEMA_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlGdrDatabaseEvents">
            <summary>DDL_GDR_DATABASE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAuthorizationDatabaseEvents">
            <summary>DDL_AUTHORIZATION_DATABASE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSymmetricKeyEvents">
            <summary>DDL_SYMMETRIC_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAsymmetricKeyEvents">
            <summary>DDL_ASYMMETRIC_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlCryptoSignatureEvents">
            <summary>DDL_CRYPTO_SIGNATURE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlMasterKeyEvents">
            <summary>DDL_MASTER_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSsbEvents">
            <summary>DDL_SSB_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlMessageTypeEvents">
            <summary>DDL_MESSAGE_TYPE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlContractEvents">
            <summary>DDL_CONTRACT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlQueueEvents">
            <summary>DDL_QUEUE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServiceEvents">
            <summary>DDL_SERVICE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRouteEvents">
            <summary>DDL_ROUTE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRemoteServiceBindingEvents">
            <summary>DDL_REMOTE_SERVICE_BINDING_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlXmlSchemaCollectionEvents">
            <summary>DDL_XML_SCHEMA_COLLECTION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlPartitionEvents">
            <summary>DDL_PARTITION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlPartitionFunctionEvents">
            <summary>DDL_PARTITION_FUNCTION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlPartitionSchemeEvents">
            <summary>DDL_PARTITION_SCHEME_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDefaultEvents">
            <summary>DDL_DEFAULT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlExtendedPropertyEvents">
            <summary>DDL_EXTENDED_PROPERTY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlFulltextCatalogEvents">
            <summary>DDL_FULLTEXT_CATALOG_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlPlanGuideEvents">
            <summary>DDL_PLAN_GUIDE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlRuleEvents">
            <summary>DDL_RULE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlEventSessionEvents">
            <summary>DDL_EVENT_SESSION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlResourceGovernorEvents">
            <summary>DDL_RESOURCE_GOVERNOR_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlResourcePool">
            <summary>DDL_RESOURCE_POOL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlWorkloadGroup">
            <summary>DDL_WORKLOAD_GROUP</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlCryptographicProviderEvents">
            <summary>DDL_CRYPTOGRAPHIC_PROVIDER_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseEncryptionKeyEvents">
            <summary>DDL_DATABASE_ENCRYPTION_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlBrokerPriorityEvents">
            <summary>DDL_BROKER_PRIORITY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServerAuditEvents">
            <summary>DDL_SERVER_AUDIT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlServerAuditSpecificationEvents">
            <summary>DDL_SERVER_AUDIT_SPECIFICATION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseAuditSpecificationEvents">
            <summary>DDL_DATABASE_AUDIT_SPECIFICATION_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlFulltextStoplistEvents">
            <summary>DDL_FULLTEXT_STOPLIST_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSearchPropertyListEvents">
            <summary>DDL_SEARCH_PROPERTY_LIST_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSequenceEvents">
            <summary>DDL_SEQUENCE_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlAvailabilityGroupEvents">
            <summary>DDL_AVAILABILITY_GROUP_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlDatabaseAuditEvents">
            <summary>DDL_DATABASE_AUDIT_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlSecurityPolicyEvents">
            <summary>DDL_SECURITY_POLICY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlColumnMasterKeyEvents">
            <summary>DDL_COLUMN_MASTER_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlColumnEncryptionKeyEvents">
            <summary>DDL_COLUMN_ENCRYPTION_KEY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlExternalResourcePoolEvents">
            <summary>DDL_EXTERNAL_RESOURCE_POOL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.DdlLibraryEvents">
            <summary>DDL_LIBRARY_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcAllEvents">
            <summary>TRC_ALL_EVENTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcDatabase">
            <summary>TRC_DATABASE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcErrorsAndWarnings">
            <summary>TRC_ERRORS_AND_WARNINGS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcLocks">
            <summary>TRC_LOCKS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcObjects">
            <summary>TRC_OBJECTS</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcPerformance">
            <summary>TRC_PERFORMANCE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcSecurityAudit">
            <summary>TRC_SECURITY_AUDIT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcServer">
            <summary>TRC_SERVER</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcStoredProcedures">
            <summary>TRC_STORED_PROCEDURES</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcTsql">
            <summary>TRC_TSQL</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcUserConfigurable">
            <summary>TRC_USER_CONFIGURABLE</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcOledb">
            <summary>TRC_OLEDB</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcFullText">
            <summary>TRC_FULL_TEXT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcDeprecation">
            <summary>TRC_DEPRECATION</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcClr">
            <summary>TRC_CLR</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.EventType.TrcQueryNotifications">
            <summary>TRC_QUERY_NOTIFICATIONS</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.EventTypes">
            <summary>A collection of EventTypes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.GetKey(RedGate.SQLCompare.Engine.EventType)">
            <summary>Generates a key for an event type.</summary>
            <param name="value">The event type for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.SerializeItem(RedGate.SQLCompare.Engine.EventType,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>Internal</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.EventTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>Internal</summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExtendedProperties">
            <summary>The extended properties associated with a database object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.SerializeItem(RedGate.SQLCompare.Engine.ExtendedProperty,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperties.Item(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Returns an extended property given information about its types and names.</summary>
            <param name="level0Type">The type of the level0 object for which the extended property is specified.</param>
            <param name="level0Name">The name of the level0 object for which the extended property is specified.</param>
            <param name="level1Type">The type of the level1 object for which the extended property is specified.</param>
            <param name="level1Name">The name of the level1 object for which the extended property is specified.</param>
            <param name="level2Type">The type of the level2 object for which the extended property is specified.</param>
            <param name="level2Name">The name of the level2 object for which the extended property is specified.</param>
            <param name="name">The name of the extended property.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperties.Item(RedGate.SQLCompare.Engine.ExtendedProperty)">
            <summary>Returns an extended property.</summary>
            <param name="value">The value of the extended property to get.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.ResetInternalKeysAfterParentRename">
            <summary>
            ExtendedProperties are stored in the base class hashtable based on a key that contains the parent object
            (table, column!) name. However, if the parent object is to be renamed (see refactoring), then the hashtable
            needs to be repopulated. This method removes all entries from the hastable, and repopulates it with
            consideration to the new parent name. Note, that when this is executed, the parent name must already be set
            to its new value.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.CompareWith(RedGate.SQLCompare.Engine.ExtendedProperties,RedGate.SQLCompare.Engine.ExtendedProperties,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>
            Compare two <see cref="T:RedGate.SQLCompare.Engine.ExtendedProperties"/> collections and return a list of differences between them
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.GetRegion(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Returns a single <see cref="T:RedGate.SQLCompare.Engine.Region"/> for extended properties if extended properties
            should be scripted out
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperties.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name does
            not need to be considered.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExtendedProperty">
            <summary>An extended property.</summary>
            <remarks>
            See sp_addextendedproperty in <em>SQL Server Books Online</em> for more information.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level">
            <summary>Retruns the level of the property.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level0Type">
            <summary>The Level0 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level0Name">
            <summary>The Level0 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level1Type">
            <summary>The Level1 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level1Name">
            <summary>The Level1 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level2Type">
            <summary>The Level2 type of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.Level2Name">
            <summary>The Level2 name of the extended property.</summary>
            <remarks>See <em>SQL Server Books Online</em> for more information.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ExtendedProperty.VariableDeclareScriptSource">
            <summary>The script sources for the variable assigned to this extended property</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.PropertyOn">
            <summary>The name of the object on which the extended property is defined on.</summary>
            <returns>The name of the object on which the extended property is defined on.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.PropertyDescription(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Constructs the last part of the parameter list for both the create and alter calls for the extended property.
            This does NOT include the value and name pair, so it says something only about the parent object!
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.GetObjectFromTypeAndName">
            <summary>This tries to identify the parent object for the extended property.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExtendedProperty.ToString">
            <summary>A string representation of the extended property.</summary>
            <returns>A string.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Field">
            <summary>A SQL Server field.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Field.RareFieldItems">
            <summary>
            Certain field properties are rather rare. For such, it is worht to encapsulate them into a wrapper class, and
            use memory only when needed.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.ProcessColumnDependencies(RedGate.SQLCompare.Engine.IField)">
            <summary>Sets up the column level dependencies for the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ScriptSourceForFullTextColumn">
            <summary>
            The location of the creation script for the fulltext column information for this field if the database source
            is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IsFullTextFromInlineCreate">
            <summary>
            True if this fulltext field was set from an inline CREATE FULLTEXT INDEX statement
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ScriptSourceForDefault">
            <summary>
            The location of the creation script for the default binding of this field if the database source is set to
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ScriptSourceForRule">
            <summary>
            The location of the creation script for the rule binding of this field if the database source is set to
            scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ColumnID">
            <summary>For internal use only.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Owner">
            <summary>The owner of the field. This is undefined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IsIncludedInFullTextIndex">
            <summary>True if the field is contained in a full-text index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullTextTypeColumn">
            <summary>
            The column that holds document type information. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullTextLanguage">
            <summary>The language of any full-text index to which the field belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.GeneratedAlwaysType">
            <summary>
            Whether the field is GENERATED ALWAYS AS ROW (START|END) or not. This is part of the temporal tables
            feature of SQL Server 2016.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Hidden">
            <summary>
            For temporal tables, specifies that the column doesn't appear in SELECT * statements.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Scale">
            <summary>The scale of the field.</summary>
            <remarks>Valid for numeric and decimal data types.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DefaultText">
            <summary>The text of the field's default value.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.AddRedundantParentheses(System.String)">
            <summary>Canonicalise the parentheses around a default expression.</summary>
            <remarks>
            After around ssms 2005, entering a default value for a field will get saved as '((0))', while it would only
            have one set of brackets in 2000. This doesn't cause a deployable difference but really annoys people when it
            shows up in the diff window.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Precision">
            <summary>The precision of a decimal or numeric data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.AllowNulls">
            <summary>True if the field can contain NULL values.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IdentitySeed">
            <summary>The identity seed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IdentityCurrent">
            <summary>The current identity value.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.IdentityIncrement">
            <summary>The identity increment.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Default">
            <summary>The default that is bound to the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DRIDefault">
            <summary>The Declarative Referential Integrity (DRI) default.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FilestreamUniqueIndex">
            <summary>The unique constraint to make it a value index for filestream columns</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Sparse">
            <summary>Whether this column is a sparse column</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ComputedText">
            <summary>The computed text of the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.RowGUIDCol">
            <summary>True if the field is a ROWGUIDCOL.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Collation">
            <summary>The collation order of character fields.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Rule">
            <summary>The rule bound to the field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Filestream">
            <summary>Specifies if this is a filestream column.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.SqlType">
            <summary>The field type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Identity">
            <summary>True if the field is an identity field.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Computed">
            <summary>True if the field is computed.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DependentFields">
            <summary>Dependent fields for computed columns.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.NotForReplication">
            <summary>True if the field is marked as <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DefinedSize">
            <summary>The length of the field.</summary>
            <remarks>Valid only for character and binary data.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Persisted">
            <summary>The column is in a calculated column that is persisted.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.QualifiedName">
            <summary>The qualified name of the object.  Do you mean <seealso cref="P:RedGate.SQLCompare.Engine.Field.Name" />?</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Name">
            <summary>
            The name of the field.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.Field.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.TypeSchemaName">
            <summary>The name of the schema for the field's data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.TypeName">
            <summary>The name of the field type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullyQualifiedTypeName">
            <summary>
            The name of the fully-qualified field type. For SQL Server 2005, this property contains the schema name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.XmlDocument">
            <summary>The referenced XML document.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ColumnSet">
            <summary>True if this field is a column set.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.XmlSchemaCollection">
            <summary>The referenced XML schema collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.DataMaskingFunction">
            <summary>
            The function used to mask the data.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.CanMigrateTo(RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.IField)">
            <summary>
            return true if we can use a simple ALTER TABLE statement to modify the column to be safe, check the current
            and the destination column
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Field.CompareWith(RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.ComparisonContext,System.Boolean)">
            <returns><em>True</em> if the fields are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the field with a specified field.</summary>
            <param name="targetField">The field to compare.</param>
            <param name="context">Comparison options.</param>
            <param name="ignoreDriDefault">Whether to ignore default constraints for the field</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.FullyQualifiedName">
            <summary>
            The fully-qualified name of the field.  DANGER WILL ROBINSON!!  This is not escaped.
            </summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.Database">
            <summary>The database to which the field belongs.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Field.ObjectType">
            <summary>Returns ObjectType.Field</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FieldBindings.GetKey(RedGate.SQLCompare.Engine.FieldBinding)">
            <summary>Generates a key for a field binding.</summary>
            <param name="value">The field binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Fields">
            <summary>A collection of fields.</summary>
            <remarks>
            A table contains a collection of fields. An index also contains a collection of fields.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.#ctor(System.Boolean)">
            <summary>Constructs a field collection.</summary>
            <param name="caseSensitive">Indicates whether the field names are case sensitive.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.#ctor(System.Boolean,System.Int32)">
            <summary>Constructs a field collection.</summary>
            <param name="caseSensitive">Indicates whether the field names are case sensitive.</param>
            <param name="count">The initial capacity of the collection</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.#ctor(RedGate.SQLCompare.Engine.Fields)">
            <summary>Constructs a field collection. (shallow clone!)</summary>
            <param name="fields">Fields to clone</param>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Fields.GetKey(RedGate.SQLCompare.Engine.IField)">
            <summary>Generates a key for a field.</summary>
            <param name="value">The field for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FileGroups">
            <summary>A collection of filegroups.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FileGroups.Add(System.String)">
            <summary>
            Adds a file group
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FileGroups.Insert(System.Int32,System.String)">
            <summary>
            Inserts a file group
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FlatFieldList.Add(RedGate.SQLCompare.Engine.IField)">
            <summary>
            Adds a new field
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FlatFieldList.Remove(RedGate.SQLCompare.Engine.IField)">
            <summary>
             Removes the given field
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ForeignKey">
            <summary>A foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ScriptSource">
            <summary>
            The location of the creation script for object if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ScriptSourceNocheck">
            <summary>
            The location of any ALTER TABLE ... NOCHECK CONSTRAINT commands on the foreign key.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKey.ScriptSources">
            <summary>
            The collection of ScriptSource and ScriptSourceNoCheck so sql rewrites of foreign keys pick up both commands
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Name">
            <summary>The name of the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedTable">
            <summary>The table referenced by the foreign key.</summary>
            <returns>
            null if we've been deserialized or read from a script folder, and couldn't find a definition of our
            ReferencedTable
            </returns>
            <seealso cref="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedTableFullyQualifiedName" />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Fields">
            <summary>The fields in the foreign key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedFieldNames">
            <summary>The names of the fields referenced by the foreign key.</summary>
            <seealso cref="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedFields" />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedFields">
            <summary>
            The fields referenced by the foreign key, or an empty collection if they could not be bound (in the case of a
            scripts folder register or a deserialization)
            </summary>
            <seealso cref="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedFieldNames" />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.NotForReplication">
            <summary>True if the foreign key is marked as <em>not for replication</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.UpdateCascade">
            <summary>True if the foreign key is marked as <em>on update cascade</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.DeleteCascade">
            <summary>True if the foreign key is marked as <em>on delete cascade</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.UpdateReferentialAction">
            <summary>The referential action in case of an update.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.DeleteReferentialAction">
            <summary>The referential action in case of a delete.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.NoCheck">
            <summary>
            True if the foreign key is <em>not trusted</em> (it was created using WITH NOCHECK).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Disabled">
            <summary>True if the foreign key is <em>disabled</em> (it is set to NOCHECK).</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKey.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <returns>
            <em>True</em> if the foreign keys are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the foreign key with a specified foreign key.</summary>
            <param name="value">The foreign key to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedTableFullyQualifiedName">
            <summary>The fully-qualified name of the table referenced by the foreign key.</summary>
            <remarks>
            May be in a non-canonical case if we've been deserialized or read from a scripts folder and couldn't find a
            definition of our ReferencedTable
            </remarks>
            <seealso cref="P:RedGate.SQLCompare.Engine.ForeignKey.ReferencedTable" />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.QualifiedName">
            <summary>  Unused  </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.Database">
            <summary>  Unused  </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKey.ObjectType">
            <summary>  Unused  </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKey.ForeignKeyCompare(RedGate.SQLCompare.Engine.ForeignKey,RedGate.SQLCompare.Engine.ForeignKey)">
            <returns>
             1 if x should be later   in the list than y (ie x > y)
            -1 if x should be earlier in the list than y (ie y > x)
             0 if x and y are equivalent (this should only happen if x and y are the same FK)
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKey.CompareLists(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.StringComparer)">
            <summary>
            Compare two lists of strings in alphabetical order.
            there's probably a framework method for this but I can't find it at the moment
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ForeignKeys">
            <summary>A collection of foreign keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.SerializeItem(RedGate.SQLCompare.Engine.ForeignKey,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.GetKey(RedGate.SQLCompare.Engine.ForeignKey)">
            <summary>Generates a key for a foreign key.</summary>
            <param name="value">The foreign key for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ForeignKeys.Item(System.String)">
            <summary>Returns a foreign key given its name</summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ForeignKeys.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name does
            not need to be considered.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextCatalog">
            <summary>A full text catalog.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.ObjectType">
            <summary>Returns ObjectType.FullTextCatalog</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.FullyQualifiedName">
            <summary>
            The fully-qualified name of the catalog.  DANGER WILL ROBINSON!!  This is not escaped.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.ViewsAndTables">
            <summary>The views and tables that belong to the catalog.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.FileGroup">
            <summary>The filegroup of the catalog. This is set only for SQL Server 2005 databases.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.Path">
            <summary>The path of the catalog. This is used only for SQL Server 2005 databases.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.IsDefault">
            <summary>
            Indicates whether the catalog is the default full text catalog. This is used only for SQL Server 2005
            databases.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextCatalog.IsAccentSensitive">
            <summary>
            Indicates whether the catalog is accent sensitive. This is used only for SQL Server 2005 databases.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns>
            <em>True</em> if the full text catalogs are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the full text catalog with a specified full text catalog.</summary>
            <param name="target">The catalog to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalog.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="includeTables">If true, it includes the fulltext table statements.</param>
            <param name="includePath">
            If set to true the IN PATH will not be commented out. This is used for products other than SQL Compare 6.
            </param>
            <param name="features">Features supported by the object's database.</param>
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextCatalogs">
            <summary>A collection of full text catalogs.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalogs.SerializeItem(RedGate.SQLCompare.Engine.FullTextCatalog,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextCatalogs.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Function">
            <summary>A user-defined function.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Function.m_SchemaBoundFunctions">
            <summary>Schema bound functions.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ObjectType">
            <summary>Returns ObjectType.Function</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.FunctionType">
            <summary>Returns the function type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.SysobjectID">
            <summary>The sysobject identifier for this function.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Text">
            <summary>The text of the function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.SchemaBound">
            <summary>True if the function is schema bound.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.QuotedIdentifierOn">
            <summary>True if the function was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AnsiNullsOn">
            <summary>True if the function was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Parameters">
            <summary>The function parameters.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ReturnParameter">
            <summary>The function's return parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.NullOnNullInput">
            <summary>The function returns NULL on NULL input.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Assembly">
            <summary>The CLR assembly for the function, if this is a CLR function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ExecuteAsType">
            <summary>The EXECUTE AS clause used for the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the function. This is a SQL Server 2005
            feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AssemblyClass">
            <summary>The CLR assembly class name for the function, if this is a CLR function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AssemblyMethod">
            <summary>The CLR assembly method name for the function, if this is a CLR function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.ReturnFields">
            <summary>The function's return fields.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.CLRObject">
            <summary>True if the function is a CLR function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.Encrypted">
            <summary>True if the function definition was encrypted.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the function with a specified function.</summary>
            <returns><em>True</em> if the functions are identical; otherwise, <em>false</em>.</returns>
            <param name="target">The function to compare with.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.IsSystemObject">
            <summary>
            For internal use only!!! is to be used only by SQL Prompt! It is only set when system objects are populated
            </summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Function.AssemblyFromDeserialization">
            <summary>
            This is used when reading from scripts (the assembly might not available at the time the function is created)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Function.CheckIfFunctionTableColumnsNeedRebuild(RedGate.SQLCompare.Engine.Function,RedGate.SQLCompare.Engine.Function)">
            <summary>
            Checks if a function columns have been modified in a way that requires rebuild. Note that computed columns
            cannot be dropped!
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Functions">
            <summary>A collection of functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Functions.SerializeItem(RedGate.SQLCompare.Engine.Function,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Functions.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDatabaseObject">
            <summary>An interface implemented by database objects.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares two database objects.</summary>
            <returns>
            <em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="context"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDatabaseObject.Database">
            <summary>The database to which the object belongs.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>
            temporary overload for <see cref="M:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)"/>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IDependsOnClrAssembly">
            <summary>
            This interface is used to mark database objects that can be directly dependent on a CLR assembly. For example
            a stored procedure may refer to an assembly.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDependsOnClrAssembly.Assembly">
            <summary>The CLR assembly for the implementing object, if this is a CLR object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IDependsOnClrAssembly.CLRObject">
            <summary>True if the implementing object is a CLR object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IExecuteAs">
            <summary>
            Used by database objects that can be executed as a specific user. This is used only for SQL Server 2005 and
            2008.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExecuteAs.ExecuteAsType">
            <summary>The EXECUTE AS clause used for the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IExecuteAs.ExecuteAs">
            <summary>The user whose security context is to be used.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IHasPermissions">
            <summary>The database object may have permissions associated with it.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IHasPermissions.Permissions">
            <summary>The permissions of the object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.IIsSystemObject">
            <summary>
            Indicates that an object instance is a system object when implemented by a class.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IIsSystemObject.IsSystemObject">
            <summary>Indicates that the object is a system object.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.RelationalIndex">
            <summary>A relational index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.Clustered">
            <summary>True if the index is clustered.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.Unique">
            <summary>True if the index is unique.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.Columnstore">
            <summary>True if the index is a columnstore index </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.UniqueConstraint">
            <summary>True if the index is a unique constraint.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.IsKeyIndexForFullTextIndex">
            <summary>True if the index is used in a full-text key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.PartitionedField">
            <summary>
            Indicates the field over which the index is partitioned. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.FilestreamFileGroup">
            <summary>The filegroup or partition scheme containing filestream data.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.DataCompressionPartitions">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.Filter">
            <summary>
            The filtering condition on the index. This property exists in SQL Server 2008 and later.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.DataCompressionPartitionsInternal">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature. The internal version
            gives you direct access to the list that is stored. If there is no important information in the list it is
            not stored!
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.RelationalIndex.ShouldWriteFileGroupOrPartitionScheme">
            <summary>
            Not for external use - will be obsolteted when more similar options can be encapsulated in a class together.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Indexes">
            <summary>A collection of indexes.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Relational">
            <summary>An IEnumerable of all the relational indexes in this collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Xml">
            <summary>An IEnumerable of all the xml indexes in this collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Spatial">
            <summary>An IEnumerable of all the spatial indexes in this collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.ColumnstoreIndexes">
            <summary>An IEnumerable of all the columnstore indexes in this collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Statistics">
            <summary>An IEnumerable of all the statistics in this collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.SerializeItem(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.GetKey(RedGate.SQLCompare.Engine.Index)">
            <summary>Generates a key for an index.</summary>
            <param name="value">The index for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Indexes.Item(System.String)">
            <summary>Returns an index given a name.</summary>
            <param name="name">The string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.Sort">
            <summary>Sorts indexes based on their names and fields.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Indexes.IndexSortComparer.Compare(RedGate.SQLCompare.Engine.Index,RedGate.SQLCompare.Engine.Index)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the
            other.
            </summary>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ISysobjectIdentifiable">
            <summary>
            For classes that store object that can be uniquely identified using a sys.objects identifier.
            </summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ISysobjectIdentifiable.SysobjectID">
            <summary>The sysobject identier of the object.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IMemoizeDependencies.TryGetMemoized(System.String,System.Boolean,System.Boolean,System.Collections.Generic.Stack{System.String[]}@)">
            <note>
            The caller of this method is allowed to modify the stack you return, and the arrays within it. However thay
            are not allowed to rely on any reference equivalences between the rows in the stack reflecting those in the
            memoized valued. It may also [in the future] be true that the strings returned here are not reference equals
            with those passed in, for example they might not be interned.
            </note>
            <param name="sql">Must not be null</param>
            <param name="quotedIdentifiers"></param>
            <param name="throwExceptions"></param>
            <param name="memoizedValue"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IMemoizeDependencies.Memoize(System.String,System.Boolean,System.Boolean,System.Collections.Generic.Stack{System.String[]})">
            <note>
            The caller of this method is allowed to modify the stack after you return, and the arrays within it.
            </note>
            <param name="sql">Must not be null</param>
            <param name="quotedIdentifiers"></param>
            <param name="throwExceptions"></param>
            <param name="result">You must not modify the string[]s in the stack or the stack itself at any point</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.KeyedCollection`1">
            <summary>A collection that can store items by key as well as by list index.</summary>
            <typeparam name="T">The type stored in the <see cref="T:RedGate.SQLCompare.Engine.KeyedCollection`1" />.</typeparam>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.KeyedCollection`1.m_InnerList">
            <summary>The inner list to store Ts.</summary>
            <exclude />
        </member>
        <member name="F:RedGate.SQLCompare.Engine.KeyedCollection`1.m_KeyDictionary">
            <summary>Internal keyed dictionary.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.#ctor">
            <summary>
            Empty constructor - doesn't do anything. It is up to the caller to initialize the instance members.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.CaseSensitive">
            <summary>True if the keys are stored case-sensitively.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.InnerList">
            <summary>For internal use mutating the collection</summary>
            <returns>For internal use</returns>
            <throws><see cref="T:RedGate.SQLCompare.Engine.SqlCompareException" /> iff <see cref="F:RedGate.SQLCompare.Engine.KeyedCollection`1.m_IsFrozen" /></throws>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.KeyDictionary">
            <summary>For internal use.</summary>
            <returns>For internal use</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.Count">
            <summary>Returns the number of elements stored in the <see cref="T:RedGate.SQLCompare.Engine.KeyedCollection`1" />.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.Clear">
            <summary>
            Clear out the collection
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.Add(`0)">
            <summary>
            Throws on duplicates
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.RemoveAll(System.Collections.Generic.ICollection{`0})">
            <summary>Removes all elements in <paramref name="toRemove" /> from the collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.Item(System.Int32)">
            <summary>Returns elements by index.</summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.KeyedCollection`1.Item(System.String)">
            <summary>Returns elements by key.</summary>
            <returns>The value, or default(<typeparamref name="T" />) if not found.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.GetKey(`0)">
            <summary>For internal use.</summary>
            <param name="value">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.KeyedCollection`1.GetEnumerator">
            <summary>Returns the list enumerator.</summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MappedBlobStore">
            <summary>
            A blob store that passes on all id requests not found to the unmapped blobstore.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappedBlobStore.#ctor(RedGate.SQLCompare.Engine.SerializableBlobStore)">
            <summary>Constructor.</summary>
            <param name="bs">
            The original unmapped blobstore to pass on all requests to that aren't in this blobstore.
            </param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseMapper">
            <summary>Class that applies owner mappings to a database.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.MapDatabase(RedGate.SQLCompare.Engine.SqlCompareOwnerMappings)">
            <summary>
            Applies the specified owner mappings to the database. This operation can take some time, during which you can
            obtain progress information through the <see cref="T:RedGate.Legacy.ProgressTasks.ICancellable" /> interface implementation.
            </summary>
            <param name="origMappings">The owner mappings to apply to the database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.MapDBObject(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Takes a database object in the unmapped database and returns the corresponding mapped database object in the
            mapped database
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.MapSchemaObject``1(``0,System.Collections.Generic.IDictionary{``0,``0})">
            <summary>Maps the owner amd extended properties of this schema object.</summary>
            <typeparam name="T">The type of schema object.</typeparam>
            <param name="obj">The schema object to map.</param>
            <param name="objMappingsToAdd">
            Contains the new object mappings to add after all schema object have been added. This is to try and ensure
            there are no clashes during mapping.
            </param>
            <returns>The new object owner, or null if no mapping was applied.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.FixTextObjectDefinition(RedGate.SQLCompare.Engine.ITextObject)">
            <summary>Applies all schema object mappings to the definition of this textual object.</summary>
            <param name="obj">The textual object to apply the mappings to.</param>
            <returns>The new object definition.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.FixComputedColumnExpression(System.String)">
            <summary>Applies all schema object mappings to the specified expression</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.CancelOperation">
            <summary>
            Cancels the current running operation. This will throw an instance of
            <see cref="T:System.OperationCanceledException" />
            at the currently executing location on the executing thread.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseMapper.Status">
            <summary>
            Gets and sets a delegate that can be used to notify of message or percentage changes.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseMapper.MapOwnerObject(RedGate.SQLCompare.Engine.IDatabaseObject)">
            <summary>
            Returns true if the specified owner object (a role, schema or user) should be mapped, given the other
            database version.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MappingException">
            <summary>Exception thrown when an error is encountered whilst mapping.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor">
            <summary>Creates a new exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.String)">
            <summary>Creates a new exception with the specified detail message.</summary>
            <param name="message">Detail message.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.String,System.Exception)">
            <summary>Creates a new exception with the specified detail message and cause.</summary>
            <param name="message">Detail message.</param>
            <param name="cause">Cause of exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is called during deserialization to reconstitute the exception object transmitted over a
            stream. For more information, see XML and SOAP Serialization.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Mappings`3">
            <summary>Abstract class for creating a set of mappings from a list of database objects.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mappings`3.m_Forward">
            <summary>Name forward mapping from full name of obj1 to Mapping.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Mappings`3.m_Backward">
            <summary>Name backward mapping from full name of obj2 to Mapping.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.#ctor(RedGate.SQLCompare.Engine.PrepareStringDelegate{`1,`2})">
            <summary>Contructor used when string preparation delegate is being changed.</summary>
            <param name="prepareStringDelegate">Function to be used to prepare string.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.#ctor(RedGate.SQLCompare.Engine.Mappings{`0,`1,`2})">
            <summary>Shallow copy constructor.</summary>
            <param name="mappings">Mappings to copy.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.Join(`1,`1)">
            <summary>Attempts to join two objects in one mapping.</summary>
            <returns>The mapping created.</returns>
            <param name="obj1">The first object, or null.</param>
            <param name="obj2">The second object, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.ShouldInclude(`1,`1,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.Split(`0)">
            <summary>
            Splits a mapping and creates two mappings; one to <em>null</em>, and one from
            <em>null</em>.
            </summary>
            <param name="old1">The mapping to be split, both obj1 and obj2 should be not null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.FromOne(`1)">
            <summary>Returns the mapping of the object in the first database.</summary>
            <param name="in1">object that the mapping is from, not null.</param>
            <returns>null if no mapping exists, or the mapping.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.FromOne(System.String)">
            <summary>Returns the Mapping of the object in the first database.</summary>
            <returns>If no mapping exists, <em>null</em>; otherwise, the Mapping.</returns>
            <param name="in1">The FullyQualifiedName of the object in the first database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.FromTwo(System.String)">
            <summary>Returns the Mapping of the object in the second database.</summary>
            <returns>If no mapping exists, <em>null</em>; otherwise, the Mapping.</returns>
            <param name="in2">The FullyQualifiedName of the object in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.Sort">
            <summary>Sorts the Mappings according the criteria appropriate for the object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.GetKey(System.String)">
            <summary>Return the key that should be used for the specified fully qualified name.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.CreateMappings``1(RedGate.SQLCompare.Engine.IKeyedCollection{``0},RedGate.SQLCompare.Engine.IKeyedCollection{``0},System.Object,System.Boolean)">
            <summary>
            Creates a mapping for each object in the collection where such a mapping is possible. All of the iteration is
            performed here and the matching can be affected by changing <see cref="M:RedGate.SQLCompare.Engine.Mappings`3.ShouldInclude(`1,`1,System.Object)" />
            in the sub class. The main action of joining to objects together is performed by <see cref="M:RedGate.SQLCompare.Engine.Mappings`3.Join(`1,`1)" /> which
            can itself call <c>CreateMappings</c> on child database objects.
            </summary>
            <param name="in1">List of objects in the first database, or null.</param>
            <param name="in2">List of objects in the second database, or null.</param>
            <param name="extra">
            This can be used by the <see cref="M:RedGate.SQLCompare.Engine.Mappings`3.Join(`1,`1)" /> function for extra information on how to join the objects.
            </param>
            <param name="useFullName">Use the FullyQualifiedName for matching</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings`3.Context">
            <summary>
            Access to the mapping context. The type of the context is dependent on the mapped objects.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.Clear">
            <summary>Removes all objects from the Mappings instance.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.RemoveAt(System.Int32)">
            <summary>Removes the mapping at the specified index of the Mappings instance.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="">Mapping is null at the specified index.</exception>
            <param name="index">The index of the mapping to be removed.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.RealRemove(`0)">
            <summary>Removes the specified object from the mappings instance.</summary>
            <param name="mapping">Mapping object to be removed.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.RealAdd(`0)">
            <summary>
            Adds a mapping to this Mappings instance. This will change the forwards and backwards maps as necessary. This
            will break any mapping that will conflict with the added mapping.
            </summary>
            <param name="mapping">mapping object to be added, not null.</param>
            <returns>index of the mapping object in the Mappings.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings`3.Item(System.Int32)">
            <summary>Gets the <see cref="T:RedGate.SQLCompare.Engine.Mapping`1" /> at the specified index.</summary>
            <param name="index">The zero-based index of the Mapping to get or set.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings`3.Item(System.String)">
            <summary>
            Gets the mapping of the specified object name, first attempting to match against objects in the first
            database, then matching against objects in the second database. Returns null if a mapping is not found.
            </summary>
            <param name="fullyQualifiedName">The string-based index of the element to get.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.Add(`0)">
            <summary>Adds an <see cref="T:RedGate.SQLCompare.Engine.Mapping`1" /> to the end of the Mappings instance.</summary>
            <returns>The Mappings index at which the object has been added.</returns>
            <param name="value">The object to be added to the end of the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:RedGate.SQLCompare.Engine.Mapping`1" /> from the Mappings instance.
            </summary>
            <param name="value">The object to remove from the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.Contains(`0)">
            <summary>Determines whether the Mappings instance contains a specified object.</summary>
            <returns>
            <em>true</em> if the Mappings instance contains the specified object; otherwise,
            <em>false</em>.
            </returns>
            <param name="value">The <see cref="T:RedGate.SQLCompare.Engine.Mapping`1" /> to locate in the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.IndexOf(`0)">
            <summary>
            Searches for the specified <see cref="T:RedGate.SQLCompare.Engine.Mapping`1" /> and returns the zero-based index of the first occurrence
            within the Mappings instance.
            </summary>
            <returns>
            If found, the zero-based index of the first occurrence of the object within the Mappings instance; otherwise,
            -1.
            </returns>
            <param name="value">The object to locate in the Mappings instance.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.OnValidate(RedGate.SQLCompare.Engine.Mapping{`1})">
            <summary>Performs additional custom proccesses when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.Insert(System.Int32,`0)">
            <summary>Not Implemented.</summary>
            <exception cref="T:System.NotImplementedException">Throws <see cref="T:System.NotImplementedException" /> always</exception>
            <param name="index">Ignored.</param>
            <param name="value">Ignored.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.CancelOperation">
            <summary>Cancels the current operation.</summary>
            <remarks>An OperationCanceledException will be thrown.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Mappings`3.Status">
            <summary>The event handler used to receive status update events.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Mappings`3.PrepareString(`1,System.Boolean,`2)">
            <summary>A default implementation of the prepare string delegate.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectMappings">
            <summary>Holds mappings for tables or views in a schema.</summary>
            <example>
                <code lang="CS">
            using System;
            using RedGate.SQLCompare.Engine;
            using RedGate.SQLDataCompare.Engine;
            using RedGate.SQLDataCompare.Engine.ResultsStore;
             
            namespace RedGate.SQLDataCompare.ExampleTests
            {
                public class SchemaObjectMappingExample
                {
                    public void RunExample()
                    {
                        Database db1=new Database();
                        Database db2=new Database();
                        ComparisonSession session=new ComparisonSession();
                        SchemaObjectMappings mappings = new SchemaObjectMappings();        
                       
                        try
                        {
                            db1.RegisterForDataCompare(new ConnectionProperties(".", "WidgetDev"));
                            db2.RegisterForDataCompare(new ConnectionProperties(".", "WidgetLive"));                                    
                            
                            // Create the mappings between a certain table
                            SchemaObjectMapping SchemaObjectMapping = (SchemaObjectMapping)mappings.Join(db1.Tables["[dbo].[WidgetPrices]"], db2.Tables["[dbo].[WidgetPrices]"]);
             
                            // Set the custom comparison key for the table
                            SchemaObjectMapping.MatchingMappings.Clear();
                            SchemaObjectMapping.MatchingMappings.Add(SchemaObjectMapping.FieldMappings["WidgetID"]);
                            SchemaObjectMapping.RefreshMappingStatus();
             
                            // Set the where clause for the comparison
                            SchemaObjectMapping.Where = new WhereClause("Active = 'Y'");
             
                            // Peform the comparison
                            session.CompareDatabases(db1, db2, mappings);
                            
                            TableDifference difference=session.TableDifferences["[dbo].[WidgetPrices]"];
             
                            // Loop through all the rows
                            foreach(Row row in difference.ResultsStore)
                            {
                                Console.WriteLine("Row {0} type {1}", row.Index, row.Type.ToString());
                                int i=0;
                                foreach (varPair field in difference.ResultsStore.Fields)
                                {
                                    int field1=field.OrdinalInResults1;
                                    int field2=field.OrdinalInResults2;
                            
                                    if (field1 != field2)
                                    {
                                        //get the values
                                        object value1=row.Values[field1];
                                        object value2=row.Values[field2];
                                        if (value1 == null)
                                            value1="NULL";
                                        if (value2 == null)
                                            value2="NULL";
                                        Console.WriteLine("{0}\t{1}\t{2}\t{3}",field.Field(false).Name, value1.ToString(),row.FieldDifferent(i)?"&lt;&gt;":"==",  value2.ToString());
                                    }
                                    else
                                    {
                                        //this is part of the custom index we are comparing on
                                        object value=row.Values[field1];    
                                        Console.WriteLine("*{0}\t{1}",field.Field(false).Name, value.ToString());
                                    }
                                    i++;
                                }
                            }
                        }
                        finally
                        {
                            session.Dispose();
                            db1.Dispose();
                            db2.Dispose();
                        }
                    }
                }
            }
                </code>
                <code lang="VB">
            Option Explicit On 
             
            Imports RedGate.SQLCompare.Engine
            Imports RedGate.SQLDataCompare.Engine
            Imports RedGate.SQLDataCompare.Engine.ResultsStore
             
            Public Class SchemaObjectMappingExample
                Sub RunExample()
                    Dim session As New ComparisonSession
             
                    'register the databases for comparison
                    Dim db1 As New Database
                    Dim db2 As New Database
             
                    db1.RegisterForDataCompare(New ConnectionProperties(".", "WidgetDev"))
                    db2.RegisterForDataCompare(New ConnectionProperties(".", "WidgetLive"))
             
                    Dim mappings As New SchemaObjectMappings
             
                    Dim SchemaObjectMapping As SchemaObjectMapping = mappings.Join(db1.Tables("[dbo].[WidgetPrices]"), db2.Tables("[dbo].[WidgetPrices]"))
             
                    ' Set the custom comparison key for the table
                    SchemaObjectMapping.MatchingMappings.Clear()
                    SchemaObjectMapping.MatchingMappings.Add(SchemaObjectMapping.FieldMappings("WidgetID"))
                    SchemaObjectMapping.RefreshMappingStatus()
             
                    ' Set the where clause for the comparison
                    SchemaObjectMapping.Where = New WhereClause("Active = 'Y'")
             
                    'compare the databases
                    session.CompareDatabases(db1, db2, mappings)
             
                    Dim mapping As SchemaObjectMapping
             
             
                    Dim difference As TableDifference = session.TableDifferences("[dbo].[WidgetPrices]")
                    Dim row As row
                    For Each row In difference.ResultsStore  'loop through all the rows
                        Dim field As FieldPair
                        Dim i As Int32 = 0
                        Console.WriteLine("Row {0} type {1}", row.Index, row.Type.ToString())
                        For Each field In difference.ResultsStore.Fields
                            'work out where about in the results the field data is stored
                            'if we were comparing identical records, or records present in one
                            'database but not the other then we would not need to 
                            'use the OrdinalInResults1 and OrdinalInResults2 properties
                            'but just OrdinalInResults
                            Dim field1 As Int32 = field.OrdinalInResults1
                            Dim field2 As Int32 = field.OrdinalInResults2
             
                            If (field1 &lt;&gt; field2) Then
                                'get the values
                                Dim value1 As Object = row.Values(field1)
                                Dim value2 As Object = row.Values(field2)
                                If (value1 Is Nothing) Then
                                    value1 = "NULL"
                                End If
                                If (value2 Is Nothing) Then
                                    value2 = "NULL"
                                End If
                                If row.FieldDifferent(i) Then
                                    Console.WriteLine("{0}:{1} &lt;&gt; {2}", field.Field(False).Name, value1.ToString(), value2.ToString())
                                Else
                                    Console.WriteLine("{0}:{1} == {2}", field.Field(False).Name, value1.ToString(), value2.ToString())
                                End If
                            Else
                                'this is part of the unique index we are comparing on
                                Dim value As Object = row.Values(field1)
                                Console.WriteLine("*{0}:{1}", field.Field(False).Name, value.ToString())
                            End If
                            i += 1
                        Next
                    Next
                    'dispose of the objects
                    session.Dispose()
                    db1.Dispose()
                    db2.Dispose()
                End Sub
            End Class
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.#ctor">
            <summary>Default constructor, using case-sensitive keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.#ctor(System.Boolean)">
            <summary>Constructor specifying case-sensitivity.</summary>
            <param name="caseSensitive">
            If true, the mappings will be done using case-sensitive keys. If false, the keys will be case-insensitive
            </param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectMappings.CaseSensitive">
            <summary>Returns true if the keys are case-sensitive.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.GetKey(System.String)">
            <summary>Return the key that should be used for the specified fully qualified name.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.#ctor(RedGate.SQLCompare.Engine.Mappings{RedGate.SQLCompare.Engine.SchemaObjectMapping,RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.MappingContext})">
            <summary>Shallow copy constructor.</summary>
            <param name="schemaObjectMappings">The <see cref="T:RedGate.SQLCompare.Engine.SchemaObjectMappings" /> to be copied.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.ShouldInclude(RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.SchemaObject,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.Join(RedGate.SQLCompare.Engine.SchemaObject,RedGate.SQLCompare.Engine.SchemaObject)">
            <summary>
            Joins two views or tables, and attempts to map their fields and indexes. If there are no suitable indexes,
            the status is set to <em>Unable to Compare</em>.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">
            SchemaObjectMappings. Join must be called with
            ViewTableSuperClass arguments.
            </exception>
            <param name="obj1">The stored procedure in the first database.</param>
            <param name="obj2">The stored procedure in the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.GetMappedName(System.String,System.Boolean)">
            <summary>Returns the mapped schema object name for a particular fully qualified name.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectMappings.GetMappedObject(System.String,System.Boolean)">
            <summary>Returns the mapped schema object name for a particular fully qualified name.</summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Members">
            <summary>A collection of role members. These can be users or roles.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Members.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name does
            not need to be considered.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Message">
            <summary>A message.</summary>
            <remarks>See <see cref="T:RedGate.SQLCompare.Engine.Work" /> for more information.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.Shared.ComparisonInterfaces.Deployment.WarningSeverity,System.String)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.Shared.ComparisonInterfaces.Deployment.WarningSeverity,System.String,System.Object)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="arg0"></param>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.Shared.ComparisonInterfaces.Deployment.WarningSeverity,System.String,System.Object,System.Object)">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <exclude />
            <excludetoc />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Message.#ctor(System.String,RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.Shared.ComparisonInterfaces.Deployment.WarningSeverity,System.String,System.Object[])">
            <summary>For internal use only.</summary>
            <param name="messageTypeID"></param>
            <param name="dbobject">The object to which the warning belongs to.</param>
            <param name="severity">The severity of the warning/message.</param>
            <param name="text">The text of the warning/message.</param>
            <param name="args"></param>
            <exclude />
            <excludetoc />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Messages">
            <summary>A collection of messages.</summary>
            <remarks>See <see cref="T:RedGate.SQLCompare.Engine.Work" /> for more information.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.#ctor">
            <summary>Creates a new message collection.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.Add(RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentMessage)">
            <summary>For internal use only.</summary>
            <returns></returns>
            <exclude />
            <param name="value">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.AddIfNotExists(RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentMessage)">
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.Add(RedGate.SQLCompare.Engine.Messages)">
            <summary>
            Append all messages from the given collection
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.Remove(RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentMessage)">
            <summary>
            Removes a message
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.Sort(System.Collections.Generic.IComparer{RedGate.Shared.ComparisonInterfaces.Deployment.IDeploymentMessage})">
            <summary>Sorts the messages using the specified comparer.</summary>
            <param name="comparer">The IComparer to be used for the sorting.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Messages.Clear">
            <summary>
            Removes all messages
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageType">
            <summary>A message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.ObjectType">
            <summary>Returns ObjectType.MessageType</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.Validation">
            <summary>The validation requirement for the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.XmlCollection">
            <summary>The XML schema collection referenced by the message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.Contracts">
            <summary>The dependent contracts.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageType.IsSystemObject">
            <summary>Indicates whether the object in question is a system object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageType.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the message type with a specified message type.</summary>
            <returns>
            <em>True</em> if the message types are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The message type to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageType.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageTypes">
            <summary>A collection of message types.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypes.SerializeItem(RedGate.SQLCompare.Engine.MessageType,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageUsage">
            <summary>A message usage.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.MessageType">
            <summary>The message type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.SentByInitiator">
            <summary>True if the message type in the usage is sent by the initiator.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.MessageUsage.SentByTarget">
            <summary>True if the message type in the usage is sent by the target.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsage.Equals(RedGate.SQLCompare.Engine.MessageUsage,RedGate.SQLCompare.Engine.Options)">
            <returns>
            <em>True</em> if the message usages are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the message usage with a specified message usage.</summary>
            <param name="target">The message usage to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.MessageUsages">
            <summary>A collection of message usages.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.GetKey(RedGate.SQLCompare.Engine.MessageUsage)">
            <summary>Generates a key for a message usage.</summary>
            <param name="value">The message usage for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.SerializeItem(RedGate.SQLCompare.Engine.MessageUsage,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.MessageUsages.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DbConnectionExtensions">
            <summary>
            Extension methods for IDbConnection
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DbConnectionExtensions.OpenIfNecessary(System.Data.IDbConnection)">
            <summary>
            Helper method since connection.Open() will throw if we call it when the connection is already open
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.NullableBinaryReader">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Use the serialized value when reading CaseSensitivity values.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            When deserializing use the given value for CaseSensitivity, rather than the serialized version
            </summary>
            <param name="input"></param>
            <param name="caseSensitivity">The value returned by ReadCaseSensitivityBoolean()</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryReader.ReadString">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryReader.ReadBytes">
            <summary>Reads a byte array with an Int32 count header.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryReader.ReadSqlDecimal">
            <summary>Reads a SqlDecimal.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryReader.ReadCaseSensitivityBoolean">
            <summary>
            Read a Boolean, but if there is a cached case sensitivity setting return that.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.NullableBinaryWriter">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryWriter.Write(System.String)">
            <summary>For internal use only.</summary>
            <param name="value">For internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryWriter.WriteBytes(System.Byte[])">
            <summary>Writes a byte array with an Int32 count header.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.NullableBinaryWriter.WriteSqlDecimal(System.Data.SqlTypes.SqlDecimal)">
            <summary>Writes a SqlDecimal.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException">
            <summary>
            An exception that is used when a database object that is not in the database is requested.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor">
            <summary>Constructs an ObjectNotInDatabaseException exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor(System.String)">
            <summary>Constructs an ObjectNotInDatabaseException exception.</summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDatabaseException.#ctor(System.String,System.Exception)">
            <summary>Constructs an ObjectNotInDatabaseException exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectNotInDifferences">
            <summary>
            Exception that is used when a database object that is not in the differences collection is requested.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor">
            <summary>Constructs an ObjectNotInDifferences exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor(System.String)">
            <summary>Constructs an ObjectNotInDifferences exception.</summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ObjectNotInDifferences.#ctor(System.String,System.Exception)">
            <summary>Constructs an ObjectNotInDifferences exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ObjectTypeHelper">
            <summary>Various useful methods for ObjectType</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Options">
            <summary>Options used when comparing and synchronizing databases.</summary>
            <remarks>
            Calling methods on default(Options) will throw an exception. Do not use default(Options). Instead, use a
            nullable version of the <see cref="T:RedGate.SQLCompare.Engine.Options" /> type.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.None">
            <summary>None.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.All">
            <summary>For use in serialization etc.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ForceColumnOrder">
            <summary>Force table column order to be identical.</summary>
            <remarks>
            If additional columns are inserted into the middle of a table this option will force a rebuild of the table
            so the column order after synchronization is correct
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFillFactor">
            <summary>Ignore fill factor.</summary>
            <remarks>Ignores the fill factor in indexes when comparing and synchronizing databases</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnorePermissions">
            <summary>Ignore permissions.</summary>
            <remarks>Ignores permissions on objects when comparing and synchronizing objects</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWhiteSpace">
            <summary>Ignore white space.</summary>
            <remarks>Ignores white space (newlines, tabs, spaces etc.) when comparing objects</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreBindings">
            <summary>Ignore bindings.</summary>
            <remarks>
            Ignores bindings on columns and user defined types (eg sp_bindrule and sp_bindefault clauses won't be
            scripted)
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreQuotedIdentifiersAndAnsiNullSettings">
            <summary>Ignore SET QUOTED_IDENTIFIER and SET ANSI_NULLS statements.</summary>
            <remarks>
            Ignores these common SET statements when comparing views, stored procedures etc. Note that these statements
            will still appear in synchronization script. Note that all other Session SET statements
            <see href="http://msdn.microsoft.com/en-us/library/aa259205(v=sql.80)" /> are always ignored. It is not
            necessary to set this option for SSDT compatibility, it is part of the option group.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.CaseSensitiveObjectDefinition">
            <summary>Treat items as case sensitive.</summary>
            <remarks>
            Treats object names such as ATable and atable as different, and carries out case sensitive comparisons on
            stored procedures etc.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreExtendedProperties">
            <summary>Ignore extended properties</summary>
            <remarks>Ignores extended properties when comparing and synchronizing databases</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFullTextIndexing">
            <summary>Ignore full text indexing.</summary>
            <remarks>
            Ignores full text indexes, catalogs etc. when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.NoSQLPlumbing">
            <summary>Do not include plumbing for transactional synchronization scripts.</summary>
            <remarks>
            Removes both transactions and error handling from the synchronization scripts to produce more readable SQL
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.NoTransactions">
            <summary>Do not include error handling for transactional synchronization scripts.</summary>
            <remarks>
            Removes error handling from the synchronization scripts to produce more readable SQL
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.AssumeAlreadyInTransaction">
            <summary>Assume that a transaction is already open.</summary>
            <remarks>
            Prevents the output of any transaction-related SQL, but still does checking as if a transaction is in use.
            This is to allow the migrations code to do the relevant checks (e.g. for full text indexing),
            while handling the scope of the transaction itself.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.NoErrorHandling">
            <summary>Do not include error handling for synchronization scripts.</summary>
            <remarks>
            Removes error handling from the synchronization scripts to produce more readable SQL
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.UseCompatibilityLevel">
            <summary>Ignore database compatibility level</summary>
            <remarks>
            Makes SQL Compare use the server version for checking support of various features rather than the database compatibility level
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreCollations">
            <summary>Ignore collation order.</summary>
            <remarks>
            Ignores collation orders on character datatype columns when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreComments">
            <summary>Ignore comments.</summary>
            <remarks>
            Ignores comments when comparing views, stored procedures etc. Note that comments will still appear in the
            synchronization scripts
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIndexes">
            <summary>Ignore indexes.</summary>
            <remarks>
            Ignores indexes, statistics, unique constraints and primary keys when comparing and synchronizing databases
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnorePerformanceIndexes">
            <summary>
            Ignore all indexes except primary keys and unique constraints
            </summary>
            <remarks>
            Ignores everything that the <see cref="F:RedGate.SQLCompare.Engine.Options.IgnoreIndexes"/> option does, with the exception of primary keys
            and unique constraints.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreKeys">
            <summary>Ignore foreign keys.</summary>
            <remarks>Ignores foreign keys when comparing and synchronizing databases</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreChecks">
            <summary>Ignore check constraints.</summary>
            <remarks>Ignores check constraints when comparing and synchronizing databases</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreTriggers">
            <summary>Ignore DML triggers.</summary>
            <remarks>Ignores DML triggers when comparing and synchronizing databases</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IncludeDependencies">
            <summary>Include dependencies.</summary>
            <remarks>
            Includes dependent objects when comparing and synchronizing databases. For example, if a view depends on a
            table then the table will be synchronized when synchronizing the view
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreInsteadOfTriggers">
            <summary>Ignore INSTEAD OF triggers.</summary>
            <remarks>Ignores INSTEAD OF triggers when comparing and synchronizing databases</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreFileGroups">
            <summary>Ignore filegroups, partition schemes, and partition functions.</summary>
            <remarks>Ignores FILEGROUP clauses when comparing and synchronizing databases</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIdentitySeedAndIncrement">
            <summary>Ignore identity seed and increment values.</summary>
            <remarks>
            Ignores identity seed and increment values when comparing databases. Note that they will still appear in
            synchronization scripts
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWithNocheck">
            <summary>Ignores the WITH NOCHECK argument on foreign keys and check constraints.</summary>
            <remarks>
            When this option is selected, disabled constraints aren't ignored, so this option is useful if you want to
            find out if a constraint is disabled.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreNocheckAndWithNocheck">
            <summary>
            Ignores the NOCHECK and WITH NOCHECK arguments on foreign keys and check constraints.
            </summary>
            <remarks>
            When this option is selected, SQL Compare always applies constraints, even when NOCHECK and WITH NOCHECK are
            enabled. The 'Ignore WITH NOCHECK' option is automatically selected.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreConstraintNames">
            <summary>Ignore constraint names.</summary>
            <remarks>
            Ignores the names of foreign keys, indexes, primary keys, default, unique and check constraints when
            comparing.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreStatistics">
            <summary>Ignore statistics.</summary>
            <remarks>Ignores statistics when comparing and synchronizing</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DoNotOutputCommentHeader">
            <summary>Do not output comment header.</summary>
            <remarks>Do not include the comment in the header of the output script</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.AddWithEncryption">
            <summary>Add WITH ENCRYPTION option to stored procedures etc.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreSynonymDependencies">
            <summary>Ignore dependencies through synonyms.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.SeparateTriggers">
            <summary>Separate triggers from tables and views.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreOwners">
            <summary>Ignore owners when checking for equality.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreQueueEventNotifications">
            <summary>Ignore event notifications on queues.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.UseClrUdtToStringForClrMigration">
            <summary>
            If a CLR assembly must be changed, unbind the dependent types from tables using ToString, and then convert
            these table values back to CLR type.
            </summary>
            <remarks>Target database is post SQL Server 2005.</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ConsiderNextFilegroupInPartitionSchemes">
            <summary>
            If set, the next filegroups in partition schemes are compared with the filegroups that have a partition range
            associated with them.
            </summary>
            <remarks>Target database is post SQL Server 2005.</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreCertificatesAndCryptoKeys">
            <summary>
            Ignore public certificates, symmetric keys and asymmetric keys in SQL Server 2005 databases.
            </summary>
            <remarks>Target database is post SQL Server 2005.</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreTriggerOrder">
            <summary>Ignore trigger order.</summary>
            <remarks>Target server is either SQL Server 2000 or later.</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreUsers">
            <summary>Ignore users' permissions and role memberships.</summary>
            <remarks>
            This should really be called something like IgnoreUserBasedPermissions.
            The idea is that if people are doing The Right Thing (tm) and assigning all permissions to roles
            rather than directly to users, then those roles are part of the schema. However, the
            individual users who are members of those roles (and any permissions that happen to be assigned
            to users) aren't part of the schema and so aren't worthy of attention.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreUserProperties">
            <summary>Ignore user properties.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DisableAndReenableDdlTriggers">
            <summary>Disable and later re-enable DDL triggers. SQL Server 2005 only.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWithElementOrder">
            <summary>
            Ignore the order of <em>with elements</em> in non CLR stored procedures, functions, triggers, DDL triggers
            and views.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIndexLockProperties">
            <summary>Ignore the lock properties of indexes.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreReplicationTriggers">
            <summary>Ignore replication triggers.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreIdentityProperties">
            <summary>Ignores identity properties.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreNotForReplication">
            <summary>Ignores NOT FOR REPLICATION.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreDataCompression">
            <summary>Ignores data compression.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreDatabaseAndServerName">
            <summary>Ignores database and server names in synonyms.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreDatabaseName">
            <summary>Ignores database and server names in synonyms.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.AddDatabaseUseStatement">
            <summary>Adds a USE statement at the top of the sync sql</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreSchemaObjectAuthorization">
            <summary>Ignores owner authorization on schema objects.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DecryptPost2kEncryptedObjects">
            <summary>
            Decrypt 2005 and 2008 encrypted objects. Note that this can have a significant performance impact.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ForceSyncScriptGeneration">
            <summary>
            Generate a synchronization SQL script rather than folder sync actions when syncing to scripts.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreStatisticsNorecompute">
            <summary>Ignore the STATISTICS_NORECOMPUTE property on indexes.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreSquareBrackets">
            <summary>Ignore square brackets in object names.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ThrowOnFileParseFailed">
            <summary>
            Throw an exception when parsing a scripts fails during Register. If this option is not set then the file (and
            all objects in it) will be ignored.
            </summary>
            <remarks>This value used to mean see cref="IgnoreDatabaseName"/></remarks>
            Used by SQL Source Control
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.EnableDeployNow">
            <summary>Enable the "Deploy Now" button in Compare</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ObjectExistenceChecks">
            <summary>
            Adds if exists checks before objects are modified to make the generated scripts rerunnable
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.DropAndCreateInsteadOfAlter">
            <summary>Uses a drop/create on functions, stored procs and views in place of an alter</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreTSQLT">
            <summary>
            Ignores the tSQLt schema and its contents, the tSQLtCLR assembly, the SQLCop schema and its contents, and any
            schemas and their contents with the tSQLt.TestClass extended property set.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreSystemNamedConstraintNames">
            <summary>Ignore system named constraint names.</summary>
            <remarks>
            Ignores the names of system named (including Compare generated) foreign keys, indexes, primary keys, default,
            unique and check constraints when comparing.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.SsdtCompatibleOptions">
            <summary>Make script folder output output compatible with SSDT. </summary>
            <remarks>
            IgnorePermissions is temporarily here until we've implemented support for SSDT style permissions
            IgnoreQuotedIdentifiersAndAnsiNullSettings is here because SET statements should not be part of an SSDT
            script and are stored separately. IgnoreWithNocheck is here because adding constraints with nocheck doesn't
            make sense as part of a DDL script - which has no data. IgnoreSystemNamedConstraintNames is here because
            sometimes SSDT style scripted objects don't have names, so when Compare generates a name internally it should
            continue to be ignored. InlineTableObjects is here because SSDT objects can't reference table objects created
            in ALTER statements (though the alter statements can be parsed). InlineFulltextFields is here for similar
            reasons to the above. InferTypeForSqlVariant is here because the trick Compare normally uses to tell SQL
            Server the actual type isn't supported in SSDT. UseSetStatementsInScriptDatabaseInfo is here because Set
            Statements can't be in scripts in SSDT. Eventually we'll probably just read this information from the
            sqlproj. WIP WriteAssembliesAsDlls - SSDT writes dlls by default WIP ForbidDuplicateIndexSettingsOnTable -
            some SSDT versions don't compile with duplicate table storage settings
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreInternallyUsedMicrosoftExtendedProperties">
            <summary>
            Make scripting out of objects ignore the extended properties used internally by the SSMS designer
            </summary>
            <remarks>
            This option affects the scripting out of objects so that extended properties used internally by the SSMS
            designer (e.g. MS_DiagramPaneCount, MS_DiagramPane1, MS_DiagramPane2, MS_DiagramPane3, etc) are not included
            in the deployment script
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.InlineTableObjects">
            <summary>
            Script out definitions as part of the table's body where possible for primary keys, foreign keys etc. Only
            some Indexes can be inlined.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.WriteAssembliesAsDlls">
            <summary>
            WIP - CLR Assembly objects will be written in their true DLL form rather than our legacy sql script
            containing a binary blob in hex.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.InlineFulltextFields">
            <summary>Script out FullText indexes as a single create instead of lots of ALTERs.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ReadAsDataToolsPermissions">
            <summary>
            WIP - Read in permissions from a script folder as though they were from a Data Tools project.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.WriteAsDataToolsPermissions">
            <summary>
            WIP - Script out Permissions so they're correct as far as a Data Tools project is concerned.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.InferTypeForSqlVariant">
            <summary>
            Allow SQL server to infer the type of a sql variant rather than trying to help it.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.UseSetStatementsInScriptDatabaseInfo">
            <summary>Use RedGateDatabaseProperties.xml to store/recover set statements for objects.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.ForbidDuplicateTableStorageSettings">
            <summary>
            To match SSDT behaviour, forbids setting filegroup, filestream, partition scheme, and data compression
            options on both a table and a clustered index or non-inlined clustered constraint on that table, event though
            when options are specified on both, the options specified on the table are ignored by SQL Server.
            </summary>
            <remarks>
            See http://social.msdn.microsoft.com/Forums/en-US/ssdt/thread/c5c8802f-c6d1-4986-9768-c5f7340bda34/
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreWithEncryption">
            <summary>
            Ignore WITH ENCRYPTION statements on triggers, views, stored procedures and functions
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreNullability">
            <summary>Ignore nullability of columns.</summary>
            <remarks>Ignore whether or not a column can allow NULL values when comparing and deploying databases.</remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.IgnoreDataSyncSchema">
            <summary>
            Ignore all objects contained in a schema called DataSync. Data Sync is an Azure feature that
            temporarily populates a user's database with objects that the user may want to ignore during
            comparison.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.NoAutoColumnMapping">
            <summary>
            Do not automatically map 'sufficiently similar' columns in mapped tables. If set, only
            identical columns will be mapped.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Options.Default">
            <summary>
                <para>The default options for a comparison. These are:</para>
                <list type="bullet">
                    <item>IgnoreFileGroups</item>
                    <item>IgnoreFillFactor</item>
                    <item>IgnoreUserProperties</item>
                    <item>IgnoreWhiteSpace</item>
                    <item>IgnoreWithElementOrder</item>
                    <item>IncludeDependencies</item>
                    <item>IgnoreDatabaseNames</item>
                    <item>DecryptPost2kEncryptedObjects</item>
                </list>
                <para>NB: this means the default is NOT case-sensitive</para>
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Parameter">
            <summary>A SQL Server parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Scale">
            <summary>The scale of the parameter.</summary>
            <remarks>Valid for numeric and decimal data types.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Precision">
            <summary>The precision of a decimal or numeric data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.SqlType">
            <summary>The type of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.SqlTypeInfo">
            <summary>The type info of the parameter</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.DefinedSize">
            <summary>The length of the parameter.</summary>
            <remarks>Valid only for character and binary data.</remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Name">
            <summary>The name of the parameter</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Database">
            <summary>The database to which the field belongs.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.TypeName">
            <summary>The name of the type of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.FullyQualifiedTypeName">
            <summary>
            The name of the fully-qualified field type. For SQL Server 2005, this property contains the schema name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.TypeSchemaName">
            <summary>The name of the schema for the field's data type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.XmlDocument">
            <summary>True if the parameter is an XML document.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.XmlSchemaCollection">
            <summary>The XML schema collection for strongly-typed XML parameters.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.IsOutput">
            <summary>Indicates whether the parameter is an output parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.HasDefaultValue">
            <summary>True if there is a default value.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.DefaultValue">
            <summary>SQL representing the default value of the parameter.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameter.Collation">
            <summary>The collation of the parameter.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameter.Equals(RedGate.SQLCompare.Engine.Parameter,RedGate.SQLCompare.Engine.Options)">
            <returns><em>True</em> if the parameters are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the parameter with a specified parameter.</summary>
            <param name="targetParameter">The parameter to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameter.CompareWith(RedGate.SQLCompare.Engine.Parameter,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Return a list of differences between this and <param name="target" />, modified by <param name="options" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Parameters">
            <summary>A collection of parameters.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.SerializeItem(RedGate.SQLCompare.Engine.Parameter,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use only.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.GetKey(RedGate.SQLCompare.Engine.Parameter)">
            <summary>Generates a key for a parameter.</summary>
            <param name="value">The parameter for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Parameters.Item(System.Int32)">
            <summary>Returns the parameter at the specified position.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.Equals(RedGate.SQLCompare.Engine.Parameters,RedGate.SQLCompare.Engine.Options)">
            <returns>
            <em>True</em> if the parameter collections are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the parameters collection with a specified parameters collection.</summary>
            <param name="target">The collection of parameters to compare.</param>
            <param name="options">The comparison options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Parameters.CompareWith(RedGate.SQLCompare.Engine.Parameters,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Return a list of differences between this and <param name="target" />, modified by <param name="options" />
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.OptionsExtensions.WithOptionsFromFolder(RedGate.SQLCompare.Engine.Options,System.String)">
            <summary>
            Enables any options that are hinted at by information in the given folder, for example, SSDT compatibility is
            added if there's a sqlproj.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.TextEqualWithExtraParantheses(System.String,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This is based on TextEqual but sort of ignores parantheses. Anything can be surrounded by any number of
            matching parantheses, as long as this does not affect evaluation order. This method builds up the expression
            trees for the input defaults and constraints, and does a comparison at the tree level. Comments and
            whitespaces are ignored to support future extensions, but note the SS does not allow comments in
            defaults/constraints, neither does it allow arbitrary whitespaces. (SS also has a go at parantheses, and
            SqlServer2005 goes bererk with them anyway.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsAstNode(antlr.collections.AST,antlr.collections.AST,System.Boolean)">
            <summary>Compares two AST nodes, and tells us whether they are different or not.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsTree(antlr.collections.AST,antlr.collections.AST,System.Boolean)">
            <summary>Compares two ASTs, returns true if they are equal.</summary>
            <param name="leftAst"></param>
            <param name="rightAst"></param>
            <param name="caseSensitive">Indicates whether comparison is case sensitive.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.EqualsChildren(antlr.collections.AST,antlr.collections.AST,System.Boolean,System.Boolean)">
            <summary>iterates through all the siblings and compares them including their subtrees.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.GetAstOrDefaultForTextSubClause(System.String)">
            <summary>
            For a given string representing a SQL subclause, parse it and return
            the resulting Abstract Syntax Tree (AST). This can be traversed to get
            the tokens representing different parts of the subclause.
            </summary>
            <param name="text">SQL subclause.</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.TextEqualWithEncryption(System.String,System.String,System.Boolean,System.Boolean,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Return if the text of the two objects, taking WITH ENCRYPTION statements into account depending on the
            options given
            </summary>
            <summary>
            Return if the two bits of text are equal, taking WITH ENCRYPTION statements into account depending on the
            options given
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.TextEqualWithEncryption(RedGate.SQLCompare.Engine.IEncryptedTextObject,RedGate.SQLCompare.Engine.IEncryptedTextObject,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Return if the text of the two objects, taking WITH ENCRYPTION statements into account depending on the
            options given
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelper.TextEqual(System.String,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Compare two text with options, used as an interface to compare objects
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionFunction">
            <summary>A partition function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.ExtendedProperties">
            <summary>The extended properties defined for the partition function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.ObjectType">
            <summary>Returns ObjectType.PartitionFunction</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.OnRight">
            <summary>True if the boundary values belong to the interval on the right.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.Parameters">
            <summary>The parameters of the function.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionFunction.Values">
            <summary>The boundary values.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.GetWorkList(RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Not null if it is possible to alter the database to change the source (this) partition function to the target
            partition function using alter statements without a full rebuild of this partition function and all the
            dependants.
            </summary>
            <param name="target">The assembly to compare with</param>
            <param name="options">Comparison options</param>
            <returns>
            An arraylis that has the consolidated boundaries, and information about which partition function the boundary
            belongs to. The result is null if the partition function must rebuilt. E.g. for such a case is difference in
            left/right boundary handling.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the partition function with a specified partition function.</summary>
            <returns>
            <em>True</em> if the partition functions are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The partition function to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunction.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionFunctions">
            <summary>A collection of partition functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctions.SerializeItem(RedGate.SQLCompare.Engine.PartitionFunction,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionFunctions.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionScheme">
            <summary>A partition scheme.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.Function">
            <summary>The partition function for the partition scheme.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.FileGroups">
            <summary>The filegroups that are used for partitioning.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.PartitionScheme.ExtendedProperties">
            <summary>The extended properties defined for the partition scheme.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionScheme.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the partition scheme with a specified partition scheme.</summary>
            <returns>
            <em>True</em> if the partition schemes are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The partition scheme to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionScheme.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PartitionSchemes">
            <summary>A collection of partition schemes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemes.SerializeItem(RedGate.SQLCompare.Engine.PartitionScheme,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PartitionSchemes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Permission">
            <summary>A permission.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.Fields">
            <summary>The fields to which the permission applies.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.StatementType">
            <summary>The type of permission statement (e.g Grant, Deny, etc)</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.SecurableType">
            <summary>The class of permission (for example, object, XML schema collection).</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.PermissionLevel">
            <summary>The permission level to which the permission applies (e.g. Select, Alter, etc)</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Permission.Principal">
            <summary>The user or role to which the permission applies.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permission.GetPermissionClassPrefix(RedGate.SQLCompare.Engine.ObjectType)">
            <summary>
            Note that this does not work with roles. There are two kinds of roles, and application roles must further be
            prefixed with "APPLICATION ".
            </summary>
            <returns>The prefix to identify the object type in a permission grant statement.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permission.GetRequiredPermissionAlterAction(RedGate.SQLCompare.Engine.PermissionStatementType,RedGate.SQLCompare.Engine.PermissionStatementType)">
            <summary>
            Given two permission settings in two databases this method returns the action that is needed to synchronize.
            E.g. if the two settings are grant and deny, then the action would be grant.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permission.Equals(System.Object)">
            <summary>
            Test equality on permission
            Currently it only tests for principal property without testing securable property, this might be improved in the future
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permission.GetHashCode">
            <summary>
            Hash code for overriding equality
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Permissions">
            <summary>A collection of permissions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permissions.Add(RedGate.SQLCompare.Engine.Permission)">
            <summary>
            Adds the supplied permissions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permissions.GetRolePermissionCount">
            <summary>Returns the number of non user permissions (role permissions).</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permissions.ScriptObjectPermissions(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Returns a single <see cref="T:RedGate.SQLCompare.Engine.Region"/> for permissions if permissions
            should be scripted out
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permissions.Remove(RedGate.SQLCompare.Engine.Permission)">
            <summary>
            Removes the given permission
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Permissions.Clear">
            <summary>
            Removes all permissions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PermissionsComparison.WorkRequired(System.String,RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.PermissionLevel)">
            <summary>
            Return the permission type required to synchronize two databases
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PermissionsCollection.Add(RedGate.SQLCompare.Engine.Permissions)">
            <summary>
            Adds the permissions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.PermissionsCollection.Remove(RedGate.SQLCompare.Engine.Permissions)">
            <summary>
             Removes the given permissions
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ProgressTracker">
            <summary>
            Turns 1/n counts into percentages for use with ICancellable
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ProgressTracker.#ctor">
            <summary>
            Constructor without a subscriber (just used for percentage calculations?)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ProgressTracker.#ctor(RedGate.Legacy.ProgressTasks.ICancellable,System.Int64)">
            <summary>
            Constructor with a cancellable subscriber to send updates to
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.LowerLimit">
            <summary>Sets and gets the lower limit of the range. (The default value is 0)</summary>
            <exception cref="T:System.ArgumentException">If the upper and lower limits are set to the same value</exception>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.UpperLimit">
            <summary>Sets and gets the upper limit of the range. (The default value is 100)</summary>
            <exception cref="T:System.ArgumentException">If the upper and lower limits are set to the same value</exception>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.CurrentValue">
            <summary>Gets and sets the current value within the specified range</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.CurrentPercentage">
            <summary>Gets the current percentage of the CurrentValue over the specified range</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.HasPercentageChanged">
            <summary>
            Returns back if the percentage has changed since the last time HasPercentageChanged been called.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ProgressTracker.Message">
            <summary>Access to the status message.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ProgressTracker.Increment">
            <summary>Increments the CurrentValue by one</summary>
            <returns>If the CurrentPercentage has changed</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ProgressTracker.Increment(System.Int32)">
            <summary>Increments the CurrentValue by the value specified</summary>
            <param name="value">The ammount to increment CurrentValue by.</param>
            <returns>If the CurrentPercentage has changed</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Queue">
            <summary>A queue.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ObjectType">
            <summary>Returns ObjectType.Queue</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.Name">
            <summary>
            The name of the object.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.IsSystemObject">
            <summary>Indicates whether the object in question is a system object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.MaxReaders">
            <summary>The maximum number of readers.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ExecuteAsType">
            <summary>The EXECUTE AS clause used for the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the queue. This is a SQL Server 2005
            feature only.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ActivationProcedure">
            <summary>The name of the activation stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ActivationEnabled">
            <summary>True if the activation is enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.ReceiveEnabled">
            <summary>True if the queue is <em>receive enabled</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.EnqueueEnabled">
            <summary>True if enqueue is enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.RetentionEnabled">
            <summary>True if retention is enabled.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.EventNotifications">
            <summary>The dependent event notifications.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.Services">
            <summary>The dependent services.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Queue.FileGroup">
            <summary>The filegroup for the queue.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queue.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the queue with a specified queue.</summary>
            <returns><em>True</em> if the queues are identical; otherwise, <em>false</em>.</returns>
            <param name="targetObject">The queue to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queue.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Queues">
            <summary>A collection of queues.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queues.SerializeItem(RedGate.SQLCompare.Engine.Queue,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Queues.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver">
            <summary>Resolver class for the AST parser.</summary>
            <excludetoc />
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.#ctor(RedGate.SQLCompare.Engine.Database)">
            <summary></summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.Database">
            <summary>Access to the database object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ColumnsInObject(RedGate.SQLCompare.ASTParser.Resolvers.ISqlObject)">
            <summary></summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ObjectForName(RedGate.SQLCompare.ASTParser.Syntax.Element,System.String,System.String,System.String,System.String)">
            <summary></summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ResolveSchemaScopedObjectFromCategory``1(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.Engine.KeyedCollection{``0},System.String,System.String)">
            <summary>
            Tries to resolve a schema object based on its name and owner. If the owner is not specified, it first tries
            to look at the owner hint. If this is not successful, it checks dbo as owner. If this does not help either,
            then we return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ResolveTrigger(System.String,System.String,System.String)">
            <summary>
            Tries to resolve a schema object based on its name and owner. If the owner is not specified, it first tries
            to look at the owner hint. If this is not successful, it checks dbo as owner. If this does not help either,
            then we return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.FindTriggerInCollection(System.String,System.String,RedGate.SQLCompare.Engine.Triggers)">
            <summary>Finds a trigger in the Triggers collection.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseFromScriptObjectResolver.ResolveDBScopedObjectFromCategory``1(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,System.String,RedGate.SQLCompare.Engine.SerializableCollection{``0})">
            <summary>
            Tries to resolve a schema object based on its name and owner. If the owner is not specified, it first tries
            to look at the owner hint. If this is not successful, it checks dbo as owner. If this does not help either,
            then we return null.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ScriptSource">
            <summary>
            Information about the source of a database object. This information includes details of the creation script
            file, as well as the starting and ending character position for the creation statement.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptSource.Empty">
            <summary>An <i>new</i> empty script source. (SC-4595, this really can't be a singleton)</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptSource.#ctor(System.IO.FileInfo,System.Int32,System.Int32)">
            <summary>Constructs a script source.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptSource.UpperPosition">
            <summary>The last character position of the SQL statement.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptSource.LowerPosition">
            <summary>The first character position of the SQL statement.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptSource.FileInfo">
            <summary>Information about the file that contains the SQL statement.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptSource.PermissionsSources">
            <summary>A collection of script sources for the permission statements.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptSource.IsNullOrEmpty(RedGate.SQLCompare.Engine.ScriptSource)">
            <summary>True if the script source is null or uninitialized.</summary>
            <returns>True if the script source is null or uninitialized.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptSource.IsCoveredBy(RedGate.SQLCompare.Engine.ScriptSource)">
            <summary>
            True if the script source is inside the script source of the parent (parameter).
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptSource.IsCovering(RedGate.SQLCompare.Engine.ScriptSource)">
            <summary>True if the script source in the parameter is inside this one.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptSource.IsAfter(RedGate.SQLCompare.Engine.ScriptSource,RedGate.SQLCompare.Engine.ScriptSource)">
            <summary>
            Negative if the first script source is after the second one. Positive if the second is after the first one.
            Zero if unknown.
            </summary>
            <returns>
            0: unknown (null or different file) 1: the position of x is after the position of y.
            </returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptSource.SetQuotedIdentifiers">
            <summary>The script source of the relevant "SET QUOTED IDENTIFIERS" statement.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptSource.SetAnsiNulls">
            <summary>The script source of the relevant "SET ANSII NULLS" statement.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Refactorer">
            <summary>Summary description for Refactorer.</summary>
            <exclude />
            <excludetoc />
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Refactorer.m_DatabaseTarget">
            <summary>This database is the one that is to be modified (so in this case the original)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Refactorer.m_Differences">
            <summary>The differences between the original and the refactored databases.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.#ctor(RedGate.SQLCompare.Engine.Database)">
            <summary>
            Constructs a refactorer class. This is a single use class that allows to perform a single refactoring.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.Reset">
            <summary>Resets the refactoring to a state that it was in just after its construction.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.CalculateDifferences(RedGate.SQLCompare.Engine.Options)">
            <summary>
            Produces the list of differences between the original and the refactored databases.
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.TargetDatabase">
            <summary>This database is the one that is to be modified (so in this case the original)</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.MasterDatabase">
            <summary>
            This is the database that is passed in, copied, and then modified (remastered).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.ExtraWarnings">
            <summary>Warnings during the refactoring.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.RefactoringOptions">
            <summary>Internal use only.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Refactorer.DefaultRefactoringOptions">
            <summary>Internal use only.</summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameParameterOrColumn(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary></summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameSchemaObject(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary></summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameStoredProcedure(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>Renames a stored procedure and all its dependants.</summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameView(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>Renames a view and all its dependants.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameTable(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>Renames a table and all its dependants.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameFunction(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>Renames a function and all its dependants.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameApplyRenameToAllDependents(System.Int32,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.Refactor.Refactoring,RedGate.SQLCompare.ASTParser.Resolvers.IResolver,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            It iterates through all the dependent objects and applies the refactroing to all the textual objects.
            </summary>
            <param name="parentID">The identifier of the parent object that was originally modified.</param>
            <param name="objectType"></param>
            <param name="refactoringToApply"></param>
            <param name="resolver"></param>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RefactorAndFixDefinition(RedGate.SQLCompare.ASTParser.Resolvers.SqlObjectType,RedGate.SQLCompare.Engine.IEncryptedTextObject,RedGate.SQLCompare.Rewriter.Refactor.Refactoring,RedGate.SQLCompare.ASTParser.Resolvers.IResolver,System.String,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            Renames a dbobject in the provided definition, and fixes the definition name (in case it has been renamed
            using sp_rename before).
            </summary>
            <param name="objType">The object type, e.g. stored procedure, view, etc.</param>
            <param name="dbObj">The databse object itself</param>
            <param name="refactoringToApply"></param>
            <param name="resolver"></param>
            <param name="spDefinition"></param>
            <returns>The rewritten object definiton.</returns>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTable(RedGate.SQLCompare.Engine.Table,System.String[],System.String[],System.String,System.String,System.Boolean,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>Splits a database table into two tables.</summary>
            <param name="tableToSplit">The database table to be split.</param>
            <param name="columnsToKeep">The columns to be left in the first, primary table.</param>
            <param name="columnsToSecondary">The columns that should be in the secondary table.</param>
            <param name="secondaryTableOwner">The owner (user or schema) of the secondary table.</param>
            <param name="secondaryTableName">The name of the secondary table.</param>
            <param name="mToOne">
            Indicates whether the relation is an mToOne. This includes the 1:1 relationships as well!
            </param>
            <returns></returns>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableTriggers(RedGate.SQLCompare.Engine.Table,System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},RedGate.SQLCompare.Engine.Messages)">
            <summary>
            Handle the triggers in the case of a table split. Not that this also handles the extended properties on
            triggers. There is no need to drop a trigger if all the original table columns remain. If a trigger also does
            not look at the inserted and deleted virtual tables chances are good that it is harmless, so we keep it.
            </summary>
            <param name="primaryTable"></param>
            <param name="fieldsToRemove"></param>
            <param name="warnings">Extra warnings.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSplitPermissions(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>Handles the permissions of table splits</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSplitExtendedProperties(RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>Handles the extended properties of table splits</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSecondaryForignKeys(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>Handles the foreign keys on the secondary table</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSplitIndices(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            This method goes through the indexes of the primary table, and decides whether and index should be kept,
            moved to the secondary table, or dropped altogether.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableSplitCheckConstraints(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            This method goes through the table constraints of the primary table, and decides whether and constraint
            should be kept, moved to the secondary table, or dropped altogether.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableGetPostCreateScript(System.String[],RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Builds the script that populates the secondary table in the case of a table split.
            </summary>
            <param name="columnsToSecondary">The columns that we need to preserve.</param>
            <param name="primaryTable">The primary table that needs to be split.</param>
            <param name="secondaryTable">The secondary, target table.</param>
            <returns>The post create script that populates the secondary table.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableAddForeignKey(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.IField},RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table)">
            <summary>
            Adds a foreign key to the primary table. This foreign key will reference the primary key of the secondary
            table.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableAddDefaultPrimaryKey(System.Collections.Generic.IDictionary{System.String,RedGate.SQLCompare.Engine.IField},RedGate.SQLCompare.Engine.Table)">
            <summary>Adds a default primary key to the specified table.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableApplyRenameToAllDependents(System.Int32,RedGate.SQLCompare.Rewriter.Refactor.SplitTableRefactoring,RedGate.SQLCompare.ASTParser.Resolvers.IResolver,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>
            It iterates through all the dependent objects and applies the refactroing to all the textual objects.
            </summary>
            <param name="parentID">The identifier of the parent object that was originally renamed.</param>
            <param name="refactoringSplitTableForScripts"></param>
            <param name="resolver"></param>
            <param name="rewriterOptions"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameParameter(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>Renames a stored procedure and all its dependants.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.RenameColumn(System.String,System.String,System.String,System.String,RedGate.SQLCompare.Engine.ObjectType,RedGate.SQLCompare.Rewriter.KeyValue)">
            <summary>Renames a column in a table and all its dependants.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.SplitTableGetPreliminaryWarnings(System.Collections.Generic.IList{RedGate.SQLCompare.Engine.IField},System.Collections.Generic.IList{RedGate.SQLCompare.Engine.IField},System.Collections.Generic.IList{RedGate.SQLCompare.Engine.IField},RedGate.SQLCompare.Engine.Table)">
            <summary>
            Builds up the preliminary warnings during the column selection process in table split refactorings.
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.Dispose(System.Boolean)">
            <summary>Dispose method that handles the disposal of the managed resources as well.</summary>
            <param name="disposing">To differentiate the two states (disposing and finalizing).</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Refactorer.ClrObjectInParameterRenameException">
            <summary>
            An exception that is thrown when one attempts to rename a CLR stored procedure or a CLR function parameter.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.ClrObjectInParameterRenameException.#ctor">
            <summary>Constructs an CLRObjectInParameterRenameException exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.ClrObjectInParameterRenameException.#ctor(System.String)">
            <summary>Constructs an CLRObjectInParameterRenameException exception.</summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Refactorer.ClrObjectInParameterRenameException.#ctor(System.String,System.Exception)">
            <summary>Constructs an CLRObjectInParameterRenameException exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Region">
            <summary>A region of text.</summary>
            <remarks>
            The script for a SQL object is returned as a collection of regions. For example, the SQL script for a table
            might contain regions for columns, constraints, indexes, foreign keys, and permissions.
            <para>Use <see cref="M:RedGate.SQLCompare.Engine.Region.ToString" /> to view the entire SQL script.</para>
            </remarks>
            <example>
            Viewing the SQL script to create a table.
            <code lang="CS">
            Database db=new Database();
             
            db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            Work work=new Work();
             
            //get the script for an object
            Regions regions=work.ScriptObject(db.Tables[0], Options.Default);
             
            Console.WriteLine("Entire SQL script:\n{0}", regions.ToString());
             
            Console.WriteLine("By region:\n");
             
            foreach (Region region in regions)
            {
                Console.WriteLine("***{0}", region.Name);
                Console.WriteLine(region.SQL);
            }
             
            db.Dispose();
                </code>
            <code lang="VB">
            Dim db As New Database()
             
            db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            Dim work As New Work()
             
            'get the script for an object
             
            Dim regions As Regions = work.ScriptObject(db.Tables(0), Options.Default)
             
            Console.WriteLine("Entire SQL script:")
            Console.WriteLine("{0}", regions.ToString())
             
            Dim region As Region
             
            For Each region In regions
                Console.WriteLine("***{0}", region.Name)
                Console.WriteLine(region.SQL)
            Next
             
            'dispose
            db.Dispose()
                </code>
            </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Region.#ctor(System.String,System.String)">
            <summary>Construct a region containing a single sub-region.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Region.ToString">
            <summary>The SQL code that a region contains.</summary>
            <returns>SQL code.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Region.SQL">
            <summary>The SQL code that a region contains.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Region.Name">
            <summary>The name of the region.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Region.SubRegions">
            <summary>The sub-regions contained within this region</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Region.AddGOStatement">
            <summary>Add a GO to the last region written.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Regions">
            <summary>A collection of regions.</summary>
            <remarks>
            Use the <see cref="M:RedGate.SQLCompare.Engine.Regions.ToString">ToString()</see> method to return the text that the regions represent.
            <para>See <see cref="T:RedGate.SQLCompare.Engine.Region" /> for more information and code samples.</para>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Regions.Add(RedGate.SQLCompare.Engine.Region)">
            <summary>
            Adds the region
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Regions.AddRange(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.Region})">
            <summary>
             Adds all the supplied regions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Regions.ToString">
            <summary>The SQL script that a collection of regions contains.</summary>
            <returns>SQL script.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Regions.WriteToStream(System.IO.TextWriter)">
            <summary>Writes the region to the specified stream.</summary>
            <param name="sw">The stream where the regions are to be written to.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Role">
            <summary>A role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.ObjectType">
            <summary>Returns ObjectType.Role</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.AppRole">
            <summary>True if the role is an application role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.FullyQualifiedName">
            <summary>
            The fully-qualified name of the role.  DANGER WILL ROBINSON!!  This is not escaped.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.Members">
            <summary>The users in the role.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.DefaultSchema">
            <summary>
            The default schema for the application role. If the role is not an application role the value for the default
            schema is null.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Role.DatabaseLevelPermissions">
            <summary>Access to the role's database-level permissions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Role.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the roles are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the role with a specified role.</summary>
            <param name="target">The role to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Role.GetSqlForRoleMembers(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>In a SQL Script ensure this is called after all the roles are created</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Role.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Roles">
            <summary>A collection of roles.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Roles.SerializeItem(RedGate.SQLCompare.Engine.Role,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Roles.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Route">
            <summary>A route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.RemoteServiceName">
            <summary>The name of the remote service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.BrokerInstance">
            <summary>The broker instance.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Address">
            <summary>The address of the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.MirrorAddress">
            <summary>The mirror address of the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Lifetime">
            <summary>The lifetime of the route.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.HasLifeTime">
            <summary>True if the route has a lifetime set.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.Name">
            <summary>
            The name of the object.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.ObjectType">
            <summary>Returns ObjectType.Assembly</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Route.IsSystemObject">
            <summary>Indicates whether the route is a system object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Route.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the routes are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the route with a specified route.</summary>
            <param name="targetObject">The route to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Route.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Routes">
            <summary>A collection of routes.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Routes.SerializeItem(RedGate.SQLCompare.Engine.Route,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Routes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Rule">
            <summary>A rule.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.ObjectType">
            <summary>Returns ObjectType.Rule</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.SysobjectID">
            <summary>The sysobject identier of the object.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Rule.Text">
            <summary>The text of the rule.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rule.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the rule with a specified rule.</summary>
            <returns><em>True</em> if the rules are identical; otherwise, <em>false</em>.</returns>
            <param name="target">The rule to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rule.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Rules">
            <summary>A collection of rules.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rules.SerializeItem(RedGate.SQLCompare.Engine.Rule,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Rules.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Schema">
            <summary>A schema.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.ObjectType">
            <summary>Returns ObjectType.User</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.FullyQualifiedName">
            <summary>The name of the schema.  DANGER WILL ROBINSON!!  This is not escaped.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.Name">
            <summary>
            The name of the object.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Schema.IsSystemObject">
            <summary>Indicates whether the schema is a system object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schema.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the schemas are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the schema with a specified schema.</summary>
            <param name="target">The schema to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schema.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaBindings.GetKey(RedGate.SQLCompare.Engine.SchemaBinding)">
            <summary>Generates a key for a schema binding.</summary>
            <param name="value">The schema binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObject">
            <summary>A schema object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.Name">
            <summary>
            The name of the object.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.Owner">
            <summary>The owner or schema of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.FullyQualifiedName">
            <summary>The fully-qualified name of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.ID">
            <summary>The identifier of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObject.ExtendedProperties">
            <summary>The extended properties on the schema object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObject.ToString">
            <summary>Returns the fully-qualified name of the object prefixed with the object type.</summary>
            <returns>The fully-qualified name of the object prefixed with the object type.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization">
            <summary>
            Represents a schema object that can also have an ALTER AUTHORIZATION applied to it to change the user as well
            (so it can have both user &amp; schema).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization.Authorization">
            <summary>
            Returns the authorization owner of the object (as opposed to the schema; see
            <see cref="P:RedGate.SQLCompare.Engine.SchemaObject.Owner" />).
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization.ScriptSourceAuthorization">
            <summary>
            The location of the creation script for the ALTER AUTHORIZATION statement for this object if the database
            source is set to scripts folder.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization.GetAlterAuthRegion(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Returns a single <see cref="T:RedGate.SQLCompare.Engine.Region"/> for ALTER AUTHORIZATION if it
            needs to be scripted out
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SchemaObjectWithAuthorization.AuthType">
            <summary>
            Returns the object type that should be used for ALTER AUTHORIZATION statements on the object.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Schemas">
            <summary>A collection of schemas.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schemas.SerializeItem(RedGate.SQLCompare.Engine.Schema,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Schemas.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ScriptableDatabaseObject">
            <summary>
            Represents a scriptable database object. Also has default implementations of some of the IDatabaseObject
            methods &amp; properties
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName">
            <summary>The qualified name of the object.  Do you mean <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Name" />?</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Name">
            <summary>
            The name of the object.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.FullyQualifiedName">
            <summary>
            The fully-qualified name of the object.  DANGER WILL ROBINSON!!  Sometimes this will be escaped, and
            sometimes it won't be.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Owner">
            <summary>The owner or schema of the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Database">
            <summary>The database to which the object belongs.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.c_UnescapedUnknownIdentifierPlaceholder">
            <summary>
            Sometimes we are unable to get information from the system tables due to privelege issues, we print this
            string as a placeholder.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.c_EscapedUnknownIdentifierPlaceholder">
            <summary>
            Sometimes we are unable to get information from the system tables due to privelege issues, we print this
            string as a placeholder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.ScriptSource">
            <summary>
            The script source for this object, if the database source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.ObjectType">
            <summary>The type of the object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares two database objects.</summary>
            <returns>
            <em>True</em> if the database objects are identical; otherwise
            <em>false.</em>
            </returns>
            <param name="target">The object to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>
            temporary overload for <see cref="M:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Options that may influence the scripting.</param>
            <param name="targetFeatures"></param>
            <returns>Regions that contain the script.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SerializableCollection`1">
            <summary>A collection that can be serialized to disk.</summary>
            <remarks>For internal use by SQL Compare.</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection`1.SerializeItem(`0,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection`1.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection`1.WriteCollectionToSnapshot(RedGate.SQLCompare.Engine.NullableBinaryWriter,System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Int32,System.Action{RedGate.SQLCompare.Engine.NullableBinaryWriter,`0})">
            <summary>
            Write a list of items to a snapshot. See also <seealso cref="M:RedGate.SQLCompare.Engine.SerializableCollection`1.ReadCollectionFromSnapshot``1(RedGate.SQLCompare.Engine.NullableBinaryReader,System.Func{RedGate.SQLCompare.Engine.NullableBinaryReader,`0},System.Func{System.Boolean,System.Int32,``0},System.Action{``0,`0})"/>
            </summary>
            <remarks>
            The only thing this method knows is the **format** of a list of things
            in a snapshot file
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SerializableCollection`1.ReadCollectionFromSnapshot``1(RedGate.SQLCompare.Engine.NullableBinaryReader,System.Func{RedGate.SQLCompare.Engine.NullableBinaryReader,`0},System.Func{System.Boolean,System.Int32,``0},System.Action{``0,`0})">
            <summary>
            Read a list of items from a snapshot
            </summary>
            <remarks>
            The only thing this method knows is the **format** of a list of things
            in a snapshot file - the actual details of the resulting list or the items
            themselves is abstracted away
            </remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Service">
            <summary>A service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Name">
            <summary>
            The name of the object.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.ObjectType">
            <summary>Returns ObjectType.Service</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Queue">
            <summary>The queue that the service is on.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.Contracts">
            <summary>The contracts that the service uses.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.EventNotifications">
            <summary>The event notifications that depend on the service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Service.IsSystemObject">
            <summary>Indicates whether the object is a system object.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Service.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the services are identical; otherwise, <em>false</em>.</returns>
            <summary>Compares the service with a specified service.</summary>
            <param name="targetObject">The service to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Service.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ServiceBinding">
            <summary>A service binding.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.ObjectType">
            <summary>Returns ObjectType.Service</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.RemoteService">
            <summary>The remote service.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.UserName">
            <summary>The user name.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ServiceBinding.Anonymous">
            <summary>True if anonymous authentication is to be used.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBinding.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the service binding with a specified service binding.</summary>
            <returns>
            <em>True</em> if the service bindings are identical; otherwise,
            <em>false</em>.
            </returns>
            <param name="targetObject">The service to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBinding.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ServiceBindings">
            <summary>A collection of service bindings.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBindings.SerializeItem(RedGate.SQLCompare.Engine.ServiceBinding,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ServiceBindings.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Services">
            <summary>A collection of services.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Services.SerializeItem(RedGate.SQLCompare.Engine.Service,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Services.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexInformation">
            <summary>Information that augments spatial indexes.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexInformation.TesselationSchemes">
            <summary>Used to specify the tesselation scheme for the spatial index.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.TesselationSchemes.GeometryGrid">
            <summary>GEOMETRY_GRID</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.TesselationSchemes.GeographyGrid">
            <summary>GEOGRAPHY_GRID</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexInformation.SpatialIndexTypes">
            <summary>
            The type of the spatial index. In SQL Server 2008 this can be either geometry or geography.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.SpatialIndexTypes.Geometry">
            <summary>Geometry</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.SpatialIndexTypes.Geography">
            <summary>Geography</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SpatialIndexInformation.GridDensities">
            <summary>The grid densities of spatial indexes</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.GridDensities.LOW">
            <summary>LOW (16)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.GridDensities.MEDIUM">
            <summary>MEDIUM (64)</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SpatialIndexInformation.GridDensities.HIGH">
            <summary>HIGH (256)</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.BoundingBoxXMin">
            <summary>The x-coordinate of the lower-left corner of the bounding box.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.BoundingBoxXMax">
            <summary>The x-coordinate of the upper-right corner of the bounding box.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.BoundingBoxYMin">
            <summary>The y-coordinate of the lower-left corner of the bounding box.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.BoundingBoxYMax">
            <summary>The y-coordinate of the upper-right corner of the bounding box.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.Level1Grid">
            <summary>The first tesselation level's grid density.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.Level2Grid">
            <summary>The second tesselation level's grid density.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.Level3Grid">
            <summary>The third tesselation level's grid density.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.Level4Grid">
            <summary>The fourth tesselation level's grid density.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.CellsPerObject">
            <summary>The number of tesselation cells per objects.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.SpatialIndexType">
            <summary>
            The type of the spatial index. In SQL Server 2008 it can be either geometry or geography.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SpatialIndexInformation.TesselationScheme">
            <summary>The tesselation scheme of the spatial index.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlCompareException">
            <summary>This exception is used as the general exception for SQL Compare.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor">
            <summary>Constructs a SqlCompareException exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.String)">
            <summary>Constructs a SqlCompareException exception.</summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.String,System.Exception)">
            <summary>Constructs a SqlCompareException exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructs an SqlCompareException exception.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ParserHelperToken">
            <summary>
            A token output from <see cref="M:RedGate.SQLCompare.Engine.ParserHelperTokeniser.Tokenise(System.String)" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ParserHelperTokeniser">
            <summary>
            This class is used to tokenise and analyse the equality of input string word by word
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ParserHelperTokeniser.Tokenise(System.String)">
            <summary>
            Tokenise an input string, output a list of tokens marked with their types (keyword, normal, string, comment, whitespace)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ParserHelperTokenType">
            <summary>
            Token type for <see cref="T:RedGate.SQLCompare.Engine.ParserHelperToken" />
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SimpleSqlStringBuilder">
            <summary>
            Use this when building up a sql string with multiple batches on a granularity smaller than an <see cref="T:RedGate.SQLCompare.Engine.IDeploymentScriptStatement"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SimpleSqlStringBuilder.AddBatch(System.String)">
            <summary>
            Adds <paramref name="batch"/> followed by a batch marker
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlScriptAdjuster.RemoveWithAppendFromTrigger(System.String)">
            <summary>
            SQL Server 2012 removed support for the obsolete WITH APPEND clause in a CREATE TRIGGER statement. Here we
            remove the WITH APPEND portion of a CREATE TRIGGER statement, if it is present.
            </summary>
            <param name="sql">The CREATE TRIGGER statement, possibly containing a WITH APPEND clause.</param>
            <returns>The create trigger statement with the WITH APPEND clause removed.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlScriptAdjuster.GetTriggerFromBatch(System.String)">
            <summary>
            Given some SQL, this method tries to parse a statement batch from it and then returns
            the first trigger statement it finds. If it doesn't find one, it returns null.
            </summary>
            <param name="sql">A statement batch, possibly containing a trigger statement</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlScriptsHelper.SQLString(System.String)">
            <summary>
            Escapes and puts N'' around a string so that it can be used as a string literal in T-SQL.
            </summary>
            <param name="value">The string to be escaped for T-SQL.</param>
            <returns>Escaped string ready for use in T-SQL.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlSetOptions">
            <summary>SQL set options.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.#ctor">
            <summary>
            Constructs a SQLSetOptions class. This stores information about connection settings, such as ANSI warnings,
            ANSI NULLs, quoted identifiers, etc.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.#ctor(System.Boolean)">
            <summary>
            Constructs a SQLSetOptions class. This stores information about connection settings, such as ANSI warnings,
            ANSI NULLs, quoted identifiers, etc.
            </summary>
            <param name="forceSetOptions">Sets the force attribut to include both positive and negative set options.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.GetOptionsSetTo(System.Boolean)">
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlSetOptions.CreateDefault">
            <remarks>Does not set a default for XACT_ABORT</remarks>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StoredProcedure">
            <summary>A stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ObjectType">
            <summary>Returns ObjectType.StoredProcedure</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Parameters">
            <summary>The parameters of the stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.SysobjectID">
            <summary>The sysobject identifier for the stored procedure.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Text">
            <summary>The text of the stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Encrypted">
            <summary>True if the stored procedure definition is encrypted.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.LastModified">
            <summary>
            The last time this stored procedure was modified.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.QuotedIdentifierOn">
            <summary>
            True if the stored procedure was created with <em>quoted identifiers on</em>.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AnsiNullsOn">
            <summary>True if the stored procedure was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.NumberedProcScriptSources">
            <summary>The script sources associated with additional numbered stored procedures.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.CLRObject">
            <summary>True if the stored procedure is a CLR stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.Assembly">
            <summary>The CLR assembly for the stored procedure, if it is a CLR stored procedure.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ExecuteAsType">
            <summary>The EXECUTE AS clause used for the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the stored procedure. This is a SQL Server
            2005 and 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AssemblyClass">
            <summary>
            The CLR assembly class name for the stored procedure, if it is a CLR stored procedure.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AssemblyMethod">
            <summary>
            The CLR assembly method name for the stored procedure, if it is a CLR stored procedure.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedure.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns>
            <em>True</em> if the stored procedures are identical; otherwise,
            <em>false</em>.
            </returns>
            <summary>Compares the stored procedure with a specified stored procedure.</summary>
            <param name="target">The stored procedure to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedure.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.IsSystemObject">
            <summary>For internal use only!!!</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.StoredProcedure.AssemblyFromDeserialization">
            <summary>This is used for reading from scripts</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StoredProcedures">
            <summary>A collection of stored procedures.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedures.SerializeItem(RedGate.SQLCompare.Engine.StoredProcedure,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StoredProcedures.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.FullTextStopwords">
            <summary>A collection of stopwords associated with a full text stoplist.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStopwords.Languages">
            <summary>The LCIDs of the languages in this collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStopwords.TotalStopwords">
            <summary>The total number of stopwords in this collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.FullTextStopwords.Item(System.Int32)">
            <summary>A collection of stopwords associated with the specified LCID.</summary>
            <param name="language">The LCID of the stopwords to return.</param>
            <returns>A collection of stopwords for the specified LCID.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.FullTextStopwords.GetEnumerator">
            <summary>
            Returns an enumerator of the languages in this stoplist and the stopwords associated with each language.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DatabaseObjectTextHelper.StoreObjectText(RedGate.SQLCompare.Engine.DBPopulationOptions,System.Int32,System.UInt16,System.Byte[],System.Text.StringBuilder,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Processes and stores the object text.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlType">
            <summary>
            A SQL Server data type.
            </summary>
            <remarks>
            This extends <see cref="T:System.SByte"/>, as that is how <see cref="T:RedGate.SQLCompare.Engine.ExtendedPropertyValue"/>
            serializes/deserializes it. If we run out of space, the serialization/deserialization
            will need to be changed and the serialization version number bumped.
            </remarks>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Other">
            <summary>Unknown or UDT</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.ClrType">
            <summary>CLR type</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Table">
            <summary>Table type</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Empty">
            <summary>Not used</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Binary">
            <summary>binary</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Varbinary">
            <summary>varbinary</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Char">
            <summary>char</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Varchar">
            <summary>varchar</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NChar">
            <summary>nchar</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NVarchar">
            <summary>nvarchar</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.DateTime">
            <summary>datetime</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.SmallDatetime">
            <summary>smalldatetime</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Decimal">
            <summary>decimal</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Numeric">
            <summary>numeric</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Float">
            <summary>float</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Real">
            <summary>real</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer64">
            <summary>integer64</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer32">
            <summary>integer32</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Integer16">
            <summary>integer16</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Byte">
            <summary>byte</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Money">
            <summary>money</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.SmallMoney">
            <summary>smallmoney</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Boolean">
            <summary>boolean</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Timestamp">
            <summary>timestamp</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Guid">
            <summary>guid</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Image">
            <summary>image</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.NText">
            <summary>ntext</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Text">
            <summary>text</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Variant">
            <summary>variant</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Xml">
            <summary>XML</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Date">
            <summary>date</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.Time">
            <summary>time</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.DateTimeOffset">
            <summary>datetimeoffset</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SqlType.DateTime2">
            <summary>datetime2</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.StringWriter">
            <summary>
            An implementation of <see cref="T:RedGate.SQLCompare.Engine.IBlockWriter" /> using a backing <see cref="T:System.Text.StringBuilder" />.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StringWriter.AddBatch(System.String)">
            <summary>
            <see cref="M:RedGate.SQLCompare.Engine.SimpleSqlStringBuilder.AddBatch(System.String)"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.StringWriter.AddPrintStatement(RedGate.SQLCompare.Engine.Options,System.String)">
            <summary>
            Has no effect for this implementation
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKey">
            <summary>A symmetric key.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm">
            <summary>The symmetric key encryption algorithm.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.R2">
            <summary>R2 = RC2</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.R4">
            <summary>R4 = RC4</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.D">
            <summary>D = DES</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.D3">
            <summary>D3 = Triple DES</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.DX">
            <summary>DX = DESX</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A1">
            <summary>A1 = AES 128</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A2">
            <summary>A2 = AES 192</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.SymmetricKey.SymmetricKeyEncryptionAlgorithm.A3">
            <summary>A3 = AES 256</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.ObjectType">
            <summary>Returns ObjectType.SymmetricKey</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.CreateDate">
            <summary>The date of creation for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.ModifyDate">
            <summary>The date of the last modification for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyGuid">
            <summary>The GUID for the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyLength">
            <summary>The length of the symmetric key.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SymmetricKey.KeyAlgorithm">
            <summary>The symmetric key algorithm.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKey.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns>
            <em>True</em> if the symmetric keys are identical; otherwise,
            <em>false.</em>
            </returns>
            <summary>Compares the symmetric key with a specified symmetric key.</summary>
            <param name="targetObject">The symmetric key to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKey.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options, e.g. quoted identifier on or off.</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SymmetricKeys">
            <summary>A collection of symmetric keys.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKeys.SerializeItem(RedGate.SQLCompare.Engine.SymmetricKey,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SymmetricKeys.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Synonym">
            <summary>A synonym.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonym.GetReferenceLocation">
            <summary></summary>
            <returns>
            Our best guess as to whether the object being referenced by this synonym is on the same database or not
            </returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.SysobjectID">
            <summary>The sysobject identifier for the synonym.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.ReferencedName">
            <summary>The name that the synonym references.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Synonym.ObjectType">
            <summary>Returns ObjectType.Synonym</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonym.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the synonyms are identical; otherwise <em>false.</em></returns>
            <summary>Compares the synonym with the specified synonym.</summary>
            <param name="targetObject">The synonym to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonym.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Synonyms">
            <summary>A collection of synonyms.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonyms.SerializeItem(RedGate.SQLCompare.Engine.Synonym,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Synonyms.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Table">
            <summary>A table.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Table.TableChangeTracking">
            <summary>Table change tracking option set. This has been introduced in SQL Server 2008.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Table.TableChangeTracking.Disabled">
            <summary>Change tracking is disabled.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Table.TableChangeTracking.Enabled">
            <summary>Change tracking is enabled.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.Table.TableChangeTracking.EnabledWithTrackColumnsUpdated">
            <summary>Change tracking is enabled with information on which columns were updated.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ObjectType">
            <summary>Returns ObjectType.Table</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.FileGroup">
            <summary>The filegroup on which the table is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.TextFileGroup">
            <summary>The filegroup on which the text in the table is defined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.FilestreamFileGroup">
            <summary>The filegroup on which the filestreams of the table are to be stored.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.UserDefinedType">
            <summary>
            If this is a user-defined table type, the user-defined type which defined it, otherwise null
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ForeignKeys">
            <summary>The table's foreign keys.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.CheckConstraints">
            <summary>The table's check constraints.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.PartitionedField">
            <summary>
            Indicates the field over which the table is partitioned. This is a SQL Server 2005 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.IsPartitioned">
            <summary>Indicates whether the table is partitioned. This is a SQL Server 2005 feature.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.PartitionScheme">
            <summary>The partition scheme for this table. This is a SQL Server 2005 feature.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.DataCompressionPartitions">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.DataCompressionPartitionsInternal">
            <summary>
            The partitions on which the table compression is set. This is a SQL Server 2008 feature. The internal version
            gives you direct access to the list that is stored. If there is no important information in the list it is
            not stored!
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ChangeTracking">
            <summary>
            Whether change tracking is enabled for this table. This is a SQL Server 2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.TemporalType">
            <summary>
            Whether the table is a a temporal table, a history table, or neither. This is a SQL Server 2016 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.HistoryTable">
            <summary>
            For temporal tables, the fully qualified name of the history table associated with this temporal table.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.HistoryTableIsSystemNamed">
            <summary>
            For temporal tables, whether not <see cref="P:RedGate.SQLCompare.Engine.Table.HistoryTable"/> is a system generated name.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.ChangeTrackingScriptSource">
            <summary>The script source for any ALTER TABLE CHANGE_TRACKING statement.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.PostCreateScript">
            <summary>
            A property used by the refactoring engine to set post create scripts. These could potentially
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Table.LastModified">
            <summary>
            The time of the last change to this table's schema.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the table with a specified table.</summary>
            <returns><em>True</em> if the tables are identical; otherwise <em>false.</em></returns>
            <param name="targetObject">The table to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.TableBodySql(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <remarks>
            If InlineTableObjects option is set, the creation also defines the constraints.
            </remarks>
            <returns>Table's CREATE SQL</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.TableBodySql(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker,System.Collections.Generic.IList{RedGate.SQLCompare.Engine.IField})">
            <remarks>
            If InlineTableObjects option is set, the creation also defines the constraints.
            </remarks>
            <returns>Table's CREATE SQL</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.TableBodySql(RedGate.SQLCompare.Engine.Options,System.String,System.String,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker,RedGate.SQLCompare.Engine.ComparisonContext,RedGate.SQLCompare.Engine.Table,System.Collections.Generic.Dictionary{RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.IField},System.Collections.Generic.IList{RedGate.SQLCompare.Engine.IField})">
            <remarks>
            If InlineTableObjects option is set, the creation also defines the constraints.
            </remarks>
            <returns>Table's CREATE SQL</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker,System.Collections.Generic.IList{RedGate.SQLCompare.Engine.IField})">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
            <param name="fields"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Table.InlinedSqlGeneratesWrongConstraintStatus(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.CheckConstraint)">
            <summary>
            Weird edge case: An inlined constraint can't be created WITH NOCHECK.  We must therefore alter it afterwards.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Tables">
            <summary>A collection of tables.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Tables.PostprocessObjectTypes(RedGate.SQLCompare.Engine.Database)">
            <summary>Foreign keys; partitions (binding between a partition scheme and a table</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMappings.#ctor(System.Boolean,System.Boolean)">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMappings.#ctor(RedGate.SQLCompare.Engine.Mappings{RedGate.SQLCompare.Engine.SqlCompareTableMapping,RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.MappingContext})">
            <summary>Shallow copy constructor.</summary>
            <param name="tableMappings">The <see cref="T:RedGate.SQLCompare.Engine.SqlCompareTableMappings" /> to be copied.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMappings.ShouldInclude(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.ViewTableSuperClass,System.Object)">
            <summary>
            Called to determine if an object should be included in the mapping at all, one of the obj arguments is null.
            </summary>
            <param name="obj1">object or null if obj2 not null.</param>
            <param name="obj2">object or null if obj1 not null.</param>
            <param name="extra">extra data passed into CreateMappings internally to determine relevance.</param>
            <returns>true ( default )for inclusion, false otherwise.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMappings.CreateMappings(RedGate.SQLCompare.Engine.Tables,RedGate.SQLCompare.Engine.Tables)">
            <summary>
            Creates a mapping for each object in the collection for which such a mapping is possible.
            </summary>
            <param name="in1">A list of objects in the first database, or null.</param>
            <param name="in2">A list of objects in the second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMappings.CreateMappings(RedGate.SQLCompare.Engine.Views,RedGate.SQLCompare.Engine.Views)">
            <summary>
            Creates a mapping for each object in the collection for which such a mapping is possible.
            </summary>
            <param name="in1">List of objects in the first database, or null.</param>
            <param name="in2">List of objects in the second database, or null.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlCompareTableMappings.Join(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.ViewTableSuperClass)">
            <summary>
            Joins two views or tables, and attempts to map their fields and indexes. If there are no suitable indexes,
            the status is set to <em>Unable to Compare</em>.
            </summary>
            <returns>The created mapping.</returns>
            <exception cref="T:System.ArgumentException" caption="">
            TableMappings. Join must be called with ViewTableSuperClass
            arguments.
            </exception>
            <param name="obj1">The table or view in the first database.</param>
            <param name="obj2">The table or view in the second database.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SyncToScript.ForeignKeyNoOpFilter">
            <summary>
            Since a FK on table2 referenced a field in table1, for a live database changing table1 requires a table2
            rebuild This is obviously not the case for a scripts folder where a drop and recreate is a NoOp This class
            provides a view over Foreign Keys that filters out such NoOps for use in script folder modifications.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.ISyncToScriptTableFeatures.RewriteInlineAsAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            If we rewrite the body of a table [implied by the fact this method has been called] and if a Table Feature
            was declared inline and if a Table Feature but won't be inlined after the rewrite and if the Table Feature is
            not being dropped then we need to write those Table Features out as new alter statements
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptCheckConstraints.RewriteInlineAsAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            similar to <see cref="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptIndexes.RewriteInlineAsAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)" /> but for check constraints
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptForeignKeys.RewriteInlineAsAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            similar to <see cref="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptIndexes.RewriteInlineAsAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)" /> but for foreign keys
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptForeignKeys.ForeignKeyDependenciesWillExist(RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects,RedGate.SQLCompare.Engine.ForeignKey)">
            <summary>
            We can only create the FK script if the defined field and referenced field will both be in the target
            database
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptIndexes.RewriteInlineAsAlters(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.Table,RedGate.SQLCompare.Engine.ProgressTracker,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            If we rewrite the body of a table [implied by the fact this method has been called] and if an index was
            declared inline and if an index but won't be inlined after the rewrite and if the index is not being dropped
            then we need to write those indexes out as new alter statements
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptRewriter.AddObjectRewrite(RedGate.SQLCompare.Engine.ScriptSource,System.String,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Generates the rewrite for dropping a database object (or part of it). It also adds this to the relevant file
            rewrites.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptBuilder.GenerateFolderSynchronizationActions">
            <summary>
            This is the second stage of the main work, in which the scripts folder rewrite is generated for the
            synchronization. This can only be used internally.
            </summary>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptBuilder.Metadata(RedGate.SQLCompare.Engine.Options)">
            <summary>
            Add m_DbInfo update action if appropriate. Should be called after all ScriptSynchronizationActionWrites have
            been constructed.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptBuilder.BuildServicesAlter">
            <summary>
            Alters the Services. Prerequisites: Contracts alter/create, queues alter/create
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptBuilder.BuildBindablesUnbinds">
            <summary>Unbinds defaults and rules from columns and types.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptBuilder.BuildFulltextDropFromTablesAndColumns">
            <summary>Drop full text information from columns, fulltext from tables</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptBuilder.BuildFulltextCatalogCreateAndActivateAndSetIndexing">
            <summary>
            Full-text: create catalogs, adding full-text indexing to tables, columns, and activating it. Note that for
            SqlServer2005 this is still NOT transactional (as opposed to its documentation!)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SyncToScript.SyncToScriptBuilder.Creates">
            <summary>Handles all the create objects when syncing against a folder.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TextComparisonResult">
            <summary>
            A result of comparing two strings
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TextComparisonResult.FromDifferentResult(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ParserHelperToken},System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ParserHelperToken},System.Int32)">
            <summary>
            Sets Equal=false and other properties as appropriate
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TextComparisonResult.FromEqualResult(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ParserHelperToken},System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.ParserHelperToken})">
            <summary>
            Sets Equal=true and other properties undefined
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.TextComparisonResult.SourceTokens">
            <summary> Might be null if <see cref="P:RedGate.SQLCompare.Engine.TextComparisonResult.Equal"/> is true </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.TextComparisonResult.TargetTokens">
            <summary> Might be null if <see cref="P:RedGate.SQLCompare.Engine.TextComparisonResult.Equal"/> is true </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.TextComparisonResult.IndexOfFirstDifferentToken">
            <summary>Will be -1 if <see cref="P:RedGate.SQLCompare.Engine.TextComparisonResult.Equal"/> is true</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TextComparisonResultSummarizer">
            <summary>
            Helper class for <see cref="T:RedGate.SQLCompare.Engine.TextComparisonResult"/>
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TextComparisonResultSummarizer.GetSummaryTextForFirstDifference(RedGate.SQLCompare.Engine.TextComparisonResult,System.Int32)">
            <summary>
            Given a text comparison result, output a pair of strings. These strings are intended to be compared as an
            <see cref="T:RedGate.SQLCompare.Engine.EqualityDifference" /> by the UI, and doing a naive text diff on the two strings should highlight
            the appropriate position in the text comparison result
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TextComparisonResultSummary">
            <summary>
            See <see cref="M:RedGate.SQLCompare.Engine.TextComparisonResultSummarizer.GetSummaryTextForFirstDifference(RedGate.SQLCompare.Engine.TextComparisonResult,System.Int32)" /> for details
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TopologicalSort`1">
            <summary>
            Uses Tarjan's strongly connected components algorithm
            (http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm) to perform a (reverse)
            topological sort of a graph of nodes, while dealing intelligently with the presence of cycles.
            <para>
            Once the TopologicalSort has been constructed for a graph, the DepthFirstOrder() methods can be called to
            sort a set of nodes based on the topological ordering of the graph. Any nodes in the set that are present in
            the topological ordering will be returned such that child nodes come before their parents (i.e. in dependency
            order), while any nodes that are not present in the topological ordering will be returned at the end of the
            sorted list. If more than one node from a single strongly connected component (cycle) needs to be sorted, a
            <see cref="T:RedGate.SQLCompare.Engine.TopologicalSort`1.CycleResolutionStrategy">CycleResolutionStrategy</see> can be used to break the cycle and provide
            a suitable ordering.
            </para>
            </summary>
            <typeparam name="T">The type of nodes within the graph</typeparam>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TopologicalSort`1.m_Vertices">
            <summary>
            Mapping from vertices in the graph to the additional data required by Tarjan's algorithm
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TopologicalSort`1.m_Edges">
            <summary>
            Delegate that defines the edges present in the graph (a mapping from a Vertex to its children)
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TopologicalSort`1.m_Cycles">
            <summary>
            Mapping from component id to list of elements in that component, where the component has more than one
            element.
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TopologicalSort`1.m_Index">
            <summary>
            Used while traversing the tree to build up the set of strongly connected components
            </summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TopologicalSort`1.m_ComponentCount">
            <summary>total number of separate strongly connected components encountered</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TopologicalSort`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Creates a (reverse) topological ordering for a graph of nodes (vertices defined by the 'nodes' argument, and
            edges by the 'children' argument) that can then be used to sort a subset of those nodes into dependency
            order.
            </summary>
            <param name="nodes">All of the vertices in the graph to be searched</param>
            <param name="children">Delegate that provides the children for a given vertex</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.TopologicalSort`1.Cycles">
            <summary>
            The set of cycles (circular dependencies) found in the graph - i.e. all of the strongly connected components
            where the number of elements within the component is greater than one.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TopologicalSort`1.GetComponentIndex(`0)">
            <summary>
            Obtain the depth-first post-order index of the given node (children have lower indices than their parents. If
            node is not one of the nodes in the graph, it is given an index of Int32.MaxValue - i.e. it comes after all
            nodes that are in the graph.
            </summary>
            <param name="node">The node whose relative ordering in the graph is required</param>
            <returns>
            The index into the ordering, such that a descendant node has a lower index than its ancestor nodes.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TopologicalSort`1.DepthFirstOrder(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sorts a set of nodes by their position in the topological sort of the graph, such that all child nodes are
            returned before their ancestors. Any nodes in 'unsorted' which are not part of the graph are returned at the
            end of the list in an undefined order. If cycles (circular dependencies) are encountered while sorting the
            nodes, a
            <see cref="T:RedGate.SQLCompare.Engine.CycleDetectedException">CycleDetected</see> exception is thrown.
            <para>This is equivalent to calling DepthFirstOrder(unsorted, ThrowOnCycle)</para>
            </summary>
            <param name="unsorted">The elements to be returned in sorted order</param>
            <returns>
            The members of 'unsorted', ordered by their position in the depth first ordering of the graph, such that all
            child nodes come before their ancestors.
            </returns>
            <exception cref="T:RedGate.SQLCompare.Engine.CycleDetectedException">if any cycles are encountered while attempting to sort</exception>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TopologicalSort`1.DepthFirstOrder(System.Collections.Generic.IEnumerable{`0},RedGate.SQLCompare.Engine.TopologicalSort{`0}.CycleResolutionStrategy)">
            <summary>
            Sorts a set of nodes by their position in the topological sort of the graph, such that all child nodes are
            returned before their ancestors. Any nodes in 'unsorted' which are not part of the graph are returned at the
            end of the list in an undefined order. If multiple nodes from a single strongly connected component
            (cycle/circular dependency) are in the unsorted list, 'cycleHandler' is used to provide a full ordering for
            those nodes.
            </summary>
            <param name="unsorted">The elements to be returned in sorted order</param>
            <param name="cycleHandler">
            Used to provide an ordering for nodes in unsorted which come from the same strongly connected component.
            <see cref="T:RedGate.SQLCompare.Engine.TopologicalSort`1.CycleResolutionStrategy" />
            </param>
            <returns>
            The members of 'unsorted', ordered by their position in the depth first ordering of the graph, such that all
            child nodes come before their ancestors.
            </returns>
            <exception cref="T:RedGate.SQLCompare.Engine.CycleDetectedException">if any cycles are encountered while attempting to sort</exception>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TopologicalSort`1.CycleResolutionStrategy">
            <summary>
            This delegate is used to provide an ordering for nodes which form part of the same strongly connected
            component (cycle/circular dependency).
            </summary>
            <param name="requiredNodes">The nodes which need to be sorted</param>
            <param name="stronglyConnectedComponent">
            The full set of nodes that make up the strongly connected component that requiredNodes belong to
            </param>
            <returns>The order in which requiredNodes should be returned to the caller</returns>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TopologicalSort`1.ThrowOnCycle">
            <summary>
            This CycleResolutionStrategy throws an exception if multiple nodes from a cycle are required.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TopologicalSort`1.AttemptToBreakLinks(System.Func{`0,`0,System.Boolean},RedGate.SQLCompare.Engine.TopologicalSort{`0}.CycleResolutionStrategy)">
            <summary>
            Obtains a CycleResolutionStrategy that will attempt to sort the required nodes by breaking links in the
            strongly connected component.
            </summary>
            <param name="breakableLink">
            Callback which will be used to indicate whether a particular link can be broken when attempting to break a
            cycle. The first argument is the parent node, and the second is the child node. This delegate should return
            true if the given link can be broken (i.e. if it can be considered a 'weak link')
            </param>
            <param name="unbreakableCycleHandler">
            Used to deal with any cycles that cannot be broken by breaking the links indicated by breakableLink
            </param>
            <returns>The necessary CycleResolutionStrategy</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TopologicalSort`1.StrongConnect(RedGate.SQLCompare.Engine.TopologicalSort{`0}.TarjanVertex,System.Collections.Generic.Stack{RedGate.SQLCompare.Engine.TopologicalSort{`0}.TarjanVertex})">
            <summary>Recursive function used to perform depth-first search for Tarjan's algorithm.</summary>
            <param name="v">The current vertex being considered</param>
            <param name="S">Stack of vertices in the current recursion</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TopologicalSort`1.TarjanVertex">
            <summary>Data associated with each vertex for Tarjan's algorithm</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TopologicalSort`1.TarjanVertex.ComponentIndex">
            <summary>The index of the strongly connected component this vertex belongs to</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.TopologicalSort`1.TarjanVertex.InStack">
            <summary>
            Ensure that checking whether item is in the stack is an O(1) operation  by setting this flag when this vertex
            is pushed on to the stack, and clearing it when it is popped.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseObjectExtensionMethods.ScriptObject(RedGate.Shared.ComparisonInterfaces.TSql.ITSqlObject,RedGate.SQLCompare.Engine.Options)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseObjectExtensionMethods.ScriptObject(RedGate.SQLCompare.Engine.ScriptableDatabaseObject,RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options)">
            <returns>The regions for a <see cref="T:RedGate.SQLCompare.Engine.ScriptableDatabaseObject"/> suitable for showing in the diff viewer</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IDatabaseObjectExtensionMethods.GetMatchForSystemNameableObject``1(RedGate.SQLCompare.Engine.IKeyedCollection{``0},``0,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Find the matching database object in the target collection, depending on whether we should use the object's
            name or not
            </summary>
            <remarks>
            This has a potential issue where if more than one object matches the Equals check, the first one will be
            returned each time. So if we had two identical constraints on the same table, and wanted to replace both of
            them, while ignoring constraint names, then one would get replaced twice
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.GenerateSql(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This is the second stage of the main work, in which the SQL is generated for the synchronization. This can
            only be used internally.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.ProcessDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This is the first stage of the main work, in which the necessary work is determined. This can only be used
            internally!
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IWork.ScriptSynchronizationActions">
            <summary>
            The script synchronization actions that will be performed during the synchronization.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IWork.ExecutionBlock">
            <summary>A block of SQL batches containing SQL script for synchronization.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IWork.CanRollBackOnFailure">
            <summary>True if the transaction can be completely rolled back on failure.</summary>
            <remarks>
            Some synchronization commands, such as full-text operations, cannot be included within transactions. If a
            script fails, these operations cannot be rolled back.
            </remarks>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IWork.Messages">
            <summary>Informational messages about the work to be done.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IWork.Warnings">
            <summary>Warnings about the work to be done.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IWork.Dependencies">
            <summary>
            The dependencies selected for the current Work. Populated during <see cref="M:RedGate.SQLCompare.Engine.IWork.ProcessDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)" />.
            Dictionary is of &lt;dependent object, objects depending on it&gt;.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IWork.DependenciesHaveBeenCalculated">
            <summary>Indicates that the Dependencies property has been fully populated.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.GenerateFolderSynchronizationActions(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator)">
            <summary>
            This is the second stage of the main work, in which the scripts folder rewrite is generated for the
            synchronization. This can only be used internally.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="dbInfo">Options to control how the script files are saved.</param>
            <param name="generator">
            This object is repsonsible for generating the file name for any newly created objects
            </param>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Build the work object from a set of differences. Use this method when synchronizing to a live database.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation)">
            <summary>
            Build the work object from a set of differences. It sets the ScriptSynchronizationActions property to include
            the synchronization actions for modifying a scripts folder. Use this method when synchronizing to a scripts
            folder.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="dbInfo">
            Options that sepcify how files are to be created when synchronizing to a scripts folder.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.SetImplicitlySelectedDifferences(RedGate.SQLCompare.Engine.Differences)">
            <summary>For internal use only.</summary>
            <param name="differences">Internal use only.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Builds the work object from an individual difference. It sets the ExecutionBlock property to include the
            script for synchronization. Use this method when synchronizing to a live database.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator)">
            <summary>
            Builds the work object from an individual difference. It sets the ScriptSynchronizationActions property to
            include the synchronization actions for modifying a scripts folder. Use this method when synchronizing to a
            scripts folder.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="dbInfo">
            Options that sepcify how files are to be created when synchronizing to a scripts folder.
            </param>
            <param name="generator">The object responsible for generating the names of the newly created objects</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWork.ScriptObject(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Returns the script necessary to create a SQL object.</summary>
            <remarks>
            This creates SQL code used to create an object such as a table, view, or stored procedure.
            </remarks>
            <example>
                <code lang="CS">
            Database db=new Database();
             
            db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             
            Work work=new Work();
             
            //get the script for an object
            Regions regions=work.ScriptObject(db.Tables[0], Options.Default);
             
            Console.WriteLine("SQL script:\n{0}", regions.ToString());
             
            db.Dispose();
                </code>
                <code lang="VB">
            Dim db As New Database()
             
            db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             
            Dim work As New Work()
             
            'get the script for an object
             
            Dim regions As Regions = work.ScriptObject(db.Tables(0), Options.Default)
             
            Console.WriteLine("SQL script:")
            Console.WriteLine("{0}", regions.ToString())
             
            'dispose
            db.Dispose()
                </code>
            </example>
            <returns>A <see cref="T:RedGate.SQLCompare.Engine.Regions">Regions</see> collection containing batches of SQL script.</returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.IWork.StaticDataInsertPosition">
            <summary>For internal use only.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ExistenceChecker">
            <summary>Wrap sql statements in object existence checks</summary>
            <remarks>
                <seealso cref="F:RedGate.SQLCompare.Engine.Options.ObjectExistenceChecks" />
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddDropTestIfNeeded(RedGate.SQLCompare.Engine.ICanExistenceCheck,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Adds an IF test at the start of the given sql text so the drop will only be executed if the object exists
            </summary>
            <param name="obj">The object that this sql relates to (eg a Table)</param>
            <param name="sqlText">The sql that drops this object</param>
            <param name="options">
            The current options - this method will only add existence checks if the related option is set
            </param>
            <returns>The sql code with the IF statement added</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddDropTestIfNeeded(RedGate.SQLCompare.Engine.ICanExistenceCheck,RedGate.SQLCompare.Engine.ICanExistenceCheck,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Same as above, but with a parent object and subobject (eg. a Table and a related Index)
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddCreateTestIfNeeded(System.Collections.Generic.IEnumerable{RedGate.SQLCompare.Engine.IField},System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Add a create test for <paramref name="fields"/> by combining the individual create test for each
            field with ANDs.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddDropRowGuidTestIfNeeded(RedGate.SQLCompare.Engine.IField,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>Special case for dropping a row guid property on a field</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddDropRuleBindTestIfNeeded(RedGate.SQLCompare.Engine.Rule,System.Object,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>Another special case for unbinding a rule on a field or UDT</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddRenameTestIfNeeded(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.IDatabaseObject,System.String,RedGate.SQLCompare.Engine.Options,System.String)">
            <summary>Makes sure the currentObjectName exists and the newObjectName does not</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddFullTextIndexCreateIfNeeded(RedGate.SQLCompare.Engine.IField,RedGate.SQLCompare.Engine.FullTextCatalog,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>Full text index special case</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddFullTextIndexCreateIfNeeded(RedGate.SQLCompare.Engine.ViewTableSuperClass,RedGate.SQLCompare.Engine.FullTextCatalog,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>Full text index special case</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.AddDisableChangeTrackingTestIfNeeded(RedGate.SQLCompare.Engine.Table,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>Disabling change tracking special case</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.GetNullType(RedGate.SQLCompare.Engine.ExistenceChecker.CheckType)">
            <summary>Helper method for if the IF test should use NULL or NOT NULL</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ExistenceChecker.GetExistsType(RedGate.SQLCompare.Engine.ExistenceChecker.CheckType)">
            <summary>Helper method for if the IF test should use EXISTS or NOT EXISTS</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.IWorkStage.ScriptObject(RedGate.Shared.ComparisonInterfaces.TSql.ITSqlObject,RedGate.SQLCompare.Engine.Options)">
            <returns>The regions for a <see cref="T:RedGate.SQLCompare.Engine.ScriptableDatabaseObject"/> suitable for showing in the diff viewer</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.OptionsAndUseBlockFactory.GetOptionsAndUseBlock(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Messages)">
            <remarks>Provided for legacy Migrations v1 compatibility</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.OptionsAndUseBlockFactory.WriteScriptInitializationStatements(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Deployment.Sections.SectionBuilder)">
            <summary>
            Writes "USE" block, <see cref="T:RedGate.SQLCompare.Engine.SqlSetOptions"/> and transaction isolation level
            Returns messages and warnings as an IEnumerable (messages have <see cref="F:RedGate.Shared.ComparisonInterfaces.Deployment.WarningSeverity.Information"/>)
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder">
            <remarks>
            Intended to be the last point during script generation that knows about <see cref="P:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.WorkFields"/>
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.GenerateSqlSections(RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Creates the sections of the deployment
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.GetCommentHeader(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            Create the pretty comment that goes at the top of SQL Compare deployment scripts
            </summary>
            <remarks>Prefer <see cref="M:RedGate.SQLCompare.Engine.Deployment.Sections.ScriptHeaderStatementsGenerator.GetCommentHeaderStatements(System.String)"/> where possible</remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.BuildTablesUnbindFromClrUdtsAndPartitionSchemes(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Unbinds tables from CLR UDTs and from partition schemes that need to be reworked.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.BuildCoreObjectsDrops(RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.IDatabase,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            This drops views, tables, stored procedures and functions in a dependecny created order. Before we can drop
            or alter tables we need to remove schema bindings from any bound objects
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.BuildComputedColumnsDrops(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops computed columns Before we can alter any functions, we need to drop any computed columns that reference
            the functions
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.BuildBindablesUnbinds(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Unbinds defaults and rules from columns and types.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.BuildSchemaBindingsUnbind(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.DatabaseCollaborators.IDatabaseObjects,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            Unbinds schemabindings. Prerequisite: Note: This must be done before we can drop or alter tables!
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.DeploymentScriptSectionsBuilder.BuildSynonymsDrop(RedGate.SQLCompare.Engine.ISqlSectionBuilder,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Drops the synonyms. This should be run before synonyms are added, since there are no alter synonyms, thus
            alters are replaced with drop creates. Note: target must be SqlServer2005!
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.TargetRefactoringObjectExistsException">
            <summary>
            TargetRefactoringObjectExistsException is used when a database object that is renamed using a refactoring,
            but this object already is in the database.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TargetRefactoringObjectExistsException.#ctor">
            <summary>Constructs an TargetRefactoringObjectExistsException exception.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TargetRefactoringObjectExistsException.#ctor(System.String)">
            <summary>Constructs an TargetRefactoringObjectExistsException exception.</summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.TargetRefactoringObjectExistsException.#ctor(System.String,System.Exception)">
            <summary>Constructs an TargetRefactoringObjectExistsException exception.</summary>
            <param name="message">The message for the exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Trigger">
            <summary>A trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.SysobjectID">
            <summary>The identifier of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ID">
            <summary>The identifier of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.QuotedIdentifierOn">
            <summary>True if the trigger was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AnsiNullsOn">
            <summary>True if the trigger was created with <em>ansi nulls on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Parent">
            <summary>The parent of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.IsReplicationTrigger">
            <summary>True if the trigger is a replication trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Text">
            <summary>The text of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FullyQualifiedName">
            <summary>The fully-qualified name of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Update">
            <summary>True if the trigger is an <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Insert">
            <summary>True if the trigger is an <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Delete">
            <summary>True if the trigger is a <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.After">
            <summary>True if the trigger is an <em>after</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.InsteadOf">
            <summary>True if the trigger is an <em>instead of</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.CLRObject">
            <summary>True if the trigger is a CLR trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Assembly">
            <summary>The CLR assembly for the DML trigger, if it is a CLR DML trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ExecuteAsType">
            <summary>The EXECUTE AS clause used for the object.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ExecuteAs">
            <summary>
            The user whose security context is to be used for the execution of the trigger. This is a SQL Server 2005 and
            2008 feature.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AssemblyClass">
            <summary>The CLR assembly class name for the DML trigger, if it is a CLR DML trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.AssemblyMethod">
            <summary>The CLR assembly method name for the DML trigger, if it is a CLR DML trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.NotForReplication">
            <summary>True if this trigger is NOT FOR REPLICATION.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstDeleteTrigger">
            <summary>True if the trigger is the first <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstInsertTrigger">
            <summary>True if the trigger is the first <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.FirstUpdateTrigger">
            <summary>True if the trigger is the first <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastDeleteTrigger">
            <summary>True if the trigger is the last <em>delete</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastInsertTrigger">
            <summary>True if the trigger is the last <em>insert</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.LastUpdateTrigger">
            <summary>True if the trigger is the last <em>update</em> trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Encrypted">
            <summary>True if the trigger definition is encrypted.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.IsDisabled">
            <summary>True if the trigger is <em>disabled</em>.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Trigger.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
            <summary>Compares the trigger with a specified trigger.</summary>
            <returns><em>True</em> if the triggers are identical; otherwise, <em>false</em>.</returns>
            <param name="target">The trigger to compare.</param>
            <param name="options">Comparison options.</param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.QualifiedName">
            <summary>The qualified name of the object.  Do you mean <seealso cref="P:RedGate.SQLCompare.Engine.Trigger.Name" />?</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Name">
            <summary>
            The name of the trigger.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.Trigger.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Owner">
            <summary>The owner or the schema of the trigger.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.Database">
            <summary>The database to which the trigger belongs.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Trigger.ObjectType">
            <summary>Returns ObjectType.Trigger</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Triggers">
            <summary>A collection of triggers.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.SerializeItem(RedGate.SQLCompare.Engine.Trigger,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Triggers.Item(System.String)">
            <summary>Returns a trigger given its fully-qualified name.</summary>
            <param name="fullyQualifiedName">The string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.ResetInternalKeysAfterParentRename">
            <summary>
            Triggers are stored in the base class hashtable based on a key that contains the parent table name. However,
            if the table is to be renamed (see refactoring), then the hashtable needs to be repopulated. This method
            removes all entries from the hastable, and repopulates it with consideration to the new table name. Note,
            that when this is executed, the table name must already be set to its new value.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Triggers.Item(System.String,System.String)">
            <summary>Returns a trigger given its name and owner.</summary>
            <param name="owner">The owner component of the string-based index of the element to get or set.</param>
            <param name="name">The name component of the string-based index of the element to get or set.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.GetKey(RedGate.SQLCompare.Engine.Trigger)">
            <summary>Generates a key for a trigger.</summary>
            <param name="value">The trigger for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Triggers.Sort">
            <summary>
            Sorts triggers based on their names (this is generally used for collections of tables, so the table name does
            not need to be considered.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UDTBindings.GetKey(RedGate.SQLCompare.Engine.UDTBinding)">
            <summary>Generates a key for a UDT binding.</summary>
            <param name="value">The UDT binding for which the key is requested.</param>
            <returns>The key for the object, usually its name.</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.User">
            <summary>A user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.ExtendedProperties">
            <summary>The extended properties defined for the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.ScriptSourceCreateLogin">
            <summary>
            The location of the creation script for the create login statement for this object if the database source is
            set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.ObjectType">
            <summary>Returns ObjectType.User</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.FullyQualifiedName">
            <summary>
            The fully-qualified name of the user.  DANGER WILL ROBINSON!!  This is not escaped.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Owner">
            <summary>The owner of the user. This is undefined.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.LoginName">
            <summary>The login name of the user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.LoginNameWithoutDomain">
            <summary>
            For a user based on a login for a Windows principal, returns the login name without the domain.
            For example, for user @"red-gate.com\fred" this property returns @"fred".
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.UserNameWithoutDomain">
            <summary>
            For a user based on a login for a Windows principal, returns the user name without the domain.
            For example, for user @"red-gate.com\fred" this property returns @"fred". Users attached to windows
            logins often have the same name as the login, although this doesn't have to be the case (eg SC-9134)
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.UserType">
            <summary>
            The user type. This can be a certificate or asymmetric key bound user. In addition, in SQL Sever 2000 and
            earlier this can be a Windows user or a SQL user in SQL Server 2000.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.DefaultSchema">
            <summary>The default schema of SQL Server 2005 users.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.IsWindowsUser">
            <summary>True if the user is a Windows user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.IsSQLUser">
            <summary>True if the user is a SQL user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Permissions">
            <summary>The permissions on this user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.AsymmetricKey">
            <summary>The name of the asymmetric key if the user is an asymmetric key bound user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.Certificate">
            <summary>The name of the certificate key if the user is an certificate key bound user.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.User.DatabaseLevelPermissions">
            <summary>Access to the user's database-level permissions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.User.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the users are identical; otherwise <em>false.</em></returns>
            <summary>Compares the user with a specified user.</summary>
            <param name="target">The user to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.User.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserDefinedType">
            <summary>A user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.ScriptSourceForDefault">
            <summary>
            The location of the creation script for the default binding statement for this object if the database source
            is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.ScriptSourceForRule">
            <summary>
            The location of the creation script for the default binding statement for this object if the database source
            is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.ObjectType">
            <summary>Returns ObjectType.UserDefinedType</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Name">
            <summary>
            The name of the object.  DANGER WILL ROBINSON!!  This is not escaped.  Do you mean
            <seealso cref="P:RedGate.SQLCompare.Engine.ScriptableDatabaseObject.QualifiedName" />?
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Rule">
            <summary>The rule bound to the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Default">
            <summary>The default bound to the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.BaseTypeName">
            <summary>The name of the underlying type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.AllowNulls">
            <summary>True if the user-defined type allows nulls.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Length">
            <summary>The length of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Precision">
            <summary>The precision of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Scale">
            <summary>The scale of the user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.SqlType">
            <summary>The underlying type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.CLRObject">
            <summary>True if the user-defined type is a CLR user-defined type.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.Assembly">
            <summary>
            The CLR assembly for the user-defined type, if this is a CLR user-defined type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.AssemblyClass">
            <summary>
            The CLR assembly class name for the user-defined type, if this is a CLR user-defined type.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.TypeTable">
            <summary>
            This table contains information about the type if it is a table type. Table types have been introduced in SQL
            Server 2008.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedType.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <summary>Compares the user-defined type with a specified user-defined type.</summary>
            <returns>
            <em>True</em> if the user-defined types are identical; otherwise,
            <em>false.</em>
            </returns>
            <param name="target">The user-defined type to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedType.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.UserDefinedType.AuthType">
            <summary>
            Returns the object type that should be used for ALTER AUTHORIZATION statements on the object.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.UserDefinedTypes">
            <summary>A collection of user-defined types.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.SerializeItem(RedGate.SQLCompare.Engine.UserDefinedType,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.UserDefinedTypes.RedGate#SQLCompare#Engine#IPatchUpAfterDeserialization#PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Database)">
            <summary>Must be run after assemblies and tables are patched up.</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Users">
            <summary>A collection of users.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.SerializeItem(RedGate.SQLCompare.Engine.User,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.GetConsideringDomainComponent(System.String)">
            <summary>
            Lookup a user, taking any domain component into account. For example looking up 'DOMAIN\foo' will not
            find a user called just 'foo' or 'SOMEOTHERDOMAIN\foo'.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Users.GetIgnoringDomainComponent(System.String)">
            <summary>
            Lookup a user, ignoring any domain component. For example looking up 'DOMAIN\foo' will find a user
            called just 'foo' or even 'SOMEOTHERDOMAIN\foo'.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.Users.Item(System.String)">
            <summary>
            Lookup a user first by considering its fully qualified name (which may include a domain component
            eg 'DOMAIN\user') falling back to a lookup without the domain component.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Utils">
            <summary>A class providing utility functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.Intern(System.String)">
            <summary>Interns <paramref name="s" /> if it is not null.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.StripSquareBrackets(System.String)">
            <summary>
            If a string is surrounded by square brackets, remove them and return the stripped string
            </summary>
            <param name="s">String to have square bracketes removed.</param>
            <returns>Square brackets removed string</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.StripParentheses(System.String)">
            <summary>
            If a string is surrounded by parentheses, remove them and return the stripped string
            </summary>
            <param name="s">String to have parenthese removed.</param>
            <returns>Parentheses removed string</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.JoinWithCommas(System.Collections.Generic.IList{System.String})">
            <summary>
            Joins a list of strings with commas and an and, eg. {"a", "b", "c"} => "a, b and c"
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.GetAst(System.IO.TextReader,System.Boolean)">
            <summary>Constructs the lexer and parser for a given input.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.IndexDifferences``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns a list of the indexes that differ between the two collections in O(n) time. Note that this only makes
            sense for collections that have a defined order (lists and sortedlists)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.RetrieveNames(System.String)">
            <summary>Parses an object name in the format server.database.owner.object</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.EncloseInSquareBrackets(System.String)">
            <summary>
            Encloses the <paramref name="id" /> in square brackets and escapes closing square brackets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.EncloseInSquareBracketsIfNotNull(System.String)">
            <summary>Encloses the <paramref name="id" /> in square brackets if it isn't null.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.EncloseInSquareBracketsIfNotNull(System.String,System.Text.StringBuilder)">
            <summary>
            Encloses the <paramref name="id" /> in square brackets and appends to the stringbuilder
            </summary>
            <returns>True if the id was inserted, false if <paramref name="id" /> is null</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.PrepareString(RedGate.SQLCompare.Engine.MappingOptions,RedGate.SQLCompare.Engine.IDatabaseObject,System.Boolean)">
            <summary>
            Returns a string that is reduced to it's basic components for quick comparison.
            </summary>
            <param name="mappingOptions">Mapping options to use for string transformation.</param>
            <param name="obj1">Object whose name is to be prepared.</param>
            <param name="fullName">Use the FullyQualifiedName or just Name</param>
            <returns>
            string lowered, removed spaces, removed underscores, removed prefix according to settings.
            </returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.PrepareString(RedGate.SQLCompare.Engine.MappingOptions,System.String)">
            <summary>
            Returns a string that is reduced to it's basic components for quick comparison.
            </summary>
            <param name="mappingOptions">Mapping options to use for string transformation.</param>
            <param name="name">The name to be prepared.</param>
            <returns>
            string lowered, removed spaces, removed underscores, removed prefix according to settings.
            </returns>
            <excludetoc />
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.IdenticalFreeText(System.String,System.String,RedGate.SQLCompare.Engine.Options)">
            <summary>
            Check if two text are identical, used by extended property comparison to ignore whitespace
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.StoreRegistrationTime(RedGate.SQLCompare.Engine.IMetadata,System.TimeSpan)">
            <summary>
            Helper method for saving a RegistrationTime metadata item
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.StoreDatabaseName(RedGate.SQLCompare.Engine.IMetadata,System.String,System.String)">
            <summary>
            Helper method for saving a DatabaseName metadata item
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.GetTimeToRun(System.Action)">
            <summary>
            Time how long <paramref name="action"/> takes
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Utils.ResultWithDuration`1">
            <summary>
            Helper class for returning both the result of an operation and the time the operation took
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Utils.GetTimeToRun``1(System.Func{``0})">
            <summary>
            Time how long <paramref name="action"/> takes
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.View">
            <summary>A view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.ObjectType">
            <summary>Returns ObjectType.View</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.SchemaBound">
            <summary>True if the view is schema bound.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.QuotedIdentifierOn">
            <summary>True if the view was created with <em>quoted identifiers on</em>.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.AnsiNullsOn">
            <summary>True if the view was created with <em>ansi nulls on.</em></summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.Text">
            <summary>The text of the view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.View.Encrypted">
            <summary>Identifies whether the view is encrypted.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.View.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns><em>True</em> if the views are identical; otherwise <em>false.</em></returns>
            <summary>Compares the view with a specified view.</summary>
            <param name="target">The view to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.View.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Views">
            <summary>A collection of views.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Views.SerializeItem(RedGate.SQLCompare.Engine.View,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Views.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ViewsAndTables">
            <summary>A collection of Views and Tables.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ViewsAndTables.GetKey(RedGate.SQLCompare.Engine.ViewTableSuperClass)">
            <summary>For internal use.</summary>
            <param name="vtsc">For internal use</param>
            <returns>For internal use</returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.ViewTableSuperClass">
            <summary>A view or table superclass.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Fields">
            <summary>Fields.</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.ViewTableSuperClass.m_Indexes">
            <summary>Indexes.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.SysobjectID">
            <summary>The sysobject identifier for the table or view.</summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Fields">
            <summary>The fields belonging to the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Indexes">
            <summary>The indexes defined on the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.Triggers">
            <summary>The triggers defined on the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.IsColumnstoreIndexed">
            <summary>Returns true iff the table has a columnstore index defined on it.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.HasFullTextIndex">
            <summary>True if the table or view has a full-text index defined on it</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.KeyIndexForFullTextIndex">
            <summary>The key index for the full-text index on the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.CatalogUsedForFullTextIndex">
            <summary>The full-text catalog used for the full-text index defined on the table or view</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextChangeTracking">
            <summary>The change tracking setting for the full text index.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextStoplistType">
            <summary>The stoplist type used for the full text index on the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextStoplist">
            <summary>The user-defined stoplist for the full text index on the table or view.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.ScriptSourceForFullTextTable">
            <summary>
            The location of the creation script for the fulltext table statement for this table or view if the database
            source is set to scripts folder.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextSearchPropertyList">
            <summary>The search property list attached the full-text index (if both exist)</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.FullTextSPLNameFromSerialization">
            <summary>
                <see cref="T:RedGate.SQLCompare.ASTParser.Syntax.Name" />
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ViewTableSuperClass.AddFullTextRegion(RedGate.SQLCompare.Engine.Regions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Adds a full text region including field definitions to regions</summary>
            <param name="regions">The collection the new region will be added to</param>
            <param name="options"></param>
            <param name="targetFeatures"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.ViewTableSuperClass.GetCreateFullTextIndexStatement(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>The CREATE statement for the full text index</summary>
            <param name="options">
            If this contains Options.SsdtCompatibleOptions, the fields are written as part of the definition
            </param>
            <param name="targetFeatures"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.ViewTableSuperClass.IsSystemObject">
            <summary>For internal use only!!!</summary>
            <exclude />
        </member>
        <member name="T:RedGate.SQLCompare.Engine.Work">
             <summary>Used to calculate the work to be done to synchronize databases.</summary>
             <remarks>
             The Work class is used to convert a set of <see cref="T:RedGate.SQLCompare.Engine.Differences" /> into an
             <see cref="P:RedGate.SQLCompare.Engine.Work.ExecutionBlock" /> containing SQL script, which can be used to synchronize two databases. It also
             provides <see cref="P:RedGate.SQLCompare.Engine.Work.Warnings" /> and
             <see cref="P:RedGate.SQLCompare.Engine.Work.Messages" /> about the work to be done.
             <para>
             <see cref="M:RedGate.SQLCompare.Engine.Work.ScriptObject(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)" /> can be used to generate scripts for individual database objects.
             </para>
             <para>
             Note that you should not re-use a Work object; you should re-create a new object every time.
             </para>
             </remarks>
             <example>
             This example shows how to compare and synchronize two databases.
             <code lang="CS">
             Database db1=new Database();
             Database db2=new Database();
            
             db1.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
             db2.Register(new ConnectionProperties(".", "WidgetProduction"), Options.Default);
            
             Differences differences=db1.PopulateDifferences(db2, Options.Default);
            
             foreach (Difference difference in differences)
             {
                 //make sure the difference is selected so it is included in the synchronization
                 difference.Selected=true;
             }
            
             Work work=new Work();
            
             //calculate the work to do using sensible default options
             //the script is to be run on WidgetProduction so the runOnTwo parameter is true
             work.BuildFromDifferences(differences, Options.Default, true);
            
             //we can now access the messages and warnings
            
             Console.WriteLine("Messages:");
            
             foreach (Message message in work.Messages)
             {
                 Console.WriteLine(message.Text);
             }
            
             Console.WriteLine("Warnings:");
            
             foreach (Message message in work.Warnings)
             {
                 Console.WriteLine(message.Text);
             }
            
             //print out the SQL used to synchronize
            
             ExecutionBlock block=work.ExecutionBlock;
            
             Console.WriteLine("SQL to synchronize:");
            
             Console.WriteLine(block.GetString());
            
             //and run the SQL
            
             RedGate.Shared.Sql.ExecutionBlock.BlockExecutor executor=new RedGate.Shared.Sql.ExecutionBlock.BlockExecutor();
             executor.ExecuteBlock(block, ".", "WidgetProduction");
            
             //dispose of the objects
             block.Dispose();
             db1.Dispose();
             db2.Dispose();
                 </code>
             <code lang="VB">
             Dim db1 As Database = New Database()
             Dim db2 As Database = New Database()
            
            
             db1.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
             db2.Register(New ConnectionProperties(".", "WidgetProduction"), Options.Default)
            
             Dim differences As Differences = db1.PopulateDifferences(db2, Options.Default)
            
             Dim difference As Difference
            
             For Each difference In differences
                 'make sure the difference is selected so it is included in the synchronization
                 difference.Selected = True
             Next
            
             Dim work As Work = New Work()
            
             'calculate the work to do using sensible default options
             'the script is to be run on WidgetProduction so the runOnTwo parameter is true
            
             work.BuildFromDifferences(differences, Options.Default, True)
            
             'we can now access the messages and warnings
            
             Console.WriteLine("Messages:")
            
             Dim message As Message
            
             For Each message In work.Messages
                 Console.WriteLine(message.Text)
             Next
            
             Console.WriteLine("Warnings:")
            
             For Each message In work.Warnings
                 Console.WriteLine(message.Text)
             Next
            
            
             'print out the SQL used to synchronize
            
             Dim block As ExecutionBlock = work.ExecutionBlock
            
             Console.WriteLine("SQL to synchronize:")
            
             Console.WriteLine(block.GetString())
            
             'and run the SQL
            
             Dim executor As BlockExecutor = New BlockExecutor
            
             executor.ExecuteBlock(block, ".", "WidgetProduction")
            
             'dispose of the objects
             block.Dispose()
             db1.Dispose()
             db2.Dispose()
                 </code>
             </example>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Build the work object from a set of differences. Use this method when synchronizing to a live database.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation)">
            <summary>
            Build the work object from a set of differences. It sets the ScriptSynchronizationActions property to include
            the synchronization actions for modifying a scripts folder. Use this method when synchronizing to a scripts
            folder.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="dbInfo">
            Options that sepcify how files are to be created when synchronizing to a scripts folder.
            </param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            Builds the work object from an individual difference. It sets the ExecutionBlock property to include the
            script for synchronization. Use this method when synchronizing to a live database.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator)">
            <summary>
            Builds the work object from an individual difference. It sets the ScriptSynchronizationActions property to
            include the synchronization actions for modifying a scripts folder. Use this method when synchronizing to a
            scripts folder.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="dbInfo">
            Options that sepcify how files are to be created when synchronizing to a scripts folder.
            </param>
            <param name="generator">The object responsible for generating the names of the newly created objects</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.BuildFromDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean,RedGate.SQLCompare.Engine.ReadFromFolder.ScriptDatabaseInformation,RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator)">
            <summary>
            Build the work object from a set of differences. It sets the ScriptSynchronizationActions property to include
            the synchronization actions for modifying a scripts folder. Use this method when synchronizing to a scripts
            folder.
            </summary>
            <param name="differences">The differences to use.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <param name="dbInfo">
            Options that sepcify how files are to be created when synchronizing to a scripts folder.
            </param>
            <param name="generator">The object responsible for generating the names of the newly created objects</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.ScriptObject(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.Options)">
             <summary>Returns the script necessary to create a SQL object.</summary>
             <remarks>
             This creates SQL code used to create an object such as a table, view, or stored procedure.
             </remarks>
             <example>
                 <code lang="CS">
             Database db=new Database();
            
             db.Register(new ConnectionProperties(".", "WidgetStaging"), Options.Default);
            
             Work work=new Work();
            
             //get the script for an object
             Regions regions=work.ScriptObject(db.Tables[0], Options.Default);
            
             Console.WriteLine("SQL script:\n{0}", regions.ToString());
            
             db.Dispose();
                 </code>
                 <code lang="VB">
             Dim db As New Database()
            
             db.Register(New ConnectionProperties(".", "WidgetStaging"), Options.Default)
            
             Dim work As New Work()
            
             'get the script for an object
            
             Dim regions As Regions = work.ScriptObject(db.Tables(0), Options.Default)
            
             Console.WriteLine("SQL script:")
             Console.WriteLine("{0}", regions.ToString())
            
             'dispose
             db.Dispose()
                 </code>
             </example>
             <returns>A <see cref="T:RedGate.SQLCompare.Engine.Regions">Regions</see> collection containing batches of SQL script.</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.Work.#ctor(RedGate.SQLCompare.Engine.ReadFromFolder.PathChooser.IFileNameGenerator)">
            <summary>Constructor.</summary>
            <param name="fileNameGenerator">The sql file name generator for new objects</param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.WorkFields.EstimateTotalWorkEntryCount(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>
            Estimates the number of operations that will be done during a work. This includes the sums of the que
            contents.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WorkItem">
            <summary>
            An item of work to perform while generating a deployment script.
            These are used to sort the deployment script based on dependency information.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.WorkItems.Add(RedGate.SQLCompare.Engine.WorkItem)">
            <summary>
            Adds the WorkItem
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.PlannedChanges">
            <summary>
            In general the ToDrop collections contains target database objects and the other collections contain source
            database objects and have a mapping added to the appropriate *Targets property when added.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.WorkResult">
            <remarks>
            This will most likely be replaced by incorporating messages and warnings into <see cref="T:RedGate.SQLCompare.Engine.Deployment.Sections.SqlSections"/>.
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.WorkResult.#ctor">
            <summary>Constructs a work result.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.WorkResult.Messages">
            <summary>Access to Messages.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.WorkResult.Warnings">
            <summary>Access to the warning messages.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.WorkResult.GetAllMessagesSnapshot">
            <summary>
            Readonly snapshot of the warnings and messages at the time this method was called.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.XmlSchemaCollection">
            <summary>An XML schema collection.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.ObjectType">
            <summary>Returns ObjectType.XmlSchemaCollection</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.Contents">
            <summary>The raw schema data.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.MessageTypes">
            <summary>The dependent message types.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentFields">
            <summary>The dependent database columns.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentStoredProcedures">
            <summary>The dependent stored procedures.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.DependentFunctions">
            <summary>The dependent functions.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.Equals(RedGate.SQLCompare.Engine.IDatabaseObject,RedGate.SQLCompare.Engine.ComparisonContext)">
            <returns>
            <em>True</em> if the schema collections are identical; otherwise
            <em>false.</em>
            </returns>
            <summary>Compares the schema collection with a specified schema collection.</summary>
            <param name="targetObject">The schema collection to compare.</param>
            <param name="context"></param>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.GetCanonicalXmlString(System.String)">
            <summary>Rewrite the <paramref name="xmlDoc" /> string into a canonical format</summary>
            <remarks>
            Since we're going to be doing a string comparison on <see cref="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.Contents" /> to determine equality between
            two schema collections, we want both strings to be in a common format so that we don't get spurious
            differences due to whitespace changes. This method should be called everywhere a schema collection is
            registered
            </remarks>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollection.ScriptObject(RedGate.SQLCompare.Engine.SqlSetOptions,RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Model.SqlServerVersioning.IFeatureChecker)">
            <summary>Scripts the object.</summary>
            <returns>Regions that contain the script.</returns>
            <param name="sqlSetOptions">SQL options (for example, quoted identifier on or off).</param>
            <param name="options">Scripting options.</param>
            <param name="targetFeatures"></param>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.XmlSchemaCollection.AuthType">
            <summary>
            Returns the object type that should be used for ALTER AUTHORIZATION statements on the object.
            </summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.XmlSchemaCollections">
            <summary>A collection of XML schema collections.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.SerializeItem(RedGate.SQLCompare.Engine.XmlSchemaCollection,RedGate.SQLCompare.Engine.NullableBinaryWriter)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.DeserializeItem(RedGate.SQLCompare.Engine.NullableBinaryReader)">
            <summary>For internal use</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.XmlSchemaCollections.RedGate#SQLCompare#Engine#IPatchUpAfterDeserialization#PatchUpAfterDeserialization(RedGate.SQLCompare.Engine.Database)">
            <summary>Must be run before table patch up!</summary>
        </member>
        <member name="T:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder">
            <summary>
            Calculates the database object changes required based on the selected <see cref="T:RedGate.SQLCompare.Engine.Differences" />
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.GetOptionsAndUseBlock(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.IDatabase)">
            <summary>
            GetOptionsAndUseBlock here is made available so that VersionedWork can access the options etc. as needed
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.ProductInfo">
            <summary>
            A string indicating the product generating the script, e.g. "SQL Compare version 1.2.3"
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.DateTimeProvider">
            <summary>
            Provides timestamps for naming files created by backup statements in the script
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.ScriptObject(RedGate.Shared.ComparisonInterfaces.TSql.ITSqlObject,RedGate.SQLCompare.Engine.Options)">
            <returns>The regions for a <see cref="T:RedGate.SQLCompare.Engine.ScriptableDatabaseObject"/> suitable for showing in the diff viewer</returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.CancelOperation">
            <summary>Cancels the current operation.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.Status">
            <summary>The event handler for status events.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.OnStatus(RedGate.Legacy.ProgressTasks.StatusEventArgs)">
            <summary>Fires the Status event</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.ProcessDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>
            This is the first stage of the main work, in which the necessary work is determined. This can only be used
            internally!
            </summary>
            <param name="userDifferences">The differences to use.</param>
            <param name="onlyDifferenceToInclude">The single difference to include.</param>
            <param name="options">The synchronization options.</param>
            <param name="runOnTwo">True if the SQL script is to be run on the second database.</param>
            <exclude />
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.SanitizeQueues(RedGate.SQLCompare.Engine.Options,RedGate.SQLCompare.Engine.Database,RedGate.SQLCompare.Engine.Database,System.Boolean)">
            <summary>
            Sanitizes queues, removes duplicate entries that need to be rebuild and modified.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.CalculateWork(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Options,System.Boolean)">
            <summary>This calculates the work that needs to be done during a synchronization.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.CalculateDifference(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference,RedGate.SQLCompare.Engine.Options,System.Boolean,System.Boolean)">
            <summary>Fills the action queues to make the target database the same as the master.</summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.ConvertExtendedPropertyUpdatesToDropCreate">
            <summary>Converts all extended property alters to drop/creates</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.DropAllTriggerAlters">
            <summary>drops any alters for triggers so they will be drop/creates instead</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueueBuilder.MapDifferences(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference@,System.Boolean)">
            <summary>
            Creates a new Differences object based on the owner mappings in the original Differences using the
            DatabaseMapper to rename schema objects to the mapped owner names in the source database.
            </summary>
            <returns></returns>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WorkType.Refresh">
            <summary>Refresh (sp_refresh for views).</summary>
        </member>
        <member name="F:RedGate.SQLCompare.Engine.WorkType.Rename">
            <summary>Rename an item. This is used by the refactoring tool.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueues.AssertDifferencesValid(RedGate.SQLCompare.Engine.Differences,RedGate.SQLCompare.Engine.Difference)">
            <summary>
            Legacy: Used to allow <see cref="T:RedGate.SQLCompare.Engine.Work"/>'s API to stay the same even though it allows users to pass different <paramref name="differences"/> and <paramref name="onlyDifferenceToInclude"/> each time in theory.
            </summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueues.GenerateSql">
            <summary>
            This is the second stage of the main work, in which the SQL is generated for the synchronization. This can
            only be used internally.
            </summary>
            <exclude />
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlGenerationQueues.Dependencies">
            <summary>
            The dependencies selected for the current Work. Populated during ProcessDifferences>. Dictionary is of &lt;
            dependent object, objects depending on it&gt;.
            </summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlGenerationQueues.Warnings">
            <summary>Warnings about the work to be done.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueues.CancelOperation">
            <summary>Cancels the current operation.</summary>
        </member>
        <member name="P:RedGate.SQLCompare.Engine.SqlGenerationQueues.Status">
            <summary>The event handler for status events.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueues.SetImplicitlySelectedDifferences">
            <summary>For internal use only.</summary>
        </member>
        <member name="M:RedGate.SQLCompare.Engine.SqlGenerationQueues.SetDifferenceImplicitness``1(RedGate.SQLCompare.Engine.Differences,System.Collections.Generic.IEnumerable{``0},System.Converter{``0,RedGate.SQLCompare.Engine.IDatabaseObject})">
            <summary>
            Marks differences to the selectedDiffs hashtable if an object in collection is part of the difference. The
            difference is marked with "true" if it has been explicitly selected, and with false, if the selection is
            implicit.
            </summary>
        </member>
        <member name="T:PublicKeys">
            <summary>
            Well-known public key strings used when referencing assemblies for InternalsVisibleTo attributes, etc
            </summary>
        </member>
        <member name="F:PublicKeys.RedGate">
            <summary>
            This is the public key corresponding to \\red-gate.com\files\RG_Build_Key\RedGate.snk at the time of writing.
            </summary>
        </member>
    </members>
</doc>
